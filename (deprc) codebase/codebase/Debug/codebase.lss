
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000cf4  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800160  00800160  00000de8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003703  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001598  00000000  00000000  0000473f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d30  00000000  00000000  00005cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00007a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001654  00000000  00000000  00007e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a6  00000000  00000000  00009478  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000a71e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_19>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e4 ef       	ldi	r30, 0xF4	; 244
  88:	fc e0       	ldi	r31, 0x0C	; 12
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 36       	cpi	r26, 0x60	; 96
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e6       	ldi	r26, 0x60	; 96
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	af 36       	cpi	r26, 0x6F	; 111
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <main>
  aa:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
  b2:	98 2f       	mov	r25, r24
  b4:	95 30       	cpi	r25, 0x05	; 5
  b6:	68 f5       	brcc	.+90     	; 0x112 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  b8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
  bc:	98 17       	cp	r25, r24
  be:	39 f0       	breq	.+14     	; 0xce <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
  c0:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			UECFG1XTemp = UECFG1X;
  c4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
			UEIENXTemp  = UEIENX;
  c8:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
  ce:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
  d0:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
  d2:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
  d4:	21 fd       	sbrc	r18, 1
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Endpoint_ConfigureEndpoint_Prv+0x2a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
  d8:	9f 5f       	subi	r25, 0xFF	; 255
  da:	ec cf       	rjmp	.-40     	; 0xb4 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
  dc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
  e0:	3e 7f       	andi	r19, 0xFE	; 254
  e2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
  e6:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
  ea:	3d 7f       	andi	r19, 0xFD	; 253
  ec:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
  f0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
  f4:	31 60       	ori	r19, 0x01	; 1
  f6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
  fa:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
		UECFG1X = UECFG1XTemp;
  fe:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		UEIENX  = UEIENXTemp;
 102:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 106:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>

		if (!(Endpoint_IsConfigured()))
 10a:	27 fd       	sbrc	r18, 7
 10c:	e5 cf       	rjmp	.-54     	; 0xd8 <Endpoint_ConfigureEndpoint_Prv+0x26>
		  return false;
 10e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 110:	08 95       	ret
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret

0000011c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 11c:	08 95       	ret

0000011e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 11e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 122:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USB_INT_ClearAllInterrupts>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 126:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
 12a:	8f 77       	andi	r24, 0x7F	; 127
 12c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
 130:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
 134:	80 68       	ori	r24, 0x80	; 128
 136:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 13a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 14c:	09 b4       	in	r0, 0x29	; 41
 14e:	00 fe       	sbrs	r0, 0
 150:	fd cf       	rjmp	.-6      	; 0x14c <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 152:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 156:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 15a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 15e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 162:	42 e0       	ldi	r20, 0x02	; 2
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 59 00 	call	0xb2	; 0xb2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 16c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 176:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 180:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 184:	88 60       	ori	r24, 0x08	; 8
 186:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 18a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
 18e:	8e 7f       	andi	r24, 0xFE	; 254
 190:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
 194:	08 95       	ret

00000196 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 196:	e3 e6       	ldi	r30, 0x63	; 99
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <USB_IsInitialized>

	USB_ResetInterface();
 1a6:	0c 94 8f 00 	jmp	0x11e	; 0x11e <USB_ResetInterface>

000001aa <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 1aa:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 1ae:	08 95       	ret

000001b0 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 1b0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 1b4:	08 95       	ret

000001b6 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 1d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 1dc:	82 ff       	sbrs	r24, 2
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 1e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 1e4:	82 ff       	sbrs	r24, 2
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 1e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 1ec:	8b 7f       	andi	r24, 0xFB	; 251
 1ee:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 1f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 1fa:	80 ff       	sbrs	r24, 0
 1fc:	18 c0       	rjmp	.+48     	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 1fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 202:	80 ff       	sbrs	r24, 0
 204:	14 c0       	rjmp	.+40     	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 206:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 210:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 214:	80 61       	ori	r24, 0x10	; 16
 216:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 21a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
 21e:	80 62       	ori	r24, 0x20	; 32
 220:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 224:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 226:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
 22a:	0e 94 a3 01 	call	0x346	; 0x346 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 22e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 232:	84 ff       	sbrs	r24, 4
 234:	30 c0       	rjmp	.+96     	; 0x296 <__DATA_REGION_LENGTH__+0x96>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 236:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 23a:	84 ff       	sbrs	r24, 4
 23c:	2c c0       	rjmp	.+88     	; 0x296 <__DATA_REGION_LENGTH__+0x96>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 246:	09 b4       	in	r0, 0x29	; 41
 248:	00 fe       	sbrs	r0, 0
 24a:	fd cf       	rjmp	.-6      	; 0x246 <__DATA_REGION_LENGTH__+0x46>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 24c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
 250:	8f 7d       	andi	r24, 0xDF	; 223
 252:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 256:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 25a:	8f 7e       	andi	r24, 0xEF	; 239
 25c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 260:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 26a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 274:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <USB_Device_ConfigurationNumber>
 278:	88 23       	and	r24, r24
 27a:	11 f0       	breq	.+4      	; 0x280 <__DATA_REGION_LENGTH__+0x80>
		  USB_DeviceState = DEVICE_STATE_Configured;
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 280:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 284:	87 fd       	sbrc	r24, 7
 286:	02 c0       	rjmp	.+4      	; 0x28c <__DATA_REGION_LENGTH__+0x8c>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	01 c0       	rjmp	.+2      	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 292:	0e 94 8b 01 	call	0x316	; 0x316 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 296:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 29a:	83 ff       	sbrs	r24, 3
 29c:	24 c0       	rjmp	.+72     	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 29e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 2a2:	83 ff       	sbrs	r24, 3
 2a4:	20 c0       	rjmp	.+64     	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 2a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 2aa:	87 7f       	andi	r24, 0xF7	; 247
 2ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 2b6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 2ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 2c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 2ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 2d2:	80 61       	ori	r24, 0x10	; 16
 2d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 2d8:	42 e0       	ldi	r20, 0x02	; 2
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 59 00 	call	0xb2	; 0xb2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 2e2:	0e 94 8e 00 	call	0x11c	; 0x11c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <SPI_SendByte.part.0>:
		port_GPIO &= ~(1 << GPIO_pin);
		delay_sck_cycles(cycles/2);
	}

	return true;
}
 308:	2f 98       	cbi	0x05, 7	; 5
 30a:	8e bd       	out	0x2e, r24	; 46
 30c:	0d b4       	in	r0, 0x2d	; 45
 30e:	07 fe       	sbrs	r0, 7
 310:	fd cf       	rjmp	.-6      	; 0x30c <SPI_SendByte.part.0+0x4>
 312:	2f 9a       	sbi	0x05, 7	; 5
 314:	08 95       	ret

00000316 <EVENT_USB_Device_Connect>:
 316:	cf 93       	push	r28
 318:	c2 e0       	ldi	r28, 0x02	; 2
 31a:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
 31e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
 322:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
 326:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
 32a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <CurrentAudioSampleFrequency+0x3>
 32e:	60 e8       	ldi	r22, 0x80	; 128
 330:	74 e8       	ldi	r23, 0x84	; 132
 332:	8e e1       	ldi	r24, 0x1E	; 30
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__udivmodsi4>
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	27 bd       	out	0x27, r18	; 39
 33e:	c4 bd       	out	0x24, r28	; 36
 340:	c5 bd       	out	0x25, r28	; 37
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <EVENT_USB_Device_Disconnect>:
 346:	15 bc       	out	0x25, r1	; 37
 348:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
 34c:	08 95       	ret

0000034e <__vector_19>:
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	cf 93       	push	r28
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
 372:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 376:	cf 70       	andi	r28, 0x0F	; 15
 378:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 37c:	89 2f       	mov	r24, r25
 37e:	81 70       	andi	r24, 0x01	; 1
 380:	90 fd       	sbrc	r25, 0
 382:	80 e8       	ldi	r24, 0x80	; 128
 384:	c8 2b       	or	r28, r24
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 38c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
 390:	80 ff       	sbrs	r24, 0
 392:	14 c0       	rjmp	.+40     	; 0x3bc <__vector_19+0x6e>
 394:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 398:	88 23       	and	r24, r24
 39a:	81 f0       	breq	.+32     	; 0x3bc <__vector_19+0x6e>
 39c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rand>
 3a0:	90 58       	subi	r25, 0x80	; 128
 3a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 3a6:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 3aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
 3ae:	85 fd       	sbrc	r24, 5
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <__vector_19+0x6e>
 3b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
 3b6:	8e 77       	andi	r24, 0x7E	; 126
 3b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
 3bc:	cf 70       	andi	r28, 0x0F	; 15
 3be:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	cf 91       	pop	r28
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <SPI_SendByte>:
 3e6:	61 11       	cpse	r22, r1
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <SPI_SendByte+0x8>
 3ea:	0c 94 84 01 	jmp	0x308	; 0x308 <SPI_SendByte.part.0>
 3ee:	8e bd       	out	0x2e, r24	; 46
 3f0:	0d b4       	in	r0, 0x2d	; 45
 3f2:	07 fe       	sbrs	r0, 7
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <SPI_SendByte+0xa>
 3f6:	08 95       	ret

000003f8 <ADS1299_WREG>:
 3f8:	ff 92       	push	r15
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	f6 2e       	mov	r15, r22
 404:	07 2f       	mov	r16, r23
 406:	14 2f       	mov	r17, r20
 408:	2f 98       	cbi	0x05, 7	; 5
 40a:	8f 71       	andi	r24, 0x1F	; 31
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_SendByte>
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	81 0f       	add	r24, r17
 41a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_SendByte>
 41e:	cf 2d       	mov	r28, r15
 420:	d0 2f       	mov	r29, r16
 422:	ce 01       	movw	r24, r28
 424:	81 0f       	add	r24, r17
 426:	91 1d       	adc	r25, r1
 428:	8c 01       	movw	r16, r24
 42a:	c0 17       	cp	r28, r16
 42c:	d1 07       	cpc	r29, r17
 42e:	29 f0       	breq	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	89 91       	ld	r24, Y+
 434:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_SendByte>
 438:	f8 cf       	rjmp	.-16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 43a:	2f 9a       	sbi	0x05, 7	; 5
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	08 95       	ret

00000448 <ADS1299_SDATAC>:
 448:	81 e1       	ldi	r24, 0x11	; 17
 44a:	0e 94 84 01 	call	0x308	; 0x308 <SPI_SendByte.part.0>
 44e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <_ADS1299_MODE>
 452:	08 95       	ret

00000454 <delay_sck_cycles>:
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	dc 01       	movw	r26, r24
 45a:	cb 01       	movw	r24, r22
 45c:	22 e0       	ldi	r18, 0x02	; 2
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	aa 1f       	adc	r26, r26
 464:	bb 1f       	adc	r27, r27
 466:	2a 95       	dec	r18
 468:	d1 f7       	brne	.-12     	; 0x45e <delay_sck_cycles+0xa>
 46a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
 474:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 478:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 47c:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 480:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	08 17       	cp	r16, r24
 48a:	19 07       	cpc	r17, r25
 48c:	2a 07       	cpc	r18, r26
 48e:	3b 07       	cpc	r19, r27
 490:	90 f4       	brcc	.+36     	; 0x4b6 <delay_sck_cycles+0x62>
 492:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 496:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 49a:	29 3e       	cpi	r18, 0xE9	; 233
 49c:	3d 4f       	sbci	r19, 0xFD	; 253
 49e:	70 f3       	brcs	.-36     	; 0x47c <delay_sck_cycles+0x28>
 4a0:	89 3e       	cpi	r24, 0xE9	; 233
 4a2:	2d ef       	ldi	r18, 0xFD	; 253
 4a4:	92 07       	cpc	r25, r18
 4a6:	a1 05       	cpc	r26, r1
 4a8:	b1 05       	cpc	r27, r1
 4aa:	40 f3       	brcs	.-48     	; 0x47c <delay_sck_cycles+0x28>
 4ac:	88 5e       	subi	r24, 0xE8	; 232
 4ae:	9d 4f       	sbci	r25, 0xFD	; 253
 4b0:	a1 09       	sbc	r26, r1
 4b2:	b1 09       	sbc	r27, r1
 4b4:	df cf       	rjmp	.-66     	; 0x474 <delay_sck_cycles+0x20>
 4b6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	08 95       	ret

000004c0 <ADS1299_SETUP>:

	TCCR1B = 0;
}

// This function sets up the ADS1299
void ADS1299_SETUP(void) {
 4c0:	ff 92       	push	r15
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <ADS1299_SETUP+0xc>
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
	}

	// This function sets the CLK SEL pin HIGH or LOW
	static inline void SET_CLK_SEL(const bool input) {
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
 4d0:	5c 9a       	sbi	0x0b, 4	; 11
	SET_CLK_SEL(true);
	delay_sck_cycles(2^20);  // Changed 2^20 to 1 << 20 for proper bit shifting
 4d2:	66 e1       	ldi	r22, 0x16	; 22
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 2a 02 	call	0x454	; 0x454 <delay_sck_cycles>
		input ? (port_SPI |= (1 << pin_SS)) : (port_SPI &= ~(1 << pin_SS));
	}

	// This function will set the PWR_DWN pin HIGH or LOW (following boolean input)
	static inline void SET_PWR_DWN(const bool input) {
		input ? (port_GPIO |= (1 << pin_PWR_DWN)) : (port_GPIO &= ~(1 << pin_PWR_DWN));
 4de:	58 98       	cbi	0x0b, 0	; 11
	}

	// This function will set RST pin HIGHs or LOW (following boolean input)
	static inline void SET_RST(const bool input) {
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
 4e0:	5c 98       	cbi	0x0b, 4	; 11
	SET_PWR_DWN(false);
	SET_RST(false);
	delay_sck_cycles(2^20);
 4e2:	66 e1       	ldi	r22, 0x16	; 22
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 2a 02 	call	0x454	; 0x454 <delay_sck_cycles>
		input ? (port_SPI |= (1 << pin_SS)) : (port_SPI &= ~(1 << pin_SS));
	}

	// This function will set the PWR_DWN pin HIGH or LOW (following boolean input)
	static inline void SET_PWR_DWN(const bool input) {
		input ? (port_GPIO |= (1 << pin_PWR_DWN)) : (port_GPIO &= ~(1 << pin_PWR_DWN));
 4ee:	58 9a       	sbi	0x0b, 0	; 11
	}

	// This function will set RST pin HIGHs or LOW (following boolean input)
	static inline void SET_RST(const bool input) {
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
 4f0:	5c 9a       	sbi	0x0b, 4	; 11
	SET_PWR_DWN(true);
	SET_RST(true);
	delay_sck_cycles(2^20);
 4f2:	66 e1       	ldi	r22, 0x16	; 22
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 2a 02 	call	0x454	; 0x454 <delay_sck_cycles>
	ADS1299_SDATAC();
 4fe:	0e 94 24 02 	call	0x448	; 0x448 <ADS1299_SDATAC>
	uint8_t refbuf[] = {0b11100000};
 502:	80 ee       	ldi	r24, 0xE0	; 224
 504:	8a 83       	std	Y+2, r24	; 0x02
	ADS1299_WREG(0x3, refbuf, 1);
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	be 01       	movw	r22, r28
 50a:	6e 5f       	subi	r22, 0xFE	; 254
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <ADS1299_WREG>
	delay_sck_cycles(2^ 20);
 514:	66 e1       	ldi	r22, 0x16	; 22
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 2a 02 	call	0x454	; 0x454 <delay_sck_cycles>
 520:	08 e0       	ldi	r16, 0x08	; 8
 522:	11 e0       	ldi	r17, 0x01	; 1
 524:	ff 24       	eor	r15, r15
 526:	f3 94       	inc	r15

	uint8_t i = 0;
	while (i < size_reg_ls) {
		const regVal_pair temp = ADS1299_REGISTER_LS[i];  // Initialize struct directly
 528:	f8 01       	movw	r30, r16
 52a:	80 81       	ld	r24, Z
 52c:	91 81       	ldd	r25, Z+1	; 0x01
		if (temp.add == -2) {  // Use dot notation instead of arrow operator
 52e:	8e 3f       	cpi	r24, 0xFE	; 254
 530:	ff ef       	ldi	r31, 0xFF	; 255
 532:	9f 07       	cpc	r25, r31
 534:	79 f0       	breq	.+30     	; 0x554 <ADS1299_SETUP+0x94>
			i++;
			continue;
		}
		uint8_t value[] = {(uint8_t)temp.reg_val};  // Use dot notation
 536:	f8 01       	movw	r30, r16
 538:	92 81       	ldd	r25, Z+2	; 0x02
 53a:	99 83       	std	Y+1, r25	; 0x01
		ADS1299_WREG(temp.add, value, 1);  // Use dot notation
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	be 01       	movw	r22, r28
 540:	6f 5f       	subi	r22, 0xFF	; 255
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <ADS1299_WREG>
		delay_sck_cycles(10);
 548:	6a e0       	ldi	r22, 0x0A	; 10
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 2a 02 	call	0x454	; 0x454 <delay_sck_cycles>
 554:	0c 5f       	subi	r16, 0xFC	; 252
 556:	1f 4f       	sbci	r17, 0xFF	; 255
 558:	f3 94       	inc	r15
	uint8_t refbuf[] = {0b11100000};
	ADS1299_WREG(0x3, refbuf, 1);
	delay_sck_cycles(2^ 20);

	uint8_t i = 0;
	while (i < size_reg_ls) {
 55a:	f7 e1       	ldi	r31, 0x17	; 23
 55c:	ff 12       	cpse	r15, r31
 55e:	e4 cf       	rjmp	.-56     	; 0x528 <ADS1299_SETUP+0x68>
		uint8_t value[] = {(uint8_t)temp.reg_val};  // Use dot notation
		ADS1299_WREG(temp.add, value, 1);  // Use dot notation
		delay_sck_cycles(10);
		i++;
	}
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	08 95       	ret

00000570 <SetupHardware>:

/** Configures the board hardware and chip peripherals . */
void SetupHardware(void) {
	#if (ARCH == ARCH_AVR8)
		/* Disable watchdog if enabled by bootloader/fuses */
		MCUSR &= ~(1 << WDRF);
 570:	84 b7       	in	r24, 0x34	; 52
 572:	87 7f       	andi	r24, 0xF7	; 247
 574:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	a8 95       	wdr
 57c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 580:	88 61       	ori	r24, 0x18	; 24
 582:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 586:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 58a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	80 e8       	ldi	r24, 0x80	; 128
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
 598:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
 59c:	0f be       	out	0x3f, r0	; 63
	/* Hardware Initialization */
	//LEDs_Init();
	//Buttons_Init();
	//ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	//ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
 59e:	0e 94 cb 00 	call	0x196	; 0x196 <USB_Init>

	/* Start the ADC conversion in free running mode */
	//ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));
	_ADS1299_MODE = ADS1299_MODE_WAKEUP;
 5a2:	8a e0       	ldi	r24, 0x0A	; 10
 5a4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_ADS1299_MODE>
	// SPI Configuration (ddr_SPI = DDRB)
	ddr_SPI |= (1 << pin_MOSI) | (1 << pin_SCK) | (1 << pin_SS); //MOSI, SCK, SS are outputs
 5a8:	84 b1       	in	r24, 0x04	; 4
 5aa:	80 6e       	ori	r24, 0xE0	; 224
 5ac:	84 b9       	out	0x04, r24	; 4
	ddr_SPI &= ~(1 << pin_MISO);
 5ae:	24 98       	cbi	0x04, 4	; 4

	// Setting Clock rate to fck/16 and enabling SPI as master.
	SPCR = (1 << SPE) | (1 << MSTR) | (1<<SPI2X) | (1 << SPR0) | (0 << CPOL) | (0 << CPHA);
 5b0:	81 e5       	ldi	r24, 0x51	; 81
 5b2:	8c bd       	out	0x2c, r24	; 44
	ADS1299_SETUP();
 5b4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <ADS1299_SETUP>
	
	delay_sck_cycles(2^15);
 5b8:	6d e0       	ldi	r22, 0x0D	; 13
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0c 94 2a 02 	jmp	0x454	; 0x454 <delay_sck_cycles>

000005c4 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void) {
	SetupHardware();
 5c4:	0e 94 b8 02 	call	0x570	; 0x570 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 5c8:	78 94       	sei
	#ifdef TEST_USB
		#include "Tests/test_USB.c"
		test_usb();
	#endif*/

	DDRD |= (1 << pin_LED_DEBUG);
 5ca:	57 9a       	sbi	0x0a, 7	; 10
	//port_GPIO |= (1 << pin_LED_DEBUG);
	//lightUp(5, pin_LED_DEBUG, 2.0);
	//delay_sck_cycles(2^18);
	//lightUp(10, pin_LED_DEBUG, 2.0);
	port_GPIO |= (1 << pin_LED_DEBUG);
 5cc:	5f 9a       	sbi	0x0b, 7	; 11

	int count = 2;
	uint8_t buffon[1];
	
	while (true) {
		port_GPIO |= (1 << pin_LED_DEBUG);
 5ce:	5f 9a       	sbi	0x0b, 7	; 11
		port_GPIO &= ~(1 << pin_LED_DEBUG);
 5d0:	5f 98       	cbi	0x0b, 7	; 11
 5d2:	fd cf       	rjmp	.-6      	; 0x5ce <main+0xa>

000005d4 <__udivmodsi4>:
 5d4:	a1 e2       	ldi	r26, 0x21	; 33
 5d6:	1a 2e       	mov	r1, r26
 5d8:	aa 1b       	sub	r26, r26
 5da:	bb 1b       	sub	r27, r27
 5dc:	fd 01       	movw	r30, r26
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <__udivmodsi4_ep>

000005e0 <__udivmodsi4_loop>:
 5e0:	aa 1f       	adc	r26, r26
 5e2:	bb 1f       	adc	r27, r27
 5e4:	ee 1f       	adc	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	a2 17       	cp	r26, r18
 5ea:	b3 07       	cpc	r27, r19
 5ec:	e4 07       	cpc	r30, r20
 5ee:	f5 07       	cpc	r31, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__udivmodsi4_ep>
 5f2:	a2 1b       	sub	r26, r18
 5f4:	b3 0b       	sbc	r27, r19
 5f6:	e4 0b       	sbc	r30, r20
 5f8:	f5 0b       	sbc	r31, r21

000005fa <__udivmodsi4_ep>:
 5fa:	66 1f       	adc	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	1a 94       	dec	r1
 604:	69 f7       	brne	.-38     	; 0x5e0 <__udivmodsi4_loop>
 606:	60 95       	com	r22
 608:	70 95       	com	r23
 60a:	80 95       	com	r24
 60c:	90 95       	com	r25
 60e:	9b 01       	movw	r18, r22
 610:	ac 01       	movw	r20, r24
 612:	bd 01       	movw	r22, r26
 614:	cf 01       	movw	r24, r30
 616:	08 95       	ret

00000618 <do_rand>:
 618:	8f 92       	push	r8
 61a:	9f 92       	push	r9
 61c:	af 92       	push	r10
 61e:	bf 92       	push	r11
 620:	cf 92       	push	r12
 622:	df 92       	push	r13
 624:	ef 92       	push	r14
 626:	ff 92       	push	r15
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	ec 01       	movw	r28, r24
 62e:	68 81       	ld	r22, Y
 630:	79 81       	ldd	r23, Y+1	; 0x01
 632:	8a 81       	ldd	r24, Y+2	; 0x02
 634:	9b 81       	ldd	r25, Y+3	; 0x03
 636:	61 15       	cp	r22, r1
 638:	71 05       	cpc	r23, r1
 63a:	81 05       	cpc	r24, r1
 63c:	91 05       	cpc	r25, r1
 63e:	21 f4       	brne	.+8      	; 0x648 <do_rand+0x30>
 640:	64 e2       	ldi	r22, 0x24	; 36
 642:	79 ed       	ldi	r23, 0xD9	; 217
 644:	8b e5       	ldi	r24, 0x5B	; 91
 646:	97 e0       	ldi	r25, 0x07	; 7
 648:	2d e1       	ldi	r18, 0x1D	; 29
 64a:	33 ef       	ldi	r19, 0xF3	; 243
 64c:	41 e0       	ldi	r20, 0x01	; 1
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	0e 94 22 06 	call	0xc44	; 0xc44 <__divmodsi4>
 654:	49 01       	movw	r8, r18
 656:	5a 01       	movw	r10, r20
 658:	27 ea       	ldi	r18, 0xA7	; 167
 65a:	31 e4       	ldi	r19, 0x41	; 65
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsi3>
 664:	6b 01       	movw	r12, r22
 666:	7c 01       	movw	r14, r24
 668:	2c ee       	ldi	r18, 0xEC	; 236
 66a:	34 ef       	ldi	r19, 0xF4	; 244
 66c:	4f ef       	ldi	r20, 0xFF	; 255
 66e:	5f ef       	ldi	r21, 0xFF	; 255
 670:	c5 01       	movw	r24, r10
 672:	b4 01       	movw	r22, r8
 674:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsi3>
 678:	dc 01       	movw	r26, r24
 67a:	cb 01       	movw	r24, r22
 67c:	8c 0d       	add	r24, r12
 67e:	9d 1d       	adc	r25, r13
 680:	ae 1d       	adc	r26, r14
 682:	bf 1d       	adc	r27, r15
 684:	b7 ff       	sbrs	r27, 7
 686:	03 c0       	rjmp	.+6      	; 0x68e <do_rand+0x76>
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	a1 09       	sbc	r26, r1
 68c:	b0 48       	sbci	r27, 0x80	; 128
 68e:	88 83       	st	Y, r24
 690:	99 83       	std	Y+1, r25	; 0x01
 692:	aa 83       	std	Y+2, r26	; 0x02
 694:	bb 83       	std	Y+3, r27	; 0x03
 696:	9f 77       	andi	r25, 0x7F	; 127
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	ff 90       	pop	r15
 69e:	ef 90       	pop	r14
 6a0:	df 90       	pop	r13
 6a2:	cf 90       	pop	r12
 6a4:	bf 90       	pop	r11
 6a6:	af 90       	pop	r10
 6a8:	9f 90       	pop	r9
 6aa:	8f 90       	pop	r8
 6ac:	08 95       	ret

000006ae <rand_r>:
 6ae:	0e 94 0c 03 	call	0x618	; 0x618 <do_rand>
 6b2:	08 95       	ret

000006b4 <rand>:
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	0e 94 0c 03 	call	0x618	; 0x618 <do_rand>
 6bc:	08 95       	ret

000006be <srand>:
 6be:	a0 e0       	ldi	r26, 0x00	; 0
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 6c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6ca:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6d2:	08 95       	ret

000006d4 <vfprintf>:
 6d4:	ab e0       	ldi	r26, 0x0B	; 11
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	e0 e7       	ldi	r30, 0x70	; 112
 6da:	f3 e0       	ldi	r31, 0x03	; 3
 6dc:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__prologue_saves__>
 6e0:	6c 01       	movw	r12, r24
 6e2:	7b 01       	movw	r14, r22
 6e4:	8a 01       	movw	r16, r20
 6e6:	fc 01       	movw	r30, r24
 6e8:	17 82       	std	Z+7, r1	; 0x07
 6ea:	16 82       	std	Z+6, r1	; 0x06
 6ec:	83 81       	ldd	r24, Z+3	; 0x03
 6ee:	81 ff       	sbrs	r24, 1
 6f0:	cf c1       	rjmp	.+926    	; 0xa90 <vfprintf+0x3bc>
 6f2:	ce 01       	movw	r24, r28
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	3c 01       	movw	r6, r24
 6f8:	f6 01       	movw	r30, r12
 6fa:	93 81       	ldd	r25, Z+3	; 0x03
 6fc:	f7 01       	movw	r30, r14
 6fe:	93 fd       	sbrc	r25, 3
 700:	85 91       	lpm	r24, Z+
 702:	93 ff       	sbrs	r25, 3
 704:	81 91       	ld	r24, Z+
 706:	7f 01       	movw	r14, r30
 708:	88 23       	and	r24, r24
 70a:	09 f4       	brne	.+2      	; 0x70e <vfprintf+0x3a>
 70c:	bd c1       	rjmp	.+890    	; 0xa88 <vfprintf+0x3b4>
 70e:	85 32       	cpi	r24, 0x25	; 37
 710:	39 f4       	brne	.+14     	; 0x720 <vfprintf+0x4c>
 712:	93 fd       	sbrc	r25, 3
 714:	85 91       	lpm	r24, Z+
 716:	93 ff       	sbrs	r25, 3
 718:	81 91       	ld	r24, Z+
 71a:	7f 01       	movw	r14, r30
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	29 f4       	brne	.+10     	; 0x72a <vfprintf+0x56>
 720:	b6 01       	movw	r22, r12
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 728:	e7 cf       	rjmp	.-50     	; 0x6f8 <vfprintf+0x24>
 72a:	91 2c       	mov	r9, r1
 72c:	21 2c       	mov	r2, r1
 72e:	31 2c       	mov	r3, r1
 730:	ff e1       	ldi	r31, 0x1F	; 31
 732:	f3 15       	cp	r31, r3
 734:	e0 f0       	brcs	.+56     	; 0x76e <vfprintf+0x9a>
 736:	8b 32       	cpi	r24, 0x2B	; 43
 738:	79 f0       	breq	.+30     	; 0x758 <vfprintf+0x84>
 73a:	38 f4       	brcc	.+14     	; 0x74a <vfprintf+0x76>
 73c:	80 32       	cpi	r24, 0x20	; 32
 73e:	79 f0       	breq	.+30     	; 0x75e <vfprintf+0x8a>
 740:	83 32       	cpi	r24, 0x23	; 35
 742:	a9 f4       	brne	.+42     	; 0x76e <vfprintf+0x9a>
 744:	23 2d       	mov	r18, r3
 746:	20 61       	ori	r18, 0x10	; 16
 748:	10 c0       	rjmp	.+32     	; 0x76a <vfprintf+0x96>
 74a:	8d 32       	cpi	r24, 0x2D	; 45
 74c:	59 f0       	breq	.+22     	; 0x764 <vfprintf+0x90>
 74e:	80 33       	cpi	r24, 0x30	; 48
 750:	71 f4       	brne	.+28     	; 0x76e <vfprintf+0x9a>
 752:	23 2d       	mov	r18, r3
 754:	21 60       	ori	r18, 0x01	; 1
 756:	09 c0       	rjmp	.+18     	; 0x76a <vfprintf+0x96>
 758:	83 2d       	mov	r24, r3
 75a:	82 60       	ori	r24, 0x02	; 2
 75c:	38 2e       	mov	r3, r24
 75e:	e3 2d       	mov	r30, r3
 760:	e4 60       	ori	r30, 0x04	; 4
 762:	24 c0       	rjmp	.+72     	; 0x7ac <vfprintf+0xd8>
 764:	f3 2d       	mov	r31, r3
 766:	f8 60       	ori	r31, 0x08	; 8
 768:	27 c0       	rjmp	.+78     	; 0x7b8 <vfprintf+0xe4>
 76a:	32 2e       	mov	r3, r18
 76c:	29 c0       	rjmp	.+82     	; 0x7c0 <vfprintf+0xec>
 76e:	37 fc       	sbrc	r3, 7
 770:	2f c0       	rjmp	.+94     	; 0x7d0 <vfprintf+0xfc>
 772:	20 ed       	ldi	r18, 0xD0	; 208
 774:	28 0f       	add	r18, r24
 776:	2a 30       	cpi	r18, 0x0A	; 10
 778:	98 f4       	brcc	.+38     	; 0x7a0 <vfprintf+0xcc>
 77a:	36 fe       	sbrs	r3, 6
 77c:	07 c0       	rjmp	.+14     	; 0x78c <vfprintf+0xb8>
 77e:	89 2d       	mov	r24, r9
 780:	6a e0       	ldi	r22, 0x0A	; 10
 782:	0e 94 00 06 	call	0xc00	; 0xc00 <__mulqi3>
 786:	92 2e       	mov	r9, r18
 788:	98 0e       	add	r9, r24
 78a:	1a c0       	rjmp	.+52     	; 0x7c0 <vfprintf+0xec>
 78c:	82 2d       	mov	r24, r2
 78e:	6a e0       	ldi	r22, 0x0A	; 10
 790:	0e 94 00 06 	call	0xc00	; 0xc00 <__mulqi3>
 794:	22 2e       	mov	r2, r18
 796:	28 0e       	add	r2, r24
 798:	83 2d       	mov	r24, r3
 79a:	80 62       	ori	r24, 0x20	; 32
 79c:	38 2e       	mov	r3, r24
 79e:	10 c0       	rjmp	.+32     	; 0x7c0 <vfprintf+0xec>
 7a0:	8e 32       	cpi	r24, 0x2E	; 46
 7a2:	31 f4       	brne	.+12     	; 0x7b0 <vfprintf+0xdc>
 7a4:	36 fc       	sbrc	r3, 6
 7a6:	70 c1       	rjmp	.+736    	; 0xa88 <vfprintf+0x3b4>
 7a8:	e3 2d       	mov	r30, r3
 7aa:	e0 64       	ori	r30, 0x40	; 64
 7ac:	3e 2e       	mov	r3, r30
 7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <vfprintf+0xec>
 7b0:	8c 36       	cpi	r24, 0x6C	; 108
 7b2:	21 f4       	brne	.+8      	; 0x7bc <vfprintf+0xe8>
 7b4:	f3 2d       	mov	r31, r3
 7b6:	f0 68       	ori	r31, 0x80	; 128
 7b8:	3f 2e       	mov	r3, r31
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <vfprintf+0xec>
 7bc:	88 36       	cpi	r24, 0x68	; 104
 7be:	41 f4       	brne	.+16     	; 0x7d0 <vfprintf+0xfc>
 7c0:	f7 01       	movw	r30, r14
 7c2:	93 fd       	sbrc	r25, 3
 7c4:	85 91       	lpm	r24, Z+
 7c6:	93 ff       	sbrs	r25, 3
 7c8:	81 91       	ld	r24, Z+
 7ca:	7f 01       	movw	r14, r30
 7cc:	81 11       	cpse	r24, r1
 7ce:	b0 cf       	rjmp	.-160    	; 0x730 <vfprintf+0x5c>
 7d0:	98 2f       	mov	r25, r24
 7d2:	9f 7d       	andi	r25, 0xDF	; 223
 7d4:	95 54       	subi	r25, 0x45	; 69
 7d6:	93 30       	cpi	r25, 0x03	; 3
 7d8:	28 f4       	brcc	.+10     	; 0x7e4 <vfprintf+0x110>
 7da:	0c 5f       	subi	r16, 0xFC	; 252
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	2f e3       	ldi	r18, 0x3F	; 63
 7e0:	29 83       	std	Y+1, r18	; 0x01
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <vfprintf+0x12a>
 7e4:	83 36       	cpi	r24, 0x63	; 99
 7e6:	31 f0       	breq	.+12     	; 0x7f4 <vfprintf+0x120>
 7e8:	83 37       	cpi	r24, 0x73	; 115
 7ea:	71 f0       	breq	.+28     	; 0x808 <vfprintf+0x134>
 7ec:	83 35       	cpi	r24, 0x53	; 83
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <vfprintf+0x11e>
 7f0:	59 c0       	rjmp	.+178    	; 0x8a4 <vfprintf+0x1d0>
 7f2:	21 c0       	rjmp	.+66     	; 0x836 <vfprintf+0x162>
 7f4:	f8 01       	movw	r30, r16
 7f6:	80 81       	ld	r24, Z
 7f8:	89 83       	std	Y+1, r24	; 0x01
 7fa:	0e 5f       	subi	r16, 0xFE	; 254
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	88 24       	eor	r8, r8
 800:	83 94       	inc	r8
 802:	91 2c       	mov	r9, r1
 804:	53 01       	movw	r10, r6
 806:	13 c0       	rjmp	.+38     	; 0x82e <vfprintf+0x15a>
 808:	28 01       	movw	r4, r16
 80a:	f2 e0       	ldi	r31, 0x02	; 2
 80c:	4f 0e       	add	r4, r31
 80e:	51 1c       	adc	r5, r1
 810:	f8 01       	movw	r30, r16
 812:	a0 80       	ld	r10, Z
 814:	b1 80       	ldd	r11, Z+1	; 0x01
 816:	36 fe       	sbrs	r3, 6
 818:	03 c0       	rjmp	.+6      	; 0x820 <vfprintf+0x14c>
 81a:	69 2d       	mov	r22, r9
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <vfprintf+0x150>
 820:	6f ef       	ldi	r22, 0xFF	; 255
 822:	7f ef       	ldi	r23, 0xFF	; 255
 824:	c5 01       	movw	r24, r10
 826:	0e 94 59 05 	call	0xab2	; 0xab2 <strnlen>
 82a:	4c 01       	movw	r8, r24
 82c:	82 01       	movw	r16, r4
 82e:	f3 2d       	mov	r31, r3
 830:	ff 77       	andi	r31, 0x7F	; 127
 832:	3f 2e       	mov	r3, r31
 834:	16 c0       	rjmp	.+44     	; 0x862 <vfprintf+0x18e>
 836:	28 01       	movw	r4, r16
 838:	22 e0       	ldi	r18, 0x02	; 2
 83a:	42 0e       	add	r4, r18
 83c:	51 1c       	adc	r5, r1
 83e:	f8 01       	movw	r30, r16
 840:	a0 80       	ld	r10, Z
 842:	b1 80       	ldd	r11, Z+1	; 0x01
 844:	36 fe       	sbrs	r3, 6
 846:	03 c0       	rjmp	.+6      	; 0x84e <vfprintf+0x17a>
 848:	69 2d       	mov	r22, r9
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x17e>
 84e:	6f ef       	ldi	r22, 0xFF	; 255
 850:	7f ef       	ldi	r23, 0xFF	; 255
 852:	c5 01       	movw	r24, r10
 854:	0e 94 4e 05 	call	0xa9c	; 0xa9c <strnlen_P>
 858:	4c 01       	movw	r8, r24
 85a:	f3 2d       	mov	r31, r3
 85c:	f0 68       	ori	r31, 0x80	; 128
 85e:	3f 2e       	mov	r3, r31
 860:	82 01       	movw	r16, r4
 862:	33 fc       	sbrc	r3, 3
 864:	1b c0       	rjmp	.+54     	; 0x89c <vfprintf+0x1c8>
 866:	82 2d       	mov	r24, r2
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	88 16       	cp	r8, r24
 86c:	99 06       	cpc	r9, r25
 86e:	b0 f4       	brcc	.+44     	; 0x89c <vfprintf+0x1c8>
 870:	b6 01       	movw	r22, r12
 872:	80 e2       	ldi	r24, 0x20	; 32
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 87a:	2a 94       	dec	r2
 87c:	f4 cf       	rjmp	.-24     	; 0x866 <vfprintf+0x192>
 87e:	f5 01       	movw	r30, r10
 880:	37 fc       	sbrc	r3, 7
 882:	85 91       	lpm	r24, Z+
 884:	37 fe       	sbrs	r3, 7
 886:	81 91       	ld	r24, Z+
 888:	5f 01       	movw	r10, r30
 88a:	b6 01       	movw	r22, r12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 892:	21 10       	cpse	r2, r1
 894:	2a 94       	dec	r2
 896:	21 e0       	ldi	r18, 0x01	; 1
 898:	82 1a       	sub	r8, r18
 89a:	91 08       	sbc	r9, r1
 89c:	81 14       	cp	r8, r1
 89e:	91 04       	cpc	r9, r1
 8a0:	71 f7       	brne	.-36     	; 0x87e <vfprintf+0x1aa>
 8a2:	e8 c0       	rjmp	.+464    	; 0xa74 <vfprintf+0x3a0>
 8a4:	84 36       	cpi	r24, 0x64	; 100
 8a6:	11 f0       	breq	.+4      	; 0x8ac <vfprintf+0x1d8>
 8a8:	89 36       	cpi	r24, 0x69	; 105
 8aa:	41 f5       	brne	.+80     	; 0x8fc <vfprintf+0x228>
 8ac:	f8 01       	movw	r30, r16
 8ae:	37 fe       	sbrs	r3, 7
 8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <vfprintf+0x1ec>
 8b2:	60 81       	ld	r22, Z
 8b4:	71 81       	ldd	r23, Z+1	; 0x01
 8b6:	82 81       	ldd	r24, Z+2	; 0x02
 8b8:	93 81       	ldd	r25, Z+3	; 0x03
 8ba:	0c 5f       	subi	r16, 0xFC	; 252
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
 8be:	08 c0       	rjmp	.+16     	; 0x8d0 <vfprintf+0x1fc>
 8c0:	60 81       	ld	r22, Z
 8c2:	71 81       	ldd	r23, Z+1	; 0x01
 8c4:	07 2e       	mov	r0, r23
 8c6:	00 0c       	add	r0, r0
 8c8:	88 0b       	sbc	r24, r24
 8ca:	99 0b       	sbc	r25, r25
 8cc:	0e 5f       	subi	r16, 0xFE	; 254
 8ce:	1f 4f       	sbci	r17, 0xFF	; 255
 8d0:	f3 2d       	mov	r31, r3
 8d2:	ff 76       	andi	r31, 0x6F	; 111
 8d4:	3f 2e       	mov	r3, r31
 8d6:	97 ff       	sbrs	r25, 7
 8d8:	09 c0       	rjmp	.+18     	; 0x8ec <vfprintf+0x218>
 8da:	90 95       	com	r25
 8dc:	80 95       	com	r24
 8de:	70 95       	com	r23
 8e0:	61 95       	neg	r22
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	8f 4f       	sbci	r24, 0xFF	; 255
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255
 8e8:	f0 68       	ori	r31, 0x80	; 128
 8ea:	3f 2e       	mov	r3, r31
 8ec:	2a e0       	ldi	r18, 0x0A	; 10
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	a3 01       	movw	r20, r6
 8f2:	0e 94 a0 05 	call	0xb40	; 0xb40 <__ultoa_invert>
 8f6:	88 2e       	mov	r8, r24
 8f8:	86 18       	sub	r8, r6
 8fa:	45 c0       	rjmp	.+138    	; 0x986 <vfprintf+0x2b2>
 8fc:	85 37       	cpi	r24, 0x75	; 117
 8fe:	31 f4       	brne	.+12     	; 0x90c <vfprintf+0x238>
 900:	23 2d       	mov	r18, r3
 902:	2f 7e       	andi	r18, 0xEF	; 239
 904:	b2 2e       	mov	r11, r18
 906:	2a e0       	ldi	r18, 0x0A	; 10
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	25 c0       	rjmp	.+74     	; 0x956 <vfprintf+0x282>
 90c:	93 2d       	mov	r25, r3
 90e:	99 7f       	andi	r25, 0xF9	; 249
 910:	b9 2e       	mov	r11, r25
 912:	8f 36       	cpi	r24, 0x6F	; 111
 914:	c1 f0       	breq	.+48     	; 0x946 <vfprintf+0x272>
 916:	18 f4       	brcc	.+6      	; 0x91e <vfprintf+0x24a>
 918:	88 35       	cpi	r24, 0x58	; 88
 91a:	79 f0       	breq	.+30     	; 0x93a <vfprintf+0x266>
 91c:	b5 c0       	rjmp	.+362    	; 0xa88 <vfprintf+0x3b4>
 91e:	80 37       	cpi	r24, 0x70	; 112
 920:	19 f0       	breq	.+6      	; 0x928 <vfprintf+0x254>
 922:	88 37       	cpi	r24, 0x78	; 120
 924:	21 f0       	breq	.+8      	; 0x92e <vfprintf+0x25a>
 926:	b0 c0       	rjmp	.+352    	; 0xa88 <vfprintf+0x3b4>
 928:	e9 2f       	mov	r30, r25
 92a:	e0 61       	ori	r30, 0x10	; 16
 92c:	be 2e       	mov	r11, r30
 92e:	b4 fe       	sbrs	r11, 4
 930:	0d c0       	rjmp	.+26     	; 0x94c <vfprintf+0x278>
 932:	fb 2d       	mov	r31, r11
 934:	f4 60       	ori	r31, 0x04	; 4
 936:	bf 2e       	mov	r11, r31
 938:	09 c0       	rjmp	.+18     	; 0x94c <vfprintf+0x278>
 93a:	34 fe       	sbrs	r3, 4
 93c:	0a c0       	rjmp	.+20     	; 0x952 <vfprintf+0x27e>
 93e:	29 2f       	mov	r18, r25
 940:	26 60       	ori	r18, 0x06	; 6
 942:	b2 2e       	mov	r11, r18
 944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0x27e>
 946:	28 e0       	ldi	r18, 0x08	; 8
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	05 c0       	rjmp	.+10     	; 0x956 <vfprintf+0x282>
 94c:	20 e1       	ldi	r18, 0x10	; 16
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x282>
 952:	20 e1       	ldi	r18, 0x10	; 16
 954:	32 e0       	ldi	r19, 0x02	; 2
 956:	f8 01       	movw	r30, r16
 958:	b7 fe       	sbrs	r11, 7
 95a:	07 c0       	rjmp	.+14     	; 0x96a <vfprintf+0x296>
 95c:	60 81       	ld	r22, Z
 95e:	71 81       	ldd	r23, Z+1	; 0x01
 960:	82 81       	ldd	r24, Z+2	; 0x02
 962:	93 81       	ldd	r25, Z+3	; 0x03
 964:	0c 5f       	subi	r16, 0xFC	; 252
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	06 c0       	rjmp	.+12     	; 0x976 <vfprintf+0x2a2>
 96a:	60 81       	ld	r22, Z
 96c:	71 81       	ldd	r23, Z+1	; 0x01
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 5f       	subi	r16, 0xFE	; 254
 974:	1f 4f       	sbci	r17, 0xFF	; 255
 976:	a3 01       	movw	r20, r6
 978:	0e 94 a0 05 	call	0xb40	; 0xb40 <__ultoa_invert>
 97c:	88 2e       	mov	r8, r24
 97e:	86 18       	sub	r8, r6
 980:	fb 2d       	mov	r31, r11
 982:	ff 77       	andi	r31, 0x7F	; 127
 984:	3f 2e       	mov	r3, r31
 986:	36 fe       	sbrs	r3, 6
 988:	0d c0       	rjmp	.+26     	; 0x9a4 <vfprintf+0x2d0>
 98a:	23 2d       	mov	r18, r3
 98c:	2e 7f       	andi	r18, 0xFE	; 254
 98e:	a2 2e       	mov	r10, r18
 990:	89 14       	cp	r8, r9
 992:	58 f4       	brcc	.+22     	; 0x9aa <vfprintf+0x2d6>
 994:	34 fe       	sbrs	r3, 4
 996:	0b c0       	rjmp	.+22     	; 0x9ae <vfprintf+0x2da>
 998:	32 fc       	sbrc	r3, 2
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <vfprintf+0x2da>
 99c:	83 2d       	mov	r24, r3
 99e:	8e 7e       	andi	r24, 0xEE	; 238
 9a0:	a8 2e       	mov	r10, r24
 9a2:	05 c0       	rjmp	.+10     	; 0x9ae <vfprintf+0x2da>
 9a4:	b8 2c       	mov	r11, r8
 9a6:	a3 2c       	mov	r10, r3
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <vfprintf+0x2dc>
 9aa:	b8 2c       	mov	r11, r8
 9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <vfprintf+0x2dc>
 9ae:	b9 2c       	mov	r11, r9
 9b0:	a4 fe       	sbrs	r10, 4
 9b2:	0f c0       	rjmp	.+30     	; 0x9d2 <vfprintf+0x2fe>
 9b4:	fe 01       	movw	r30, r28
 9b6:	e8 0d       	add	r30, r8
 9b8:	f1 1d       	adc	r31, r1
 9ba:	80 81       	ld	r24, Z
 9bc:	80 33       	cpi	r24, 0x30	; 48
 9be:	21 f4       	brne	.+8      	; 0x9c8 <vfprintf+0x2f4>
 9c0:	9a 2d       	mov	r25, r10
 9c2:	99 7e       	andi	r25, 0xE9	; 233
 9c4:	a9 2e       	mov	r10, r25
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <vfprintf+0x306>
 9c8:	a2 fe       	sbrs	r10, 2
 9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <vfprintf+0x304>
 9cc:	b3 94       	inc	r11
 9ce:	b3 94       	inc	r11
 9d0:	04 c0       	rjmp	.+8      	; 0x9da <vfprintf+0x306>
 9d2:	8a 2d       	mov	r24, r10
 9d4:	86 78       	andi	r24, 0x86	; 134
 9d6:	09 f0       	breq	.+2      	; 0x9da <vfprintf+0x306>
 9d8:	b3 94       	inc	r11
 9da:	a3 fc       	sbrc	r10, 3
 9dc:	11 c0       	rjmp	.+34     	; 0xa00 <vfprintf+0x32c>
 9de:	a0 fe       	sbrs	r10, 0
 9e0:	06 c0       	rjmp	.+12     	; 0x9ee <vfprintf+0x31a>
 9e2:	b2 14       	cp	r11, r2
 9e4:	88 f4       	brcc	.+34     	; 0xa08 <vfprintf+0x334>
 9e6:	28 0c       	add	r2, r8
 9e8:	92 2c       	mov	r9, r2
 9ea:	9b 18       	sub	r9, r11
 9ec:	0e c0       	rjmp	.+28     	; 0xa0a <vfprintf+0x336>
 9ee:	b2 14       	cp	r11, r2
 9f0:	60 f4       	brcc	.+24     	; 0xa0a <vfprintf+0x336>
 9f2:	b6 01       	movw	r22, r12
 9f4:	80 e2       	ldi	r24, 0x20	; 32
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 9fc:	b3 94       	inc	r11
 9fe:	f7 cf       	rjmp	.-18     	; 0x9ee <vfprintf+0x31a>
 a00:	b2 14       	cp	r11, r2
 a02:	18 f4       	brcc	.+6      	; 0xa0a <vfprintf+0x336>
 a04:	2b 18       	sub	r2, r11
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <vfprintf+0x338>
 a08:	98 2c       	mov	r9, r8
 a0a:	21 2c       	mov	r2, r1
 a0c:	a4 fe       	sbrs	r10, 4
 a0e:	10 c0       	rjmp	.+32     	; 0xa30 <vfprintf+0x35c>
 a10:	b6 01       	movw	r22, r12
 a12:	80 e3       	ldi	r24, 0x30	; 48
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 a1a:	a2 fe       	sbrs	r10, 2
 a1c:	17 c0       	rjmp	.+46     	; 0xa4c <vfprintf+0x378>
 a1e:	a1 fc       	sbrc	r10, 1
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <vfprintf+0x354>
 a22:	88 e7       	ldi	r24, 0x78	; 120
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <vfprintf+0x358>
 a28:	88 e5       	ldi	r24, 0x58	; 88
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	b6 01       	movw	r22, r12
 a2e:	0c c0       	rjmp	.+24     	; 0xa48 <vfprintf+0x374>
 a30:	8a 2d       	mov	r24, r10
 a32:	86 78       	andi	r24, 0x86	; 134
 a34:	59 f0       	breq	.+22     	; 0xa4c <vfprintf+0x378>
 a36:	a1 fe       	sbrs	r10, 1
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <vfprintf+0x36a>
 a3a:	8b e2       	ldi	r24, 0x2B	; 43
 a3c:	01 c0       	rjmp	.+2      	; 0xa40 <vfprintf+0x36c>
 a3e:	80 e2       	ldi	r24, 0x20	; 32
 a40:	a7 fc       	sbrc	r10, 7
 a42:	8d e2       	ldi	r24, 0x2D	; 45
 a44:	b6 01       	movw	r22, r12
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 a4c:	89 14       	cp	r8, r9
 a4e:	38 f4       	brcc	.+14     	; 0xa5e <vfprintf+0x38a>
 a50:	b6 01       	movw	r22, r12
 a52:	80 e3       	ldi	r24, 0x30	; 48
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 a5a:	9a 94       	dec	r9
 a5c:	f7 cf       	rjmp	.-18     	; 0xa4c <vfprintf+0x378>
 a5e:	8a 94       	dec	r8
 a60:	f3 01       	movw	r30, r6
 a62:	e8 0d       	add	r30, r8
 a64:	f1 1d       	adc	r31, r1
 a66:	80 81       	ld	r24, Z
 a68:	b6 01       	movw	r22, r12
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 a70:	81 10       	cpse	r8, r1
 a72:	f5 cf       	rjmp	.-22     	; 0xa5e <vfprintf+0x38a>
 a74:	22 20       	and	r2, r2
 a76:	09 f4       	brne	.+2      	; 0xa7a <vfprintf+0x3a6>
 a78:	3f ce       	rjmp	.-898    	; 0x6f8 <vfprintf+0x24>
 a7a:	b6 01       	movw	r22, r12
 a7c:	80 e2       	ldi	r24, 0x20	; 32
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 64 05 	call	0xac8	; 0xac8 <fputc>
 a84:	2a 94       	dec	r2
 a86:	f6 cf       	rjmp	.-20     	; 0xa74 <vfprintf+0x3a0>
 a88:	f6 01       	movw	r30, r12
 a8a:	86 81       	ldd	r24, Z+6	; 0x06
 a8c:	97 81       	ldd	r25, Z+7	; 0x07
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <vfprintf+0x3c0>
 a90:	8f ef       	ldi	r24, 0xFF	; 255
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	2b 96       	adiw	r28, 0x0b	; 11
 a96:	e2 e1       	ldi	r30, 0x12	; 18
 a98:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__epilogue_restores__>

00000a9c <strnlen_P>:
 a9c:	fc 01       	movw	r30, r24
 a9e:	05 90       	lpm	r0, Z+
 aa0:	61 50       	subi	r22, 0x01	; 1
 aa2:	70 40       	sbci	r23, 0x00	; 0
 aa4:	01 10       	cpse	r0, r1
 aa6:	d8 f7       	brcc	.-10     	; 0xa9e <strnlen_P+0x2>
 aa8:	80 95       	com	r24
 aaa:	90 95       	com	r25
 aac:	8e 0f       	add	r24, r30
 aae:	9f 1f       	adc	r25, r31
 ab0:	08 95       	ret

00000ab2 <strnlen>:
 ab2:	fc 01       	movw	r30, r24
 ab4:	61 50       	subi	r22, 0x01	; 1
 ab6:	70 40       	sbci	r23, 0x00	; 0
 ab8:	01 90       	ld	r0, Z+
 aba:	01 10       	cpse	r0, r1
 abc:	d8 f7       	brcc	.-10     	; 0xab4 <strnlen+0x2>
 abe:	80 95       	com	r24
 ac0:	90 95       	com	r25
 ac2:	8e 0f       	add	r24, r30
 ac4:	9f 1f       	adc	r25, r31
 ac6:	08 95       	ret

00000ac8 <fputc>:
 ac8:	0f 93       	push	r16
 aca:	1f 93       	push	r17
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	fb 01       	movw	r30, r22
 ad2:	23 81       	ldd	r18, Z+3	; 0x03
 ad4:	21 fd       	sbrc	r18, 1
 ad6:	03 c0       	rjmp	.+6      	; 0xade <fputc+0x16>
 ad8:	8f ef       	ldi	r24, 0xFF	; 255
 ada:	9f ef       	ldi	r25, 0xFF	; 255
 adc:	2c c0       	rjmp	.+88     	; 0xb36 <fputc+0x6e>
 ade:	22 ff       	sbrs	r18, 2
 ae0:	16 c0       	rjmp	.+44     	; 0xb0e <fputc+0x46>
 ae2:	46 81       	ldd	r20, Z+6	; 0x06
 ae4:	57 81       	ldd	r21, Z+7	; 0x07
 ae6:	24 81       	ldd	r18, Z+4	; 0x04
 ae8:	35 81       	ldd	r19, Z+5	; 0x05
 aea:	42 17       	cp	r20, r18
 aec:	53 07       	cpc	r21, r19
 aee:	44 f4       	brge	.+16     	; 0xb00 <fputc+0x38>
 af0:	a0 81       	ld	r26, Z
 af2:	b1 81       	ldd	r27, Z+1	; 0x01
 af4:	9d 01       	movw	r18, r26
 af6:	2f 5f       	subi	r18, 0xFF	; 255
 af8:	3f 4f       	sbci	r19, 0xFF	; 255
 afa:	31 83       	std	Z+1, r19	; 0x01
 afc:	20 83       	st	Z, r18
 afe:	8c 93       	st	X, r24
 b00:	26 81       	ldd	r18, Z+6	; 0x06
 b02:	37 81       	ldd	r19, Z+7	; 0x07
 b04:	2f 5f       	subi	r18, 0xFF	; 255
 b06:	3f 4f       	sbci	r19, 0xFF	; 255
 b08:	37 83       	std	Z+7, r19	; 0x07
 b0a:	26 83       	std	Z+6, r18	; 0x06
 b0c:	14 c0       	rjmp	.+40     	; 0xb36 <fputc+0x6e>
 b0e:	8b 01       	movw	r16, r22
 b10:	ec 01       	movw	r28, r24
 b12:	fb 01       	movw	r30, r22
 b14:	00 84       	ldd	r0, Z+8	; 0x08
 b16:	f1 85       	ldd	r31, Z+9	; 0x09
 b18:	e0 2d       	mov	r30, r0
 b1a:	09 95       	icall
 b1c:	89 2b       	or	r24, r25
 b1e:	e1 f6       	brne	.-72     	; 0xad8 <fputc+0x10>
 b20:	d8 01       	movw	r26, r16
 b22:	16 96       	adiw	r26, 0x06	; 6
 b24:	8d 91       	ld	r24, X+
 b26:	9c 91       	ld	r25, X
 b28:	17 97       	sbiw	r26, 0x07	; 7
 b2a:	01 96       	adiw	r24, 0x01	; 1
 b2c:	17 96       	adiw	r26, 0x07	; 7
 b2e:	9c 93       	st	X, r25
 b30:	8e 93       	st	-X, r24
 b32:	16 97       	sbiw	r26, 0x06	; 6
 b34:	ce 01       	movw	r24, r28
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	08 95       	ret

00000b40 <__ultoa_invert>:
 b40:	fa 01       	movw	r30, r20
 b42:	aa 27       	eor	r26, r26
 b44:	28 30       	cpi	r18, 0x08	; 8
 b46:	61 f1       	breq	.+88     	; 0xba0 <__ultoa_invert+0x60>
 b48:	20 31       	cpi	r18, 0x10	; 16
 b4a:	91 f1       	breq	.+100    	; 0xbb0 <__ultoa_invert+0x70>
 b4c:	e8 94       	clt
 b4e:	6f 93       	push	r22
 b50:	6e 7f       	andi	r22, 0xFE	; 254
 b52:	6e 5f       	subi	r22, 0xFE	; 254
 b54:	7f 4f       	sbci	r23, 0xFF	; 255
 b56:	8f 4f       	sbci	r24, 0xFF	; 255
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	af 4f       	sbci	r26, 0xFF	; 255
 b5c:	b1 e0       	ldi	r27, 0x01	; 1
 b5e:	40 d0       	rcall	.+128    	; 0xbe0 <__ultoa_invert+0xa0>
 b60:	b4 e0       	ldi	r27, 0x04	; 4
 b62:	3e d0       	rcall	.+124    	; 0xbe0 <__ultoa_invert+0xa0>
 b64:	67 0f       	add	r22, r23
 b66:	78 1f       	adc	r23, r24
 b68:	89 1f       	adc	r24, r25
 b6a:	9a 1f       	adc	r25, r26
 b6c:	a1 1d       	adc	r26, r1
 b6e:	68 0f       	add	r22, r24
 b70:	79 1f       	adc	r23, r25
 b72:	8a 1f       	adc	r24, r26
 b74:	91 1d       	adc	r25, r1
 b76:	a1 1d       	adc	r26, r1
 b78:	6a 0f       	add	r22, r26
 b7a:	71 1d       	adc	r23, r1
 b7c:	81 1d       	adc	r24, r1
 b7e:	91 1d       	adc	r25, r1
 b80:	a1 1d       	adc	r26, r1
 b82:	22 d0       	rcall	.+68     	; 0xbc8 <__ultoa_invert+0x88>
 b84:	09 f4       	brne	.+2      	; 0xb88 <__ultoa_invert+0x48>
 b86:	68 94       	set
 b88:	3f 91       	pop	r19
 b8a:	06 2e       	mov	r0, r22
 b8c:	00 0c       	add	r0, r0
 b8e:	30 19       	sub	r19, r0
 b90:	00 0c       	add	r0, r0
 b92:	00 0c       	add	r0, r0
 b94:	30 19       	sub	r19, r0
 b96:	30 5d       	subi	r19, 0xD0	; 208
 b98:	31 93       	st	Z+, r19
 b9a:	ce f6       	brtc	.-78     	; 0xb4e <__ultoa_invert+0xe>
 b9c:	cf 01       	movw	r24, r30
 b9e:	08 95       	ret
 ba0:	46 2f       	mov	r20, r22
 ba2:	47 70       	andi	r20, 0x07	; 7
 ba4:	40 5d       	subi	r20, 0xD0	; 208
 ba6:	41 93       	st	Z+, r20
 ba8:	b3 e0       	ldi	r27, 0x03	; 3
 baa:	0f d0       	rcall	.+30     	; 0xbca <__ultoa_invert+0x8a>
 bac:	c9 f7       	brne	.-14     	; 0xba0 <__ultoa_invert+0x60>
 bae:	f6 cf       	rjmp	.-20     	; 0xb9c <__ultoa_invert+0x5c>
 bb0:	46 2f       	mov	r20, r22
 bb2:	4f 70       	andi	r20, 0x0F	; 15
 bb4:	40 5d       	subi	r20, 0xD0	; 208
 bb6:	4a 33       	cpi	r20, 0x3A	; 58
 bb8:	18 f0       	brcs	.+6      	; 0xbc0 <__ultoa_invert+0x80>
 bba:	49 5d       	subi	r20, 0xD9	; 217
 bbc:	31 fd       	sbrc	r19, 1
 bbe:	40 52       	subi	r20, 0x20	; 32
 bc0:	41 93       	st	Z+, r20
 bc2:	02 d0       	rcall	.+4      	; 0xbc8 <__ultoa_invert+0x88>
 bc4:	a9 f7       	brne	.-22     	; 0xbb0 <__ultoa_invert+0x70>
 bc6:	ea cf       	rjmp	.-44     	; 0xb9c <__ultoa_invert+0x5c>
 bc8:	b4 e0       	ldi	r27, 0x04	; 4
 bca:	a6 95       	lsr	r26
 bcc:	97 95       	ror	r25
 bce:	87 95       	ror	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	ba 95       	dec	r27
 bd6:	c9 f7       	brne	.-14     	; 0xbca <__ultoa_invert+0x8a>
 bd8:	00 97       	sbiw	r24, 0x00	; 0
 bda:	61 05       	cpc	r22, r1
 bdc:	71 05       	cpc	r23, r1
 bde:	08 95       	ret
 be0:	9b 01       	movw	r18, r22
 be2:	ac 01       	movw	r20, r24
 be4:	0a 2e       	mov	r0, r26
 be6:	06 94       	lsr	r0
 be8:	57 95       	ror	r21
 bea:	47 95       	ror	r20
 bec:	37 95       	ror	r19
 bee:	27 95       	ror	r18
 bf0:	ba 95       	dec	r27
 bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__ultoa_invert+0xa6>
 bf4:	62 0f       	add	r22, r18
 bf6:	73 1f       	adc	r23, r19
 bf8:	84 1f       	adc	r24, r20
 bfa:	95 1f       	adc	r25, r21
 bfc:	a0 1d       	adc	r26, r0
 bfe:	08 95       	ret

00000c00 <__mulqi3>:
 c00:	00 24       	eor	r0, r0

00000c02 <__mulqi3_loop>:
 c02:	80 fd       	sbrc	r24, 0
 c04:	06 0e       	add	r0, r22
 c06:	66 0f       	add	r22, r22
 c08:	11 f0       	breq	.+4      	; 0xc0e <__mulqi3_exit>
 c0a:	86 95       	lsr	r24
 c0c:	d1 f7       	brne	.-12     	; 0xc02 <__mulqi3_loop>

00000c0e <__mulqi3_exit>:
 c0e:	80 2d       	mov	r24, r0
 c10:	08 95       	ret

00000c12 <__mulsi3>:
 c12:	ee 27       	eor	r30, r30
 c14:	ff 27       	eor	r31, r31

00000c16 <__mulsi3_helper>:
 c16:	aa 27       	eor	r26, r26
 c18:	bb 27       	eor	r27, r27
 c1a:	08 c0       	rjmp	.+16     	; 0xc2c <__mulsi3_helper+0x16>
 c1c:	a2 0f       	add	r26, r18
 c1e:	b3 1f       	adc	r27, r19
 c20:	e4 1f       	adc	r30, r20
 c22:	f5 1f       	adc	r31, r21
 c24:	22 0f       	add	r18, r18
 c26:	33 1f       	adc	r19, r19
 c28:	44 1f       	adc	r20, r20
 c2a:	55 1f       	adc	r21, r21
 c2c:	96 95       	lsr	r25
 c2e:	87 95       	ror	r24
 c30:	77 95       	ror	r23
 c32:	67 95       	ror	r22
 c34:	98 f3       	brcs	.-26     	; 0xc1c <__mulsi3_helper+0x6>
 c36:	70 40       	sbci	r23, 0x00	; 0
 c38:	a9 f7       	brne	.-22     	; 0xc24 <__mulsi3_helper+0xe>
 c3a:	00 97       	sbiw	r24, 0x00	; 0
 c3c:	99 f7       	brne	.-26     	; 0xc24 <__mulsi3_helper+0xe>
 c3e:	bd 01       	movw	r22, r26
 c40:	cf 01       	movw	r24, r30
 c42:	08 95       	ret

00000c44 <__divmodsi4>:
 c44:	05 2e       	mov	r0, r21
 c46:	97 fb       	bst	r25, 7
 c48:	1e f4       	brtc	.+6      	; 0xc50 <__divmodsi4+0xc>
 c4a:	00 94       	com	r0
 c4c:	0e 94 39 06 	call	0xc72	; 0xc72 <__negsi2>
 c50:	57 fd       	sbrc	r21, 7
 c52:	07 d0       	rcall	.+14     	; 0xc62 <__divmodsi4_neg2>
 c54:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__udivmodsi4>
 c58:	07 fc       	sbrc	r0, 7
 c5a:	03 d0       	rcall	.+6      	; 0xc62 <__divmodsi4_neg2>
 c5c:	4e f4       	brtc	.+18     	; 0xc70 <__divmodsi4_exit>
 c5e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__negsi2>

00000c62 <__divmodsi4_neg2>:
 c62:	50 95       	com	r21
 c64:	40 95       	com	r20
 c66:	30 95       	com	r19
 c68:	21 95       	neg	r18
 c6a:	3f 4f       	sbci	r19, 0xFF	; 255
 c6c:	4f 4f       	sbci	r20, 0xFF	; 255
 c6e:	5f 4f       	sbci	r21, 0xFF	; 255

00000c70 <__divmodsi4_exit>:
 c70:	08 95       	ret

00000c72 <__negsi2>:
 c72:	90 95       	com	r25
 c74:	80 95       	com	r24
 c76:	70 95       	com	r23
 c78:	61 95       	neg	r22
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	08 95       	ret

00000c82 <__prologue_saves__>:
 c82:	2f 92       	push	r2
 c84:	3f 92       	push	r3
 c86:	4f 92       	push	r4
 c88:	5f 92       	push	r5
 c8a:	6f 92       	push	r6
 c8c:	7f 92       	push	r7
 c8e:	8f 92       	push	r8
 c90:	9f 92       	push	r9
 c92:	af 92       	push	r10
 c94:	bf 92       	push	r11
 c96:	cf 92       	push	r12
 c98:	df 92       	push	r13
 c9a:	ef 92       	push	r14
 c9c:	ff 92       	push	r15
 c9e:	0f 93       	push	r16
 ca0:	1f 93       	push	r17
 ca2:	cf 93       	push	r28
 ca4:	df 93       	push	r29
 ca6:	cd b7       	in	r28, 0x3d	; 61
 ca8:	de b7       	in	r29, 0x3e	; 62
 caa:	ca 1b       	sub	r28, r26
 cac:	db 0b       	sbc	r29, r27
 cae:	0f b6       	in	r0, 0x3f	; 63
 cb0:	f8 94       	cli
 cb2:	de bf       	out	0x3e, r29	; 62
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	cd bf       	out	0x3d, r28	; 61
 cb8:	09 94       	ijmp

00000cba <__epilogue_restores__>:
 cba:	2a 88       	ldd	r2, Y+18	; 0x12
 cbc:	39 88       	ldd	r3, Y+17	; 0x11
 cbe:	48 88       	ldd	r4, Y+16	; 0x10
 cc0:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc2:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc4:	7d 84       	ldd	r7, Y+13	; 0x0d
 cc6:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc8:	9b 84       	ldd	r9, Y+11	; 0x0b
 cca:	aa 84       	ldd	r10, Y+10	; 0x0a
 ccc:	b9 84       	ldd	r11, Y+9	; 0x09
 cce:	c8 84       	ldd	r12, Y+8	; 0x08
 cd0:	df 80       	ldd	r13, Y+7	; 0x07
 cd2:	ee 80       	ldd	r14, Y+6	; 0x06
 cd4:	fd 80       	ldd	r15, Y+5	; 0x05
 cd6:	0c 81       	ldd	r16, Y+4	; 0x04
 cd8:	1b 81       	ldd	r17, Y+3	; 0x03
 cda:	aa 81       	ldd	r26, Y+2	; 0x02
 cdc:	b9 81       	ldd	r27, Y+1	; 0x01
 cde:	ce 0f       	add	r28, r30
 ce0:	d1 1d       	adc	r29, r1
 ce2:	0f b6       	in	r0, 0x3f	; 63
 ce4:	f8 94       	cli
 ce6:	de bf       	out	0x3e, r29	; 62
 ce8:	0f be       	out	0x3f, r0	; 63
 cea:	cd bf       	out	0x3d, r28	; 61
 cec:	ed 01       	movw	r28, r26
 cee:	08 95       	ret

00000cf0 <_exit>:
 cf0:	f8 94       	cli

00000cf2 <__stop_program>:
 cf2:	ff cf       	rjmp	.-2      	; 0xcf2 <__stop_program>
