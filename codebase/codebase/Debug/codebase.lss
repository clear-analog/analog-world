
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000cae  00000d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800104  00800104  00000d46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000467a  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015f6  00000000  00000000  000056a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f45  00000000  00000000  00006c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000704  00000000  00000000  00009be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aff  00000000  00000000  0000a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002cce  00000000  00000000  0000bde3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  0000eab1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_11>
  30:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_12>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  74:	83 02       	muls	r24, r19
  76:	8a 02       	muls	r24, r26
  78:	a5 02       	muls	r26, r21
  7a:	8a 02       	muls	r24, r26
  7c:	a5 02       	muls	r26, r21
  7e:	91 02       	muls	r25, r17
  80:	96 02       	muls	r25, r22
  82:	a5 02       	muls	r26, r21
  84:	9c 02       	muls	r25, r28
  86:	a1 02       	muls	r26, r17

00000088 <SerialString>:
  88:	0e 03 30 00 30 00 30 00 30 00 30 00 31 00 00 00     ..0.0.0.0.0.1...

00000098 <ProductString>:
  98:	34 03 38 00 2d 00 43 00 68 00 61 00 6e 00 6e 00     4.8.-.C.h.a.n.n.
  a8:	65 00 6c 00 20 00 56 00 6f 00 6c 00 74 00 61 00     e.l. .V.o.l.t.a.
  b8:	67 00 65 00 20 00 4d 00 6f 00 6e 00 69 00 74 00     g.e. .M.o.n.i.t.
  c8:	6f 00 72 00 00 00                                   o.r...

000000ce <ManufacturerString>:
  ce:	20 03 56 00 6f 00 6c 00 74 00 61 00 67 00 65 00      .V.o.l.t.a.g.e.
  de:	20 00 4d 00 6f 00 6e 00 69 00 74 00 6f 00 72 00      .M.o.n.i.t.o.r.
	...

000000f0 <LanguageString>:
  f0:	04 03 09 04                                         ....

000000f4 <ConfigurationDescriptor>:
  f4:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
 104:	00 00 07 05 81 02 40 00 01 07 05 02 02 40 00 01     ......@......@..

00000114 <DeviceDescriptor>:
 114:	12 01 00 02 ff 00 00 40 eb 03 48 20 00 01 01 02     .......@..H ....
 124:	03 01                                               ..

00000126 <__ctors_end>:
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
 12a:	cf ef       	ldi	r28, 0xFF	; 255
 12c:	d2 e0       	ldi	r29, 0x02	; 2
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_clear_bss>:
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	a4 e0       	ldi	r26, 0x04	; 4
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
 13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
 13c:	a4 33       	cpi	r26, 0x34	; 52
 13e:	b2 07       	cpc	r27, r18
 140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>

00000142 <__do_copy_data>:
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	ee ea       	ldi	r30, 0xAE	; 174
 14a:	fc e0       	ldi	r31, 0x0C	; 12
 14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
 14e:	05 90       	lpm	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	a4 30       	cpi	r26, 0x04	; 4
 154:	b1 07       	cpc	r27, r17
 156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>
 158:	0e 94 36 01 	call	0x26c	; 0x26c <main>
 15c:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_exit>

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <CALLBACK_USB_GetDescriptor>:

// String Descriptor handling is critical for Windows enumeration
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
const uint16_t wIndex,
const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
 164:	29 2f       	mov	r18, r25
 166:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType) {
 168:	22 30       	cpi	r18, 0x02	; 2
 16a:	31 05       	cpc	r19, r1
 16c:	59 f0       	breq	.+22     	; 0x184 <CALLBACK_USB_GetDescriptor+0x20>
 16e:	23 30       	cpi	r18, 0x03	; 3
 170:	31 05       	cpc	r19, r1
 172:	69 f0       	breq	.+26     	; 0x18e <CALLBACK_USB_GetDescriptor+0x2a>
 174:	21 30       	cpi	r18, 0x01	; 1
 176:	31 05       	cpc	r19, r1
 178:	69 f1       	breq	.+90     	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x70>
const uint16_t wIndex,
const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
const uint16_t wIndex,
const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	31 c0       	rjmp	.+98     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x82>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 188:	24 ef       	ldi	r18, 0xF4	; 244
 18a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 18c:	2c c0       	rjmp	.+88     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x82>
		case DTYPE_String:
			switch (DescriptorNumber) {
 18e:	99 27       	eor	r25, r25
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	91 05       	cpc	r25, r1
 194:	69 f0       	breq	.+26     	; 0x1b0 <CALLBACK_USB_GetDescriptor+0x4c>
 196:	30 f0       	brcs	.+12     	; 0x1a4 <CALLBACK_USB_GetDescriptor+0x40>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	91 05       	cpc	r25, r1
 19c:	79 f0       	breq	.+30     	; 0x1bc <CALLBACK_USB_GetDescriptor+0x58>
 19e:	03 97       	sbiw	r24, 0x03	; 3
 1a0:	99 f0       	breq	.+38     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x64>
 1a2:	1d c0       	rjmp	.+58     	; 0x1de <CALLBACK_USB_GetDescriptor+0x7a>
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 1a4:	e0 ef       	ldi	r30, 0xF0	; 240
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	84 91       	lpm	r24, Z
 1aa:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber) {
				case STRING_ID_Language:
					Address = &LanguageString;
 1ac:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
 1ae:	1b c0       	rjmp	.+54     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x82>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 1b0:	ee ec       	ldi	r30, 0xCE	; 206
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	84 91       	lpm	r24, Z
 1b6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
 1b8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
 1ba:	15 c0       	rjmp	.+42     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x82>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 1bc:	e8 e9       	ldi	r30, 0x98	; 152
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	84 91       	lpm	r24, Z
 1c2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 1c4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x82>
				case STRING_ID_Serial:
					Address = &SerialString;
					Size    = pgm_read_byte(&SerialString.Header.Size);
 1c8:	e8 e8       	ldi	r30, 0x88	; 136
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	84 91       	lpm	r24, Z
 1ce:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &SerialString;
 1d0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&SerialString.Header.Size);
					break;
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x82>
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType) {
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 1d4:	82 e1       	ldi	r24, 0x12	; 18
 1d6:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType) {
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 1d8:	24 e1       	ldi	r18, 0x14	; 20
 1da:	31 e0       	ldi	r19, 0x01	; 1
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <CALLBACK_USB_GetDescriptor+0x82>
const uint16_t wIndex,
const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
const uint16_t wIndex,
const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
 1e6:	fa 01       	movw	r30, r20
 1e8:	31 83       	std	Z+1, r19	; 0x01
 1ea:	20 83       	st	Z, r18
	return Size;
 1ec:	08 95       	ret

000001ee <EVENT_USB_Device_ConfigurationChanged>:
		USB_USBTask();
	}
}

void EVENT_USB_Device_ConfigurationChanged(void) {
	device_configured = true;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <__DATA_REGION_LENGTH__+0x2>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 1fc:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 202:	80 34       	cpi	r24, 0x40	; 64
 204:	91 05       	cpc	r25, r1
 206:	d0 f3       	brcs	.-12     	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0xe>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 208:	42 95       	swap	r20
 20a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 20c:	42 60       	ori	r20, 0x02	; 2
 20e:	61 e8       	ldi	r22, 0x81	; 129
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 66 03 	call	0x6cc	; 0x6cc <Endpoint_ConfigureEndpoint_Prv>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	03 c0       	rjmp	.+6      	; 0x224 <__DATA_REGION_LENGTH__+0x24>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 21e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 224:	80 34       	cpi	r24, 0x40	; 64
 226:	91 05       	cpc	r25, r1
 228:	d0 f3       	brcs	.-12     	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 22a:	42 95       	swap	r20
 22c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 22e:	42 60       	ori	r20, 0x02	; 2
 230:	60 e8       	ldi	r22, 0x80	; 128
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 66 03 	call	0x6cc	; 0x6cc <Endpoint_ConfigureEndpoint_Prv>
 238:	08 95       	ret

0000023a <SendSensorData>:
	Endpoint_ConfigureEndpoint(ENDPOINT_DIR_IN | 1, EP_TYPE_BULK, 64, 1);
	Endpoint_ConfigureEndpoint(ENDPOINT_DIR_OUT | 2, EP_TYPE_BULK, 64, 1);
}

void SendSensorData(void) {
	if (!device_configured)
 23a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 23e:	88 23       	and	r24, r24
 240:	a1 f0       	breq	.+40     	; 0x26a <SendSensorData+0x30>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 248:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	return;

	Endpoint_SelectEndpoint(ENDPOINT_DIR_IN | 1);
	
	if (Endpoint_IsINReady()) {
 24c:	80 ff       	sbrs	r24, 0
 24e:	0d c0       	rjmp	.+26     	; 0x26a <SendSensorData+0x30>
		Endpoint_Write_Stream_LE(&sensorData, sizeof(SensorData_t), NULL);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	64 e2       	ldi	r22, 0x24	; 36
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 b4 02 	call	0x568	; 0x568 <Endpoint_Write_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 260:	e8 ee       	ldi	r30, 0xE8	; 232
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8e 77       	andi	r24, 0x7E	; 126
 268:	80 83       	st	Z, r24
 26a:	08 95       	ret

0000026c <main>:
static SensorData_t sensorData;
static bool device_configured = false;

int main(void) {
	// System initialization
	MCUSR &= ~(1 << WDRF);
 26c:	84 b7       	in	r24, 0x34	; 52
 26e:	87 7f       	andi	r24, 0xF7	; 247
 270:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	a8 95       	wdr
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 27c:	88 61       	ori	r24, 0x18	; 24
 27e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 282:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 286:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
 294:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
 298:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	clock_prescale_set(clock_div_1);

	USB_Init();
 29a:	0e 94 37 04 	call	0x86e	; 0x86e <USB_Init>
	sei();
 29e:	78 94       	sei
	long int countter = 0;
 2a0:	c1 2c       	mov	r12, r1
 2a2:	d1 2c       	mov	r13, r1
 2a4:	76 01       	movw	r14, r12

	while (1) {
		// Your sensor data acquisition code here
		// Update sensorData.data[] and sensorData.timestamp
		sensorData.timestamp = ++countter;
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	c8 1a       	sub	r12, r24
 2aa:	d8 0a       	sbc	r13, r24
 2ac:	e8 0a       	sbc	r14, r24
 2ae:	f8 0a       	sbc	r15, r24
 2b0:	c0 92 25 01 	sts	0x0125, r12	; 0x800125 <sensorData+0x20>
 2b4:	d0 92 26 01 	sts	0x0126, r13	; 0x800126 <sensorData+0x21>
 2b8:	e0 92 27 01 	sts	0x0127, r14	; 0x800127 <sensorData+0x22>
 2bc:	f0 92 28 01 	sts	0x0128, r15	; 0x800128 <sensorData+0x23>
		for (int i = 0; i < 8; i++) {
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
 2c4:	14 c0       	rjmp	.+40     	; 0x2ee <main+0x82>
			uint8_t randVal = rand() & 0xFF;
 2c6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <rand>
			sensorData.data[i] = (float)randVal;
 2ca:	68 2f       	mov	r22, r24
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 5a 05 	call	0xab4	; 0xab4 <__floatunsisf>
 2d6:	fe 01       	movw	r30, r28
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	eb 5f       	subi	r30, 0xFB	; 251
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	60 83       	st	Z, r22
 2e6:	71 83       	std	Z+1, r23	; 0x01
 2e8:	82 83       	std	Z+2, r24	; 0x02
 2ea:	93 83       	std	Z+3, r25	; 0x03

	while (1) {
		// Your sensor data acquisition code here
		// Update sensorData.data[] and sensorData.timestamp
		sensorData.timestamp = ++countter;
		for (int i = 0; i < 8; i++) {
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	c8 30       	cpi	r28, 0x08	; 8
 2f0:	d1 05       	cpc	r29, r1
 2f2:	4c f3       	brlt	.-46     	; 0x2c6 <main+0x5a>
			uint8_t randVal = rand() & 0xFF;
			sensorData.data[i] = (float)randVal;
		}
		SendSensorData();
 2f4:	0e 94 1d 01 	call	0x23a	; 0x23a <SendSensorData>
		USB_USBTask();
 2f8:	0e 94 57 05 	call	0xaae	; 0xaae <USB_USBTask>
	}
 2fc:	d4 cf       	rjmp	.-88     	; 0x2a6 <main+0x3a>

000002fe <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
 2fe:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 302:	80 38       	cpi	r24, 0x80	; 128
 304:	89 f0       	breq	.+34     	; 0x328 <__stack+0x29>
 306:	82 38       	cpi	r24, 0x82	; 130
 308:	f1 f4       	brne	.+60     	; 0x346 <__stack+0x47>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 30a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest+0x4>
 30e:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 310:	85 30       	cpi	r24, 0x05	; 5
 312:	c8 f4       	brcc	.+50     	; 0x346 <__stack+0x47>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 314:	e9 ee       	ldi	r30, 0xE9	; 233
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 31a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
 31e:	95 fb       	bst	r25, 5
 320:	99 27       	eor	r25, r25
 322:	90 f9       	bld	r25, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 324:	10 82       	st	Z, r1
 326:	01 c0       	rjmp	.+2      	; 0x32a <__stack+0x2b>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 328:	90 e0       	ldi	r25, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 32a:	e8 ee       	ldi	r30, 0xE8	; 232
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	87 7f       	andi	r24, 0xF7	; 247
 332:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 334:	a1 ef       	ldi	r26, 0xF1	; 241
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
 33a:	1c 92       	st	X, r1
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 33c:	80 81       	ld	r24, Z
 33e:	8e 77       	andi	r24, 0x7E	; 126
 340:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 342:	0e 94 9a 03 	call	0x734	; 0x734 <Endpoint_ClearStatusStage>
 346:	08 95       	ret

00000348 <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 348:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 34c:	8f 71       	andi	r24, 0x1F	; 31
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	c1 f5       	brne	.+112    	; 0x3c2 <USB_Device_ClearSetFeature+0x7a>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 352:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 356:	81 11       	cpse	r24, r1
 358:	2b c0       	rjmp	.+86     	; 0x3b0 <USB_Device_ClearSetFeature+0x68>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 35a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest+0x4>
 35e:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 360:	9f ef       	ldi	r25, 0xFF	; 255
 362:	98 0f       	add	r25, r24
 364:	94 30       	cpi	r25, 0x04	; 4
 366:	68 f5       	brcc	.+90     	; 0x3c2 <USB_Device_ClearSetFeature+0x7a>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 368:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 36c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 370:	90 ff       	sbrs	r25, 0
 372:	1e c0       	rjmp	.+60     	; 0x3b0 <USB_Device_ClearSetFeature+0x68>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 374:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USB_ControlRequest+0x1>
 378:	93 30       	cpi	r25, 0x03	; 3
 37a:	31 f4       	brne	.+12     	; 0x388 <USB_Device_ClearSetFeature+0x40>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 37c:	eb ee       	ldi	r30, 0xEB	; 235
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 62       	ori	r24, 0x20	; 32
 384:	80 83       	st	Z, r24
 386:	14 c0       	rjmp	.+40     	; 0x3b0 <USB_Device_ClearSetFeature+0x68>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 388:	eb ee       	ldi	r30, 0xEB	; 235
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	90 81       	ld	r25, Z
 38e:	90 61       	ori	r25, 0x10	; 16
 390:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	a9 01       	movw	r20, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <USB_Device_ClearSetFeature+0x56>
 39a:	44 0f       	add	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	8a 95       	dec	r24
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <USB_Device_ClearSetFeature+0x52>
 3a2:	aa ee       	ldi	r26, 0xEA	; 234
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	4c 93       	st	X, r20
				UERST = 0;
 3a8:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 3aa:	80 81       	ld	r24, Z
 3ac:	88 60       	ori	r24, 0x08	; 8
 3ae:	80 83       	st	Z, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3b0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3b4:	e8 ee       	ldi	r30, 0xE8	; 232
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	87 7f       	andi	r24, 0xF7	; 247
 3bc:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 3be:	0e 94 9a 03 	call	0x734	; 0x734 <Endpoint_ClearStatusStage>
 3c2:	08 95       	ret

000003c4 <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
 3c4:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 3c6:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 3ca:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 3cc:	e3 ee       	ldi	r30, 0xE3	; 227
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	80 78       	andi	r24, 0x80	; 128
 3d4:	8c 2b       	or	r24, r28
 3d6:	80 83       	st	Z, r24
 3d8:	e8 ee       	ldi	r30, 0xE8	; 232
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	87 7f       	andi	r24, 0xF7	; 247
 3e0:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 3e2:	0e 94 9a 03 	call	0x734	; 0x734 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
 3ea:	80 ff       	sbrs	r24, 0
 3ec:	fc cf       	rjmp	.-8      	; 0x3e6 <USB_Device_SetAddress+0x22>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 3ee:	e3 ee       	ldi	r30, 0xE3	; 227
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	80 68       	ori	r24, 0x80	; 128
 3f6:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 3f8:	cc 23       	and	r28, r28
 3fa:	11 f0       	breq	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_DeviceState>
}
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 40a:	e8 ee       	ldi	r30, 0xE8	; 232
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	87 7f       	andi	r24, 0xF7	; 247
 412:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 414:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 418:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 41c:	80 81       	ld	r24, Z
 41e:	8e 77       	andi	r24, 0x7E	; 126
 420:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 422:	0e 94 9a 03 	call	0x734	; 0x734 <Endpoint_ClearStatusStage>
 426:	08 95       	ret

00000428 <USB_Device_GetDescriptor>:
	Endpoint_ClearOUT();
}
#endif

static void USB_Device_GetDescriptor(void)
{
 428:	0f 93       	push	r16
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	00 d0       	rcall	.+0      	; 0x432 <USB_Device_GetDescriptor+0xa>
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 436:	ec e2       	ldi	r30, 0x2C	; 44
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	64 81       	ldd	r22, Z+4	; 0x04
 43c:	75 81       	ldd	r23, Z+5	; 0x05
 43e:	ae 01       	movw	r20, r28
 440:	4f 5f       	subi	r20, 0xFF	; 255
 442:	5f 4f       	sbci	r21, 0xFF	; 255
 444:	82 81       	ldd	r24, Z+2	; 0x02
 446:	93 81       	ldd	r25, Z+3	; 0x03
 448:	0e 94 b2 00 	call	0x164	; 0x164 <CALLBACK_USB_GetDescriptor>
 44c:	00 97       	sbiw	r24, 0x00	; 0
 44e:	79 f0       	breq	.+30     	; 0x46e <USB_Device_GetDescriptor+0x46>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 450:	08 ee       	ldi	r16, 0xE8	; 232
 452:	10 e0       	ldi	r17, 0x00	; 0
 454:	f8 01       	movw	r30, r16
 456:	20 81       	ld	r18, Z
 458:	27 7f       	andi	r18, 0xF7	; 247
 45a:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 45c:	bc 01       	movw	r22, r24
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Endpoint_Write_Control_PStream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 466:	f8 01       	movw	r30, r16
 468:	80 81       	ld	r24, Z
 46a:	8b 77       	andi	r24, 0x7B	; 123
 46c:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	08 95       	ret

0000047c <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 47c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 480:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <USB_ControlRequest+0x3>
 484:	99 27       	eor	r25, r25
 486:	02 97       	sbiw	r24, 0x02	; 2
 488:	f4 f4       	brge	.+60     	; 0x4c6 <USB_Device_SetConfiguration+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 48a:	e8 ee       	ldi	r30, 0xE8	; 232
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	87 7f       	andi	r24, 0xF7	; 247
 492:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 494:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_ControlRequest+0x2>
 498:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 49c:	0e 94 9a 03 	call	0x734	; 0x734 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 4a0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_Device_ConfigurationNumber>
 4a4:	88 23       	and	r24, r24
 4a6:	21 f0       	breq	.+8      	; 0x4b0 <USB_Device_SetConfiguration+0x34>
	  USB_DeviceState = DEVICE_STATE_Configured;
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_DeviceState>
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <USB_Device_SetConfiguration+0x46>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 4b0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 4b4:	88 23       	and	r24, r24
 4b6:	14 f4       	brge	.+4      	; 0x4bc <USB_Device_SetConfiguration+0x40>
 4b8:	84 e0       	ldi	r24, 0x04	; 4
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <USB_Device_SetConfiguration+0x42>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 4c2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <EVENT_USB_Device_ConfigurationChanged>
 4c6:	08 95       	ret

000004c8 <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 4c8:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 4ca:	ec e2       	ldi	r30, 0x2C	; 44
 4cc:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 4d0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	  *(RequestHeader++) = Endpoint_Read_8();
 4d4:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 4d6:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
 4d8:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	c8 f3       	brcs	.-14     	; 0x4d0 <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 4de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
 4e6:	83 ff       	sbrs	r24, 3
 4e8:	30 c0       	rjmp	.+96     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 4ea:	ec e2       	ldi	r30, 0x2C	; 44
 4ec:	f1 e0       	ldi	r31, 0x01	; 1
 4ee:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
 4f0:	e1 81       	ldd	r30, Z+1	; 0x01
 4f2:	8e 2f       	mov	r24, r30
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	8a 30       	cpi	r24, 0x0A	; 10
 4f8:	91 05       	cpc	r25, r1
 4fa:	38 f5       	brcc	.+78     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
 4fc:	fc 01       	movw	r30, r24
 4fe:	e6 5c       	subi	r30, 0xC6	; 198
 500:	ff 4f       	sbci	r31, 0xFF	; 255
 502:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 506:	20 38       	cpi	r18, 0x80	; 128
 508:	11 f0       	breq	.+4      	; 0x50e <USB_Device_ProcessControlRequest+0x46>
 50a:	22 38       	cpi	r18, 0x82	; 130
 50c:	f1 f4       	brne	.+60     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
 50e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <USB_Device_GetStatus>
 512:	1b c0       	rjmp	.+54     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 514:	22 23       	and	r18, r18
 516:	11 f0       	breq	.+4      	; 0x51c <USB_Device_ProcessControlRequest+0x54>
 518:	22 30       	cpi	r18, 0x02	; 2
 51a:	b9 f4       	brne	.+46     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
 51c:	0e 94 a4 01 	call	0x348	; 0x348 <USB_Device_ClearSetFeature>
 520:	14 c0       	rjmp	.+40     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 522:	21 11       	cpse	r18, r1
 524:	12 c0       	rjmp	.+36     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
				  USB_Device_SetAddress();
 526:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <USB_Device_SetAddress>
 52a:	0f c0       	rjmp	.+30     	; 0x54a <USB_Device_ProcessControlRequest+0x82>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 52c:	20 58       	subi	r18, 0x80	; 128
 52e:	22 30       	cpi	r18, 0x02	; 2
 530:	60 f4       	brcc	.+24     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
 532:	0e 94 14 02 	call	0x428	; 0x428 <USB_Device_GetDescriptor>
 536:	09 c0       	rjmp	.+18     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 538:	20 38       	cpi	r18, 0x80	; 128
 53a:	39 f4       	brne	.+14     	; 0x54a <USB_Device_ProcessControlRequest+0x82>
				  USB_Device_GetConfiguration();
 53c:	0e 94 05 02 	call	0x40a	; 0x40a <USB_Device_GetConfiguration>
 540:	04 c0       	rjmp	.+8      	; 0x54a <USB_Device_ProcessControlRequest+0x82>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 542:	21 11       	cpse	r18, r1
 544:	02 c0       	rjmp	.+4      	; 0x54a <USB_Device_ProcessControlRequest+0x82>
				  USB_Device_SetConfiguration();
 546:	0e 94 3e 02 	call	0x47c	; 0x47c <USB_Device_SetConfiguration>
 54a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 54e:	83 ff       	sbrs	r24, 3
 550:	0a c0       	rjmp	.+20     	; 0x566 <USB_Device_ProcessControlRequest+0x9e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 552:	e8 ee       	ldi	r30, 0xE8	; 232
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	87 7f       	andi	r24, 0xF7	; 247
 55a:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 55c:	eb ee       	ldi	r30, 0xEB	; 235
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	80 62       	ori	r24, 0x20	; 32
 564:	80 83       	st	Z, r24
 566:	08 95       	ret

00000568 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	8c 01       	movw	r16, r24
 57a:	eb 01       	movw	r28, r22
 57c:	6a 01       	movw	r12, r20
 57e:	0e 94 bb 03 	call	0x776	; 0x776 <Endpoint_WaitUntilReady>
 582:	81 11       	cpse	r24, r1
 584:	33 c0       	rjmp	.+102    	; 0x5ec <Endpoint_Write_Stream_LE+0x84>
 586:	c1 14       	cp	r12, r1
 588:	d1 04       	cpc	r13, r1
 58a:	39 f0       	breq	.+14     	; 0x59a <Endpoint_Write_Stream_LE+0x32>
 58c:	f6 01       	movw	r30, r12
 58e:	80 81       	ld	r24, Z
 590:	91 81       	ldd	r25, Z+1	; 0x01
 592:	c8 1b       	sub	r28, r24
 594:	d9 0b       	sbc	r29, r25
 596:	08 0f       	add	r16, r24
 598:	19 1f       	adc	r17, r25
 59a:	e1 2c       	mov	r14, r1
 59c:	f1 2c       	mov	r15, r1
 59e:	23 c0       	rjmp	.+70     	; 0x5e6 <Endpoint_Write_Stream_LE+0x7e>
 5a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
 5a4:	85 fd       	sbrc	r24, 5
 5a6:	16 c0       	rjmp	.+44     	; 0x5d4 <Endpoint_Write_Stream_LE+0x6c>
 5a8:	e8 ee       	ldi	r30, 0xE8	; 232
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	90 81       	ld	r25, Z
 5ae:	9e 77       	andi	r25, 0x7E	; 126
 5b0:	90 83       	st	Z, r25
 5b2:	c1 14       	cp	r12, r1
 5b4:	d1 04       	cpc	r13, r1
 5b6:	49 f0       	breq	.+18     	; 0x5ca <Endpoint_Write_Stream_LE+0x62>
 5b8:	f6 01       	movw	r30, r12
 5ba:	80 81       	ld	r24, Z
 5bc:	91 81       	ldd	r25, Z+1	; 0x01
 5be:	e8 0e       	add	r14, r24
 5c0:	f9 1e       	adc	r15, r25
 5c2:	f1 82       	std	Z+1, r15	; 0x01
 5c4:	e0 82       	st	Z, r14
 5c6:	85 e0       	ldi	r24, 0x05	; 5
 5c8:	11 c0       	rjmp	.+34     	; 0x5ec <Endpoint_Write_Stream_LE+0x84>
 5ca:	0e 94 bb 03 	call	0x776	; 0x776 <Endpoint_WaitUntilReady>
 5ce:	88 23       	and	r24, r24
 5d0:	51 f0       	breq	.+20     	; 0x5e6 <Endpoint_Write_Stream_LE+0x7e>
 5d2:	0c c0       	rjmp	.+24     	; 0x5ec <Endpoint_Write_Stream_LE+0x84>
 5d4:	f8 01       	movw	r30, r16
 5d6:	81 91       	ld	r24, Z+
 5d8:	8f 01       	movw	r16, r30
 5da:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 5de:	21 97       	sbiw	r28, 0x01	; 1
 5e0:	ff ef       	ldi	r31, 0xFF	; 255
 5e2:	ef 1a       	sub	r14, r31
 5e4:	ff 0a       	sbc	r15, r31
 5e6:	20 97       	sbiw	r28, 0x00	; 0
 5e8:	d9 f6       	brne	.-74     	; 0x5a0 <Endpoint_Write_Stream_LE+0x38>
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	df 90       	pop	r13
 5fa:	cf 90       	pop	r12
 5fc:	08 95       	ret

000005fe <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5fe:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <USB_ControlRequest+0x6>
 602:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <USB_ControlRequest+0x7>
 606:	26 17       	cp	r18, r22
 608:	37 07       	cpc	r19, r23
 60a:	58 f0       	brcs	.+22     	; 0x622 <Endpoint_Write_Control_PStream_LE+0x24>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 60c:	61 15       	cp	r22, r1
 60e:	71 05       	cpc	r23, r1
 610:	39 f4       	brne	.+14     	; 0x620 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 612:	e8 ee       	ldi	r30, 0xE8	; 232
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	20 81       	ld	r18, Z
 618:	2e 77       	andi	r18, 0x7E	; 126
 61a:	20 83       	st	Z, r18
 61c:	9b 01       	movw	r18, r22
 61e:	01 c0       	rjmp	.+2      	; 0x622 <Endpoint_Write_Control_PStream_LE+0x24>
 620:	9b 01       	movw	r18, r22
 622:	e8 2f       	mov	r30, r24
 624:	f9 2f       	mov	r31, r25
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	2f c0       	rjmp	.+94     	; 0x688 <Endpoint_Write_Control_PStream_LE+0x8a>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 62a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 62e:	88 23       	and	r24, r24
 630:	09 f4       	brne	.+2      	; 0x634 <Endpoint_Write_Control_PStream_LE+0x36>
 632:	40 c0       	rjmp	.+128    	; 0x6b4 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 634:	85 30       	cpi	r24, 0x05	; 5
 636:	09 f4       	brne	.+2      	; 0x63a <Endpoint_Write_Control_PStream_LE+0x3c>
 638:	3f c0       	rjmp	.+126    	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 63a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 63e:	83 fd       	sbrc	r24, 3
 640:	3d c0       	rjmp	.+122    	; 0x6bc <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 646:	82 fd       	sbrc	r24, 2
 648:	2f c0       	rjmp	.+94     	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 64a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
 64e:	80 ff       	sbrs	r24, 0
 650:	1b c0       	rjmp	.+54     	; 0x688 <Endpoint_Write_Control_PStream_LE+0x8a>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 652:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 656:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 658:	07 c0       	rjmp	.+14     	; 0x668 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 65a:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 65c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 660:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 662:	21 50       	subi	r18, 0x01	; 1
 664:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 666:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 668:	21 15       	cp	r18, r1
 66a:	31 05       	cpc	r19, r1
 66c:	19 f0       	breq	.+6      	; 0x674 <Endpoint_Write_Control_PStream_LE+0x76>
 66e:	80 34       	cpi	r24, 0x40	; 64
 670:	91 05       	cpc	r25, r1
 672:	98 f3       	brcs	.-26     	; 0x65a <Endpoint_Write_Control_PStream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 674:	41 e0       	ldi	r20, 0x01	; 1
 676:	80 34       	cpi	r24, 0x40	; 64
 678:	91 05       	cpc	r25, r1
 67a:	09 f0       	breq	.+2      	; 0x67e <Endpoint_Write_Control_PStream_LE+0x80>
 67c:	40 e0       	ldi	r20, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 67e:	a8 ee       	ldi	r26, 0xE8	; 232
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	8c 91       	ld	r24, X
 684:	8e 77       	andi	r24, 0x7E	; 126
 686:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 688:	21 15       	cp	r18, r1
 68a:	31 05       	cpc	r19, r1
 68c:	71 f6       	brne	.-100    	; 0x62a <Endpoint_Write_Control_PStream_LE+0x2c>
 68e:	41 11       	cpse	r20, r1
 690:	cc cf       	rjmp	.-104    	; 0x62a <Endpoint_Write_Control_PStream_LE+0x2c>
 692:	0a c0       	rjmp	.+20     	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 694:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 698:	88 23       	and	r24, r24
 69a:	91 f0       	breq	.+36     	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 69c:	85 30       	cpi	r24, 0x05	; 5
 69e:	91 f0       	breq	.+36     	; 0x6c4 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6a4:	83 fd       	sbrc	r24, 3
 6a6:	10 c0       	rjmp	.+32     	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 6ac:	82 ff       	sbrs	r24, 2
 6ae:	f2 cf       	rjmp	.-28     	; 0x694 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6b4:	82 e0       	ldi	r24, 0x02	; 2
 6b6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6c4:	83 e0       	ldi	r24, 0x03	; 3
 6c6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6ca:	08 95       	ret

000006cc <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 6cc:	98 2f       	mov	r25, r24
 6ce:	29 c0       	rjmp	.+82     	; 0x722 <Endpoint_ConfigureEndpoint_Prv+0x56>
 6d0:	29 2f       	mov	r18, r25
 6d2:	2f 70       	andi	r18, 0x0F	; 15
 6d4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 6d8:	98 17       	cp	r25, r24
 6da:	39 f0       	breq	.+14     	; 0x6ea <Endpoint_ConfigureEndpoint_Prv+0x1e>
 6dc:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 6e0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 6e4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
 6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <Endpoint_ConfigureEndpoint_Prv+0x24>
 6ea:	24 2f       	mov	r18, r20
 6ec:	76 2f       	mov	r23, r22
 6ee:	50 e0       	ldi	r21, 0x00	; 0
 6f0:	21 ff       	sbrs	r18, 1
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <Endpoint_ConfigureEndpoint_Prv+0x54>
 6f4:	eb ee       	ldi	r30, 0xEB	; 235
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	30 81       	ld	r19, Z
 6fa:	3e 7f       	andi	r19, 0xFE	; 254
 6fc:	30 83       	st	Z, r19
 6fe:	ad ee       	ldi	r26, 0xED	; 237
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	3c 91       	ld	r19, X
 704:	3d 7f       	andi	r19, 0xFD	; 253
 706:	3c 93       	st	X, r19
 708:	30 81       	ld	r19, Z
 70a:	31 60       	ori	r19, 0x01	; 1
 70c:	30 83       	st	Z, r19
 70e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 712:	2c 93       	st	X, r18
 714:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
 718:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 71c:	22 23       	and	r18, r18
 71e:	44 f4       	brge	.+16     	; 0x730 <Endpoint_ConfigureEndpoint_Prv+0x64>
 720:	9f 5f       	subi	r25, 0xFF	; 255
 722:	95 30       	cpi	r25, 0x05	; 5
 724:	a8 f2       	brcs	.-86     	; 0x6d0 <Endpoint_ConfigureEndpoint_Prv+0x4>
 726:	8f 70       	andi	r24, 0x0F	; 15
 728:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	08 95       	ret

00000734 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 734:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <USB_ControlRequest>
 738:	88 23       	and	r24, r24
 73a:	9c f4       	brge	.+38     	; 0x762 <Endpoint_ClearStatusStage+0x2e>
 73c:	04 c0       	rjmp	.+8      	; 0x746 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 73e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_DeviceState>
 742:	88 23       	and	r24, r24
 744:	b9 f0       	breq	.+46     	; 0x774 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 746:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 74a:	82 ff       	sbrs	r24, 2
 74c:	f8 cf       	rjmp	.-16     	; 0x73e <Endpoint_ClearStatusStage+0xa>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 74e:	e8 ee       	ldi	r30, 0xE8	; 232
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	8b 77       	andi	r24, 0x7B	; 123
 756:	80 83       	st	Z, r24
 758:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 75a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_DeviceState>
 75e:	88 23       	and	r24, r24
 760:	49 f0       	breq	.+18     	; 0x774 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 766:	80 ff       	sbrs	r24, 0
 768:	f8 cf       	rjmp	.-16     	; 0x75a <Endpoint_ClearStatusStage+0x26>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 76a:	e8 ee       	ldi	r30, 0xE8	; 232
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	8e 77       	andi	r24, 0x7E	; 126
 772:	80 83       	st	Z, r24
 774:	08 95       	ret

00000776 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 776:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 77a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 77e:	44 e6       	ldi	r20, 0x64	; 100
 780:	02 c0       	rjmp	.+4      	; 0x786 <Endpoint_WaitUntilReady+0x10>

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;
 782:	9c 01       	movw	r18, r24

			if (!(TimeoutMSRem--))
 784:	45 2f       	mov	r20, r21
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 786:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 78a:	98 2f       	mov	r25, r24
 78c:	91 70       	andi	r25, 0x01	; 1
 78e:	80 fd       	sbrc	r24, 0
 790:	90 e8       	ldi	r25, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 792:	90 38       	cpi	r25, 0x80	; 128
 794:	29 f4       	brne	.+10     	; 0x7a0 <Endpoint_WaitUntilReady+0x2a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 796:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		{
			if (Endpoint_IsINReady())
 79a:	80 ff       	sbrs	r24, 0
 79c:	05 c0       	rjmp	.+10     	; 0x7a8 <Endpoint_WaitUntilReady+0x32>
 79e:	1b c0       	rjmp	.+54     	; 0x7d6 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 7a4:	82 fd       	sbrc	r24, 2
 7a6:	19 c0       	rjmp	.+50     	; 0x7da <Endpoint_WaitUntilReady+0x64>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7a8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7ac:	88 23       	and	r24, r24
 7ae:	b9 f0       	breq	.+46     	; 0x7de <Endpoint_WaitUntilReady+0x68>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7b0:	85 30       	cpi	r24, 0x05	; 5
 7b2:	b9 f0       	breq	.+46     	; 0x7e2 <Endpoint_WaitUntilReady+0x6c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7b4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7b8:	85 fd       	sbrc	r24, 5
 7ba:	15 c0       	rjmp	.+42     	; 0x7e6 <Endpoint_WaitUntilReady+0x70>
 7bc:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 7c0:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7c4:	28 17       	cp	r18, r24
 7c6:	39 07       	cpc	r19, r25
 7c8:	f1 f2       	breq	.-68     	; 0x786 <Endpoint_WaitUntilReady+0x10>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7ca:	5f ef       	ldi	r21, 0xFF	; 255
 7cc:	54 0f       	add	r21, r20
 7ce:	41 11       	cpse	r20, r1
 7d0:	d8 cf       	rjmp	.-80     	; 0x782 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 7d2:	84 e0       	ldi	r24, 0x04	; 4
 7d4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	08 95       	ret
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7e6:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 7e8:	08 95       	ret

000007ea <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 7ea:	08 95       	ret

000007ec <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
 7ec:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_DeviceState>
 7f0:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_Device_ConfigurationNumber>
 7f4:	88 e0       	ldi	r24, 0x08	; 8
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	40 e0       	ldi	r20, 0x00	; 0
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <USB_Init_Device+0x16>
 7fc:	4f 5f       	subi	r20, 0xFF	; 255
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	80 34       	cpi	r24, 0x40	; 64
 804:	91 05       	cpc	r25, r1
 806:	d0 f3       	brcs	.-12     	; 0x7fc <USB_Init_Device+0x10>
 808:	42 95       	swap	r20
 80a:	40 7f       	andi	r20, 0xF0	; 240
 80c:	42 60       	ori	r20, 0x02	; 2
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	0e 94 66 03 	call	0x6cc	; 0x6cc <Endpoint_ConfigureEndpoint_Prv>
 816:	e1 ee       	ldi	r30, 0xE1	; 225
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	8e 7f       	andi	r24, 0xFE	; 254
 81e:	80 83       	st	Z, r24
 820:	e2 ee       	ldi	r30, 0xE2	; 226
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 83       	st	Z, r24
 82a:	80 81       	ld	r24, Z
 82c:	88 60       	ori	r24, 0x08	; 8
 82e:	80 83       	st	Z, r24
 830:	e0 ee       	ldi	r30, 0xE0	; 224
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	8e 7f       	andi	r24, 0xFE	; 254
 838:	80 83       	st	Z, r24
 83a:	08 95       	ret

0000083c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 83c:	0e 94 42 04 	call	0x884	; 0x884 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 840:	0e 94 45 04 	call	0x88a	; 0x88a <USB_INT_ClearAllInterrupts>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 844:	e8 ed       	ldi	r30, 0xD8	; 216
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	8f 77       	andi	r24, 0x7F	; 127
 84c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 84e:	80 81       	ld	r24, Z
 850:	80 68       	ori	r24, 0x80	; 128
 852:	80 83       	st	Z, r24
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 854:	80 81       	ld	r24, Z
 856:	8f 7d       	andi	r24, 0xDF	; 223
 858:	80 83       	st	Z, r24

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 85a:	84 e0       	ldi	r24, 0x04	; 4
 85c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 85e:	86 e0       	ldi	r24, 0x06	; 6
 860:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 862:	09 b4       	in	r0, 0x29	; 41
 864:	00 fe       	sbrs	r0, 0
 866:	fd cf       	rjmp	.-6      	; 0x862 <USB_ResetInterface+0x26>
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
 868:	0e 94 f6 03 	call	0x7ec	; 0x7ec <USB_Init_Device>
 86c:	08 95       	ret

0000086e <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 86e:	e3 e6       	ldi	r30, 0x63	; 99
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	8e 7f       	andi	r24, 0xFE	; 254
 876:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_IsInitialized>

	USB_ResetInterface();
 87e:	0e 94 1e 04 	call	0x83c	; 0x83c <USB_ResetInterface>
 882:	08 95       	ret

00000884 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 884:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 888:	08 95       	ret

0000088a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 88a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 88e:	08 95       	ret

00000890 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	2f 93       	push	r18
 89c:	3f 93       	push	r19
 89e:	4f 93       	push	r20
 8a0:	5f 93       	push	r21
 8a2:	6f 93       	push	r22
 8a4:	7f 93       	push	r23
 8a6:	8f 93       	push	r24
 8a8:	9f 93       	push	r25
 8aa:	af 93       	push	r26
 8ac:	bf 93       	push	r27
 8ae:	ef 93       	push	r30
 8b0:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8b6:	80 ff       	sbrs	r24, 0
 8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <__vector_11+0x58>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 8be:	80 ff       	sbrs	r24, 0
 8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <__vector_11+0x58>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8c2:	e2 ee       	ldi	r30, 0xE2	; 226
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	8e 7f       	andi	r24, 0xFE	; 254
 8ca:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8cc:	80 81       	ld	r24, Z
 8ce:	80 61       	ori	r24, 0x10	; 16
 8d0:	80 83       	st	Z, r24
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8d2:	e8 ed       	ldi	r30, 0xD8	; 216
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	80 62       	ori	r24, 0x20	; 32
 8da:	80 83       	st	Z, r24
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 8dc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8de:	85 e0       	ldi	r24, 0x05	; 5
 8e0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 8e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 8e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8ec:	84 ff       	sbrs	r24, 4
 8ee:	30 c0       	rjmp	.+96     	; 0x950 <__vector_11+0xc0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 8f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 8f4:	84 ff       	sbrs	r24, 4
 8f6:	2c c0       	rjmp	.+88     	; 0x950 <__vector_11+0xc0>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8f8:	84 e0       	ldi	r24, 0x04	; 4
 8fa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8fc:	86 e0       	ldi	r24, 0x06	; 6
 8fe:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 900:	09 b4       	in	r0, 0x29	; 41
 902:	00 fe       	sbrs	r0, 0
 904:	fd cf       	rjmp	.-6      	; 0x900 <__vector_11+0x70>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 906:	e8 ed       	ldi	r30, 0xD8	; 216
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	8f 7d       	andi	r24, 0xDF	; 223
 90e:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 910:	e1 ee       	ldi	r30, 0xE1	; 225
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	8f 7e       	andi	r24, 0xEF	; 239
 918:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 91a:	e2 ee       	ldi	r30, 0xE2	; 226
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	8f 7e       	andi	r24, 0xEF	; 239
 922:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 924:	80 81       	ld	r24, Z
 926:	81 60       	ori	r24, 0x01	; 1
 928:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 92a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_Device_ConfigurationNumber>
 92e:	88 23       	and	r24, r24
 930:	21 f0       	breq	.+8      	; 0x93a <__vector_11+0xaa>
		  USB_DeviceState = DEVICE_STATE_Configured;
 932:	84 e0       	ldi	r24, 0x04	; 4
 934:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_DeviceState>
 938:	09 c0       	rjmp	.+18     	; 0x94c <__vector_11+0xbc>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 93a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 93e:	88 23       	and	r24, r24
 940:	14 f4       	brge	.+4      	; 0x946 <__vector_11+0xb6>
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	01 c0       	rjmp	.+2      	; 0x948 <__vector_11+0xb8>
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 94c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 950:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 954:	83 ff       	sbrs	r24, 3
 956:	31 c0       	rjmp	.+98     	; 0x9ba <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 958:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 95c:	83 ff       	sbrs	r24, 3
 95e:	2d c0       	rjmp	.+90     	; 0x9ba <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 960:	e1 ee       	ldi	r30, 0xE1	; 225
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	87 7f       	andi	r24, 0xF7	; 247
 968:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 96a:	82 e0       	ldi	r24, 0x02	; 2
 96c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 970:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 974:	80 81       	ld	r24, Z
 976:	8e 7f       	andi	r24, 0xFE	; 254
 978:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 97a:	e2 ee       	ldi	r30, 0xE2	; 226
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	8e 7f       	andi	r24, 0xFE	; 254
 982:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 984:	80 81       	ld	r24, Z
 986:	80 61       	ori	r24, 0x10	; 16
 988:	80 83       	st	Z, r24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 98a:	88 e0       	ldi	r24, 0x08	; 8
 98c:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 98e:	40 e0       	ldi	r20, 0x00	; 0
 990:	03 c0       	rjmp	.+6      	; 0x998 <__vector_11+0x108>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 992:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 998:	80 34       	cpi	r24, 0x40	; 64
 99a:	91 05       	cpc	r25, r1
 99c:	d0 f3       	brcs	.-12     	; 0x992 <__vector_11+0x102>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 99e:	42 95       	swap	r20
 9a0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9a2:	42 60       	ori	r20, 0x02	; 2
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	0e 94 66 03 	call	0x6cc	; 0x6cc <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 9ac:	e0 ef       	ldi	r30, 0xF0	; 240
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	88 60       	ori	r24, 0x08	; 8
 9b4:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9ba:	ff 91       	pop	r31
 9bc:	ef 91       	pop	r30
 9be:	bf 91       	pop	r27
 9c0:	af 91       	pop	r26
 9c2:	9f 91       	pop	r25
 9c4:	8f 91       	pop	r24
 9c6:	7f 91       	pop	r23
 9c8:	6f 91       	pop	r22
 9ca:	5f 91       	pop	r21
 9cc:	4f 91       	pop	r20
 9ce:	3f 91       	pop	r19
 9d0:	2f 91       	pop	r18
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

000009dc <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 9dc:	1f 92       	push	r1
 9de:	0f 92       	push	r0
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	ef 92       	push	r14
 9e8:	ff 92       	push	r15
 9ea:	1f 93       	push	r17
 9ec:	2f 93       	push	r18
 9ee:	3f 93       	push	r19
 9f0:	4f 93       	push	r20
 9f2:	5f 93       	push	r21
 9f4:	6f 93       	push	r22
 9f6:	7f 93       	push	r23
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	af 93       	push	r26
 9fe:	bf 93       	push	r27
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	ef 93       	push	r30
 a06:	ff 93       	push	r31
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a08:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 a0c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 a0e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 a12:	98 2f       	mov	r25, r24
 a14:	91 70       	andi	r25, 0x01	; 1
 a16:	80 fd       	sbrc	r24, 0
 a18:	90 e8       	ldi	r25, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a1a:	19 2f       	mov	r17, r25
 a1c:	1c 2b       	or	r17, r28
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a1e:	0f 2e       	mov	r0, r31
 a20:	f9 ee       	ldi	r31, 0xE9	; 233
 a22:	ef 2e       	mov	r14, r31
 a24:	f1 2c       	mov	r15, r1
 a26:	f0 2d       	mov	r31, r0
 a28:	f7 01       	movw	r30, r14
 a2a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 a2c:	c0 ef       	ldi	r28, 0xF0	; 240
 a2e:	d0 e0       	ldi	r29, 0x00	; 0
 a30:	88 81       	ld	r24, Y
 a32:	87 7f       	andi	r24, 0xF7	; 247
 a34:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 a36:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 a38:	0e 94 64 02 	call	0x4c8	; 0x4c8 <USB_Device_ProcessControlRequest>
 a3c:	f7 01       	movw	r30, r14
 a3e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 a40:	88 81       	ld	r24, Y
 a42:	88 60       	ori	r24, 0x08	; 8
 a44:	88 83       	st	Y, r24
 a46:	c1 2f       	mov	r28, r17
 a48:	cf 70       	andi	r28, 0x0F	; 15
 a4a:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 a4c:	ff 91       	pop	r31
 a4e:	ef 91       	pop	r30
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	bf 91       	pop	r27
 a56:	af 91       	pop	r26
 a58:	9f 91       	pop	r25
 a5a:	8f 91       	pop	r24
 a5c:	7f 91       	pop	r23
 a5e:	6f 91       	pop	r22
 a60:	5f 91       	pop	r21
 a62:	4f 91       	pop	r20
 a64:	3f 91       	pop	r19
 a66:	2f 91       	pop	r18
 a68:	1f 91       	pop	r17
 a6a:	ff 90       	pop	r15
 a6c:	ef 90       	pop	r14
 a6e:	0f 90       	pop	r0
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	0f 90       	pop	r0
 a74:	1f 90       	pop	r1
 a76:	18 95       	reti

00000a78 <USB_DeviceTask>:
	#endif
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 a78:	cf 93       	push	r28
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 a7a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_DeviceState>
 a7e:	88 23       	and	r24, r24
 a80:	a1 f0       	breq	.+40     	; 0xaaa <USB_DeviceTask+0x32>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a82:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 a86:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 a88:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 a8c:	98 2f       	mov	r25, r24
 a8e:	91 70       	andi	r25, 0x01	; 1
 a90:	80 fd       	sbrc	r24, 0
 a92:	90 e8       	ldi	r25, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a94:	c9 2b       	or	r28, r25
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a96:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 a9e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 aa0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa4:	cf 70       	andi	r28, 0x0F	; 15
 aa6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 aaa:	cf 91       	pop	r28
 aac:	08 95       	ret

00000aae <USB_USBTask>:
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 aae:	0e 94 3c 05 	call	0xa78	; 0xa78 <USB_DeviceTask>
 ab2:	08 95       	ret

00000ab4 <__floatunsisf>:
 ab4:	e8 94       	clt
 ab6:	09 c0       	rjmp	.+18     	; 0xaca <__floatsisf+0x12>

00000ab8 <__floatsisf>:
 ab8:	97 fb       	bst	r25, 7
 aba:	3e f4       	brtc	.+14     	; 0xaca <__floatsisf+0x12>
 abc:	90 95       	com	r25
 abe:	80 95       	com	r24
 ac0:	70 95       	com	r23
 ac2:	61 95       	neg	r22
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	99 23       	and	r25, r25
 acc:	a9 f0       	breq	.+42     	; 0xaf8 <__floatsisf+0x40>
 ace:	f9 2f       	mov	r31, r25
 ad0:	96 e9       	ldi	r25, 0x96	; 150
 ad2:	bb 27       	eor	r27, r27
 ad4:	93 95       	inc	r25
 ad6:	f6 95       	lsr	r31
 ad8:	87 95       	ror	r24
 ada:	77 95       	ror	r23
 adc:	67 95       	ror	r22
 ade:	b7 95       	ror	r27
 ae0:	f1 11       	cpse	r31, r1
 ae2:	f8 cf       	rjmp	.-16     	; 0xad4 <__floatsisf+0x1c>
 ae4:	fa f4       	brpl	.+62     	; 0xb24 <__floatsisf+0x6c>
 ae6:	bb 0f       	add	r27, r27
 ae8:	11 f4       	brne	.+4      	; 0xaee <__floatsisf+0x36>
 aea:	60 ff       	sbrs	r22, 0
 aec:	1b c0       	rjmp	.+54     	; 0xb24 <__floatsisf+0x6c>
 aee:	6f 5f       	subi	r22, 0xFF	; 255
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	8f 4f       	sbci	r24, 0xFF	; 255
 af4:	9f 4f       	sbci	r25, 0xFF	; 255
 af6:	16 c0       	rjmp	.+44     	; 0xb24 <__floatsisf+0x6c>
 af8:	88 23       	and	r24, r24
 afa:	11 f0       	breq	.+4      	; 0xb00 <__floatsisf+0x48>
 afc:	96 e9       	ldi	r25, 0x96	; 150
 afe:	11 c0       	rjmp	.+34     	; 0xb22 <__floatsisf+0x6a>
 b00:	77 23       	and	r23, r23
 b02:	21 f0       	breq	.+8      	; 0xb0c <__floatsisf+0x54>
 b04:	9e e8       	ldi	r25, 0x8E	; 142
 b06:	87 2f       	mov	r24, r23
 b08:	76 2f       	mov	r23, r22
 b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__floatsisf+0x5e>
 b0c:	66 23       	and	r22, r22
 b0e:	71 f0       	breq	.+28     	; 0xb2c <__floatsisf+0x74>
 b10:	96 e8       	ldi	r25, 0x86	; 134
 b12:	86 2f       	mov	r24, r22
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	60 e0       	ldi	r22, 0x00	; 0
 b18:	2a f0       	brmi	.+10     	; 0xb24 <__floatsisf+0x6c>
 b1a:	9a 95       	dec	r25
 b1c:	66 0f       	add	r22, r22
 b1e:	77 1f       	adc	r23, r23
 b20:	88 1f       	adc	r24, r24
 b22:	da f7       	brpl	.-10     	; 0xb1a <__floatsisf+0x62>
 b24:	88 0f       	add	r24, r24
 b26:	96 95       	lsr	r25
 b28:	87 95       	ror	r24
 b2a:	97 f9       	bld	r25, 7
 b2c:	08 95       	ret

00000b2e <__tablejump2__>:
 b2e:	ee 0f       	add	r30, r30
 b30:	ff 1f       	adc	r31, r31
 b32:	05 90       	lpm	r0, Z+
 b34:	f4 91       	lpm	r31, Z
 b36:	e0 2d       	mov	r30, r0
 b38:	09 94       	ijmp

00000b3a <do_rand>:
 b3a:	8f 92       	push	r8
 b3c:	9f 92       	push	r9
 b3e:	af 92       	push	r10
 b40:	bf 92       	push	r11
 b42:	cf 92       	push	r12
 b44:	df 92       	push	r13
 b46:	ef 92       	push	r14
 b48:	ff 92       	push	r15
 b4a:	cf 93       	push	r28
 b4c:	df 93       	push	r29
 b4e:	ec 01       	movw	r28, r24
 b50:	68 81       	ld	r22, Y
 b52:	79 81       	ldd	r23, Y+1	; 0x01
 b54:	8a 81       	ldd	r24, Y+2	; 0x02
 b56:	9b 81       	ldd	r25, Y+3	; 0x03
 b58:	61 15       	cp	r22, r1
 b5a:	71 05       	cpc	r23, r1
 b5c:	81 05       	cpc	r24, r1
 b5e:	91 05       	cpc	r25, r1
 b60:	21 f4       	brne	.+8      	; 0xb6a <do_rand+0x30>
 b62:	64 e2       	ldi	r22, 0x24	; 36
 b64:	79 ed       	ldi	r23, 0xD9	; 217
 b66:	8b e5       	ldi	r24, 0x5B	; 91
 b68:	97 e0       	ldi	r25, 0x07	; 7
 b6a:	2d e1       	ldi	r18, 0x1D	; 29
 b6c:	33 ef       	ldi	r19, 0xF3	; 243
 b6e:	41 e0       	ldi	r20, 0x01	; 1
 b70:	50 e0       	ldi	r21, 0x00	; 0
 b72:	0e 94 14 06 	call	0xc28	; 0xc28 <__divmodsi4>
 b76:	49 01       	movw	r8, r18
 b78:	5a 01       	movw	r10, r20
 b7a:	27 ea       	ldi	r18, 0xA7	; 167
 b7c:	31 e4       	ldi	r19, 0x41	; 65
 b7e:	40 e0       	ldi	r20, 0x00	; 0
 b80:	50 e0       	ldi	r21, 0x00	; 0
 b82:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__mulsi3>
 b86:	6b 01       	movw	r12, r22
 b88:	7c 01       	movw	r14, r24
 b8a:	2c ee       	ldi	r18, 0xEC	; 236
 b8c:	34 ef       	ldi	r19, 0xF4	; 244
 b8e:	4f ef       	ldi	r20, 0xFF	; 255
 b90:	5f ef       	ldi	r21, 0xFF	; 255
 b92:	c5 01       	movw	r24, r10
 b94:	b4 01       	movw	r22, r8
 b96:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__mulsi3>
 b9a:	dc 01       	movw	r26, r24
 b9c:	cb 01       	movw	r24, r22
 b9e:	8c 0d       	add	r24, r12
 ba0:	9d 1d       	adc	r25, r13
 ba2:	ae 1d       	adc	r26, r14
 ba4:	bf 1d       	adc	r27, r15
 ba6:	b7 ff       	sbrs	r27, 7
 ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <do_rand+0x76>
 baa:	01 97       	sbiw	r24, 0x01	; 1
 bac:	a1 09       	sbc	r26, r1
 bae:	b0 48       	sbci	r27, 0x80	; 128
 bb0:	88 83       	st	Y, r24
 bb2:	99 83       	std	Y+1, r25	; 0x01
 bb4:	aa 83       	std	Y+2, r26	; 0x02
 bb6:	bb 83       	std	Y+3, r27	; 0x03
 bb8:	9f 77       	andi	r25, 0x7F	; 127
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	ff 90       	pop	r15
 bc0:	ef 90       	pop	r14
 bc2:	df 90       	pop	r13
 bc4:	cf 90       	pop	r12
 bc6:	bf 90       	pop	r11
 bc8:	af 90       	pop	r10
 bca:	9f 90       	pop	r9
 bcc:	8f 90       	pop	r8
 bce:	08 95       	ret

00000bd0 <rand_r>:
 bd0:	0e 94 9d 05 	call	0xb3a	; 0xb3a <do_rand>
 bd4:	08 95       	ret

00000bd6 <rand>:
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 bd8:	91 e0       	ldi	r25, 0x01	; 1
 bda:	0e 94 9d 05 	call	0xb3a	; 0xb3a <do_rand>
 bde:	08 95       	ret

00000be0 <srand>:
 be0:	a0 e0       	ldi	r26, 0x00	; 0
 be2:	b0 e0       	ldi	r27, 0x00	; 0
 be4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 be8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 bec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 bf0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 bf4:	08 95       	ret

00000bf6 <__mulsi3>:
 bf6:	ee 27       	eor	r30, r30
 bf8:	ff 27       	eor	r31, r31

00000bfa <__mulsi3_helper>:
 bfa:	aa 27       	eor	r26, r26
 bfc:	bb 27       	eor	r27, r27
 bfe:	08 c0       	rjmp	.+16     	; 0xc10 <__mulsi3_helper+0x16>
 c00:	a2 0f       	add	r26, r18
 c02:	b3 1f       	adc	r27, r19
 c04:	e4 1f       	adc	r30, r20
 c06:	f5 1f       	adc	r31, r21
 c08:	22 0f       	add	r18, r18
 c0a:	33 1f       	adc	r19, r19
 c0c:	44 1f       	adc	r20, r20
 c0e:	55 1f       	adc	r21, r21
 c10:	96 95       	lsr	r25
 c12:	87 95       	ror	r24
 c14:	77 95       	ror	r23
 c16:	67 95       	ror	r22
 c18:	98 f3       	brcs	.-26     	; 0xc00 <__mulsi3_helper+0x6>
 c1a:	70 40       	sbci	r23, 0x00	; 0
 c1c:	a9 f7       	brne	.-22     	; 0xc08 <__mulsi3_helper+0xe>
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	99 f7       	brne	.-26     	; 0xc08 <__mulsi3_helper+0xe>
 c22:	bd 01       	movw	r22, r26
 c24:	cf 01       	movw	r24, r30
 c26:	08 95       	ret

00000c28 <__divmodsi4>:
 c28:	05 2e       	mov	r0, r21
 c2a:	97 fb       	bst	r25, 7
 c2c:	1e f4       	brtc	.+6      	; 0xc34 <__divmodsi4+0xc>
 c2e:	00 94       	com	r0
 c30:	0e 94 2b 06 	call	0xc56	; 0xc56 <__negsi2>
 c34:	57 fd       	sbrc	r21, 7
 c36:	07 d0       	rcall	.+14     	; 0xc46 <__divmodsi4_neg2>
 c38:	0e 94 33 06 	call	0xc66	; 0xc66 <__udivmodsi4>
 c3c:	07 fc       	sbrc	r0, 7
 c3e:	03 d0       	rcall	.+6      	; 0xc46 <__divmodsi4_neg2>
 c40:	4e f4       	brtc	.+18     	; 0xc54 <__divmodsi4_exit>
 c42:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__negsi2>

00000c46 <__divmodsi4_neg2>:
 c46:	50 95       	com	r21
 c48:	40 95       	com	r20
 c4a:	30 95       	com	r19
 c4c:	21 95       	neg	r18
 c4e:	3f 4f       	sbci	r19, 0xFF	; 255
 c50:	4f 4f       	sbci	r20, 0xFF	; 255
 c52:	5f 4f       	sbci	r21, 0xFF	; 255

00000c54 <__divmodsi4_exit>:
 c54:	08 95       	ret

00000c56 <__negsi2>:
 c56:	90 95       	com	r25
 c58:	80 95       	com	r24
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	08 95       	ret

00000c66 <__udivmodsi4>:
 c66:	a1 e2       	ldi	r26, 0x21	; 33
 c68:	1a 2e       	mov	r1, r26
 c6a:	aa 1b       	sub	r26, r26
 c6c:	bb 1b       	sub	r27, r27
 c6e:	fd 01       	movw	r30, r26
 c70:	0d c0       	rjmp	.+26     	; 0xc8c <__udivmodsi4_ep>

00000c72 <__udivmodsi4_loop>:
 c72:	aa 1f       	adc	r26, r26
 c74:	bb 1f       	adc	r27, r27
 c76:	ee 1f       	adc	r30, r30
 c78:	ff 1f       	adc	r31, r31
 c7a:	a2 17       	cp	r26, r18
 c7c:	b3 07       	cpc	r27, r19
 c7e:	e4 07       	cpc	r30, r20
 c80:	f5 07       	cpc	r31, r21
 c82:	20 f0       	brcs	.+8      	; 0xc8c <__udivmodsi4_ep>
 c84:	a2 1b       	sub	r26, r18
 c86:	b3 0b       	sbc	r27, r19
 c88:	e4 0b       	sbc	r30, r20
 c8a:	f5 0b       	sbc	r31, r21

00000c8c <__udivmodsi4_ep>:
 c8c:	66 1f       	adc	r22, r22
 c8e:	77 1f       	adc	r23, r23
 c90:	88 1f       	adc	r24, r24
 c92:	99 1f       	adc	r25, r25
 c94:	1a 94       	dec	r1
 c96:	69 f7       	brne	.-38     	; 0xc72 <__udivmodsi4_loop>
 c98:	60 95       	com	r22
 c9a:	70 95       	com	r23
 c9c:	80 95       	com	r24
 c9e:	90 95       	com	r25
 ca0:	9b 01       	movw	r18, r22
 ca2:	ac 01       	movw	r20, r24
 ca4:	bd 01       	movw	r22, r26
 ca6:	cf 01       	movw	r24, r30
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
