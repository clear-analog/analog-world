
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000f5c  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014e  00800106  00800106  00000ff6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004560  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015c1  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fa6  00000000  00000000  00006e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  00009dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aaa  00000000  00000000  0000a590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002da1  00000000  00000000  0000c03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  0000eddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  2c:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_11>
  30:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_12>
  34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  68:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  6c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  70:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  74:	f8 01       	movw	r30, r16
  76:	ff 01       	movw	r30, r30
  78:	1a 02       	muls	r17, r26
  7a:	ff 01       	movw	r30, r30
  7c:	1a 02       	muls	r17, r26
  7e:	06 02       	muls	r16, r22
  80:	0b 02       	muls	r16, r27
  82:	1a 02       	muls	r17, r26
  84:	11 02       	muls	r17, r17
  86:	16 02       	muls	r17, r22

00000088 <SerialString>:
  88:	0e 03 30 00 30 00 30 00 30 00 30 00 31 00 00 00     ..0.0.0.0.0.1...

00000098 <ProductString>:
  98:	34 03 38 00 2d 00 43 00 68 00 61 00 6e 00 6e 00     4.8.-.C.h.a.n.n.
  a8:	65 00 6c 00 20 00 56 00 6f 00 6c 00 74 00 61 00     e.l. .V.o.l.t.a.
  b8:	67 00 65 00 20 00 4d 00 6f 00 6e 00 69 00 74 00     g.e. .M.o.n.i.t.
  c8:	6f 00 72 00 00 00                                   o.r...

000000ce <ManufacturerString>:
  ce:	20 03 56 00 6f 00 6c 00 74 00 61 00 67 00 65 00      .V.o.l.t.a.g.e.
  de:	20 00 4d 00 6f 00 6e 00 69 00 74 00 6f 00 72 00      .M.o.n.i.t.o.r.
	...

000000f0 <LanguageString>:
  f0:	04 03 09 04                                         ....

000000f4 <ConfigurationDescriptor>:
  f4:	09 02 19 00 01 01 00 80 32 09 04 00 00 01 ff ff     ........2.......
 104:	ff 00 07 05 81 02 40 00 01                          ......@..

0000010d <DeviceDescriptor>:
 10d:	12 01 00 02 ff ff ff 40 eb 03 48 20 00 01 01 02     .......@..H ....
 11d:	03 01 00                                            ...

00000120 <__ctors_end>:
 120:	11 24       	eor	r1, r1
 122:	1f be       	out	0x3f, r1	; 63
 124:	cf ef       	ldi	r28, 0xFF	; 255
 126:	d2 e0       	ldi	r29, 0x02	; 2
 128:	de bf       	out	0x3e, r29	; 62
 12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
 12c:	11 e0       	ldi	r17, 0x01	; 1
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	ec e5       	ldi	r30, 0x5C	; 92
 134:	ff e0       	ldi	r31, 0x0F	; 15
 136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
 138:	05 90       	lpm	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	a6 30       	cpi	r26, 0x06	; 6
 13e:	b1 07       	cpc	r27, r17
 140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
 142:	22 e0       	ldi	r18, 0x02	; 2
 144:	a6 e0       	ldi	r26, 0x06	; 6
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
 14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
 14c:	a4 35       	cpi	r26, 0x54	; 84
 14e:	b2 07       	cpc	r27, r18
 150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
 152:	0e 94 1d 05 	call	0xa3a	; 0xa3a <main>
 156:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_exit>

0000015a <__bad_interrupt>:
 15a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015e <CALLBACK_USB_GetDescriptor>:
const USB_Descriptor_String_t PROGMEM ProductString = USB_STRING_DESCRIPTOR(L"8-Channel Voltage Monitor");
const USB_Descriptor_String_t PROGMEM SerialString = USB_STRING_DESCRIPTOR(L"000001");

// Descriptor Callback Functions
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint16_t wIndex, const void** const DescriptorAddress) {
    const uint8_t DescriptorType = (wValue >> 8);
 15e:	29 2f       	mov	r18, r25
 160:	33 27       	eor	r19, r19
    const uint8_t DescriptorNumber = (wValue & 0xFF);
    
    void* Address = NULL;
    uint16_t Size = NO_DESCRIPTOR;
    
    switch (DescriptorType) {
 162:	22 30       	cpi	r18, 0x02	; 2
 164:	31 05       	cpc	r19, r1
 166:	59 f0       	breq	.+22     	; 0x17e <CALLBACK_USB_GetDescriptor+0x20>
 168:	23 30       	cpi	r18, 0x03	; 3
 16a:	31 05       	cpc	r19, r1
 16c:	69 f0       	breq	.+26     	; 0x188 <CALLBACK_USB_GetDescriptor+0x2a>
 16e:	21 30       	cpi	r18, 0x01	; 1
 170:	31 05       	cpc	r19, r1
 172:	69 f1       	breq	.+90     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x70>
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint16_t wIndex, const void** const DescriptorAddress) {
    const uint8_t DescriptorType = (wValue >> 8);
    const uint8_t DescriptorNumber = (wValue & 0xFF);
    
    void* Address = NULL;
    uint16_t Size = NO_DESCRIPTOR;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
// Descriptor Callback Functions
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint16_t wIndex, const void** const DescriptorAddress) {
    const uint8_t DescriptorType = (wValue >> 8);
    const uint8_t DescriptorNumber = (wValue & 0xFF);
    
    void* Address = NULL;
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	31 c0       	rjmp	.+98     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x82>
            Address = (void*)&DeviceDescriptor;
            Size = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = (void*)&ConfigurationDescriptor;
            Size = sizeof(USB_Descriptor_Configuration_t);
 17e:	89 e1       	ldi	r24, 0x19	; 25
 180:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = (void*)&DeviceDescriptor;
            Size = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = (void*)&ConfigurationDescriptor;
 182:	24 ef       	ldi	r18, 0xF4	; 244
 184:	30 e0       	ldi	r19, 0x00	; 0
            Size = sizeof(USB_Descriptor_Configuration_t);
            break;
 186:	2c c0       	rjmp	.+88     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x82>
        case DTYPE_String:
            switch (DescriptorNumber) {
 188:	99 27       	eor	r25, r25
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	91 05       	cpc	r25, r1
 18e:	69 f0       	breq	.+26     	; 0x1aa <CALLBACK_USB_GetDescriptor+0x4c>
 190:	30 f0       	brcs	.+12     	; 0x19e <CALLBACK_USB_GetDescriptor+0x40>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	91 05       	cpc	r25, r1
 196:	79 f0       	breq	.+30     	; 0x1b6 <CALLBACK_USB_GetDescriptor+0x58>
 198:	03 97       	sbiw	r24, 0x03	; 3
 19a:	99 f0       	breq	.+38     	; 0x1c2 <CALLBACK_USB_GetDescriptor+0x64>
 19c:	1d c0       	rjmp	.+58     	; 0x1d8 <CALLBACK_USB_GetDescriptor+0x7a>
                case STRING_ID_Language:
                    Address = (void*)&LanguageString;
                    Size = pgm_read_byte(&LanguageString.Header.Size);
 19e:	e0 ef       	ldi	r30, 0xF0	; 240
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	84 91       	lpm	r24, Z
 1a4:	90 e0       	ldi	r25, 0x00	; 0
            Size = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber) {
                case STRING_ID_Language:
                    Address = (void*)&LanguageString;
 1a6:	9f 01       	movw	r18, r30
                    Size = pgm_read_byte(&LanguageString.Header.Size);
                    break;
 1a8:	1b c0       	rjmp	.+54     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x82>
                case STRING_ID_Manufacturer:
                    Address = (void*)&ManufacturerString;
                    Size = pgm_read_byte(&ManufacturerString.Header.Size);
 1aa:	ee ec       	ldi	r30, 0xCE	; 206
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	84 91       	lpm	r24, Z
 1b0:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Language:
                    Address = (void*)&LanguageString;
                    Size = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case STRING_ID_Manufacturer:
                    Address = (void*)&ManufacturerString;
 1b2:	9f 01       	movw	r18, r30
                    Size = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
 1b4:	15 c0       	rjmp	.+42     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x82>
                case STRING_ID_Product:
                    Address = (void*)&ProductString;
                    Size = pgm_read_byte(&ProductString.Header.Size);
 1b6:	e8 e9       	ldi	r30, 0x98	; 152
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	84 91       	lpm	r24, Z
 1bc:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Manufacturer:
                    Address = (void*)&ManufacturerString;
                    Size = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case STRING_ID_Product:
                    Address = (void*)&ProductString;
 1be:	9f 01       	movw	r18, r30
                    Size = pgm_read_byte(&ProductString.Header.Size);
                    break;
 1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x82>
                case STRING_ID_Serial:
                    Address = (void*)&SerialString;
                    Size = pgm_read_byte(&SerialString.Header.Size);
 1c2:	e8 e8       	ldi	r30, 0x88	; 136
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	84 91       	lpm	r24, Z
 1c8:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Product:
                    Address = (void*)&ProductString;
                    Size = pgm_read_byte(&ProductString.Header.Size);
                    break;
                case STRING_ID_Serial:
                    Address = (void*)&SerialString;
 1ca:	9f 01       	movw	r18, r30
                    Size = pgm_read_byte(&SerialString.Header.Size);
                    break;
 1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x82>
    uint16_t Size = NO_DESCRIPTOR;
    
    switch (DescriptorType) {
        case DTYPE_Device:
            Address = (void*)&DeviceDescriptor;
            Size = sizeof(USB_Descriptor_Device_t);
 1ce:	82 e1       	ldi	r24, 0x12	; 18
 1d0:	90 e0       	ldi	r25, 0x00	; 0
    void* Address = NULL;
    uint16_t Size = NO_DESCRIPTOR;
    
    switch (DescriptorType) {
        case DTYPE_Device:
            Address = (void*)&DeviceDescriptor;
 1d2:	2d e0       	ldi	r18, 0x0D	; 13
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x82>
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint16_t wIndex, const void** const DescriptorAddress) {
    const uint8_t DescriptorType = (wValue >> 8);
    const uint8_t DescriptorNumber = (wValue & 0xFF);
    
    void* Address = NULL;
    uint16_t Size = NO_DESCRIPTOR;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
// Descriptor Callback Functions
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint16_t wIndex, const void** const DescriptorAddress) {
    const uint8_t DescriptorType = (wValue >> 8);
    const uint8_t DescriptorNumber = (wValue & 0xFF);
    
    void* Address = NULL;
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
                    break;
            }
            break;
    }
    
    *DescriptorAddress = Address;
 1e0:	fa 01       	movw	r30, r20
 1e2:	31 83       	std	Z+1, r19	; 0x01
 1e4:	20 83       	st	Z, r18
    return Size;
}
 1e6:	08 95       	ret

000001e8 <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
 1e8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest>
 1ec:	80 38       	cpi	r24, 0x80	; 128
 1ee:	89 f0       	breq	.+34     	; 0x212 <__DATA_REGION_LENGTH__+0x12>
 1f0:	82 38       	cpi	r24, 0x82	; 130
 1f2:	f1 f4       	brne	.+60     	; 0x230 <__DATA_REGION_LENGTH__+0x30>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 1f4:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <USB_ControlRequest+0x4>
 1f8:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	c8 f4       	brcc	.+50     	; 0x230 <__DATA_REGION_LENGTH__+0x30>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 1fe:	e9 ee       	ldi	r30, 0xE9	; 233
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 204:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
 208:	95 fb       	bst	r25, 5
 20a:	99 27       	eor	r25, r25
 20c:	90 f9       	bld	r25, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 20e:	10 82       	st	Z, r1
 210:	01 c0       	rjmp	.+2      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 212:	90 e0       	ldi	r25, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 214:	e8 ee       	ldi	r30, 0xE8	; 232
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	87 7f       	andi	r24, 0xF7	; 247
 21c:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 21e:	a1 ef       	ldi	r26, 0xF1	; 241
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
 224:	1c 92       	st	X, r1
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 226:	80 81       	ld	r24, Z
 228:	8e 77       	andi	r24, 0x7E	; 126
 22a:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 22c:	0e 94 c4 02 	call	0x588	; 0x588 <Endpoint_ClearStatusStage>
 230:	08 95       	ret

00000232 <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 232:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest>
 236:	8f 71       	andi	r24, 0x1F	; 31
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	c1 f5       	brne	.+112    	; 0x2ac <USB_Device_ClearSetFeature+0x7a>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 23c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <USB_ControlRequest+0x2>
 240:	81 11       	cpse	r24, r1
 242:	2b c0       	rjmp	.+86     	; 0x29a <USB_Device_ClearSetFeature+0x68>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 244:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <USB_ControlRequest+0x4>
 248:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	98 0f       	add	r25, r24
 24e:	94 30       	cpi	r25, 0x04	; 4
 250:	68 f5       	brcc	.+90     	; 0x2ac <USB_Device_ClearSetFeature+0x7a>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 252:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 256:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 25a:	90 ff       	sbrs	r25, 0
 25c:	1e c0       	rjmp	.+60     	; 0x29a <USB_Device_ClearSetFeature+0x68>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 25e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <USB_ControlRequest+0x1>
 262:	93 30       	cpi	r25, 0x03	; 3
 264:	31 f4       	brne	.+12     	; 0x272 <USB_Device_ClearSetFeature+0x40>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 266:	eb ee       	ldi	r30, 0xEB	; 235
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 62       	ori	r24, 0x20	; 32
 26e:	80 83       	st	Z, r24
 270:	14 c0       	rjmp	.+40     	; 0x29a <USB_Device_ClearSetFeature+0x68>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 272:	eb ee       	ldi	r30, 0xEB	; 235
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	90 81       	ld	r25, Z
 278:	90 61       	ori	r25, 0x10	; 16
 27a:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	a9 01       	movw	r20, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <USB_Device_ClearSetFeature+0x56>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <USB_Device_ClearSetFeature+0x52>
 28c:	aa ee       	ldi	r26, 0xEA	; 234
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	4c 93       	st	X, r20
				UERST = 0;
 292:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 294:	80 81       	ld	r24, Z
 296:	88 60       	ori	r24, 0x08	; 8
 298:	80 83       	st	Z, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 29a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 29e:	e8 ee       	ldi	r30, 0xE8	; 232
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	87 7f       	andi	r24, 0xF7	; 247
 2a6:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 2a8:	0e 94 c4 02 	call	0x588	; 0x588 <Endpoint_ClearStatusStage>
 2ac:	08 95       	ret

000002ae <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
 2ae:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 2b0:	c0 91 4e 02 	lds	r28, 0x024E	; 0x80024e <USB_ControlRequest+0x2>
 2b4:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 2b6:	e3 ee       	ldi	r30, 0xE3	; 227
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	80 78       	andi	r24, 0x80	; 128
 2be:	8c 2b       	or	r24, r28
 2c0:	80 83       	st	Z, r24
 2c2:	e8 ee       	ldi	r30, 0xE8	; 232
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	87 7f       	andi	r24, 0xF7	; 247
 2ca:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 2cc:	0e 94 c4 02 	call	0x588	; 0x588 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 2d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
 2d4:	80 ff       	sbrs	r24, 0
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <USB_Device_SetAddress+0x22>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 2d8:	e3 ee       	ldi	r30, 0xE3	; 227
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 2e2:	cc 23       	and	r28, r28
 2e4:	11 f0       	breq	.+4      	; 0x2ea <USB_Device_SetAddress+0x3c>
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <USB_Device_SetAddress+0x3e>
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_DeviceState>
}
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2f4:	e8 ee       	ldi	r30, 0xE8	; 232
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	87 7f       	andi	r24, 0xF7	; 247
 2fc:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 2fe:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 302:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 306:	80 81       	ld	r24, Z
 308:	8e 77       	andi	r24, 0x7E	; 126
 30a:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 30c:	0e 94 c4 02 	call	0x588	; 0x588 <Endpoint_ClearStatusStage>
 310:	08 95       	ret

00000312 <USB_Device_GetDescriptor>:
	Endpoint_ClearOUT();
}
#endif

static void USB_Device_GetDescriptor(void)
{
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <USB_Device_GetDescriptor+0xa>
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 320:	ec e4       	ldi	r30, 0x4C	; 76
 322:	f2 e0       	ldi	r31, 0x02	; 2
 324:	64 81       	ldd	r22, Z+4	; 0x04
 326:	75 81       	ldd	r23, Z+5	; 0x05
 328:	ae 01       	movw	r20, r28
 32a:	4f 5f       	subi	r20, 0xFF	; 255
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	82 81       	ldd	r24, Z+2	; 0x02
 330:	93 81       	ldd	r25, Z+3	; 0x03
 332:	0e 94 af 00 	call	0x15e	; 0x15e <CALLBACK_USB_GetDescriptor>
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	79 f0       	breq	.+30     	; 0x358 <USB_Device_GetDescriptor+0x46>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 33a:	08 ee       	ldi	r16, 0xE8	; 232
 33c:	10 e0       	ldi	r17, 0x00	; 0
 33e:	f8 01       	movw	r30, r16
 340:	20 81       	ld	r18, Z
 342:	27 7f       	andi	r18, 0xF7	; 247
 344:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 346:	bc 01       	movw	r22, r24
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	0e 94 29 02 	call	0x452	; 0x452 <Endpoint_Write_Control_PStream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 350:	f8 01       	movw	r30, r16
 352:	80 81       	ld	r24, Z
 354:	8b 77       	andi	r24, 0x7B	; 123
 356:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 366:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <USB_ControlRequest+0x2>
 36a:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <USB_ControlRequest+0x3>
 36e:	99 27       	eor	r25, r25
 370:	02 97       	sbiw	r24, 0x02	; 2
 372:	f4 f4       	brge	.+60     	; 0x3b0 <USB_Device_SetConfiguration+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 374:	e8 ee       	ldi	r30, 0xE8	; 232
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	87 7f       	andi	r24, 0xF7	; 247
 37c:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 37e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <USB_ControlRequest+0x2>
 382:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 386:	0e 94 c4 02 	call	0x588	; 0x588 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 38a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_Device_ConfigurationNumber>
 38e:	88 23       	and	r24, r24
 390:	21 f0       	breq	.+8      	; 0x39a <USB_Device_SetConfiguration+0x34>
	  USB_DeviceState = DEVICE_STATE_Configured;
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_DeviceState>
 398:	09 c0       	rjmp	.+18     	; 0x3ac <USB_Device_SetConfiguration+0x46>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 39a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 39e:	88 23       	and	r24, r24
 3a0:	14 f4       	brge	.+4      	; 0x3a6 <USB_Device_SetConfiguration+0x40>
 3a2:	84 e0       	ldi	r24, 0x04	; 4
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <USB_Device_SetConfiguration+0x42>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 3ac:	0e 94 e5 02 	call	0x5ca	; 0x5ca <USB_Event_Stub>
 3b0:	08 95       	ret

000003b2 <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 3b2:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 3b4:	ec e4       	ldi	r30, 0x4C	; 76
 3b6:	f2 e0       	ldi	r31, 0x02	; 2

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 3ba:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	  *(RequestHeader++) = Endpoint_Read_8();
 3be:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
 3c2:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 3c4:	88 30       	cpi	r24, 0x08	; 8
 3c6:	c8 f3       	brcs	.-14     	; 0x3ba <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 3c8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 3cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
 3d0:	83 ff       	sbrs	r24, 3
 3d2:	30 c0       	rjmp	.+96     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 3d4:	ec e4       	ldi	r30, 0x4C	; 76
 3d6:	f2 e0       	ldi	r31, 0x02	; 2
 3d8:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
 3da:	e1 81       	ldd	r30, Z+1	; 0x01
 3dc:	8e 2f       	mov	r24, r30
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	8a 30       	cpi	r24, 0x0A	; 10
 3e2:	91 05       	cpc	r25, r1
 3e4:	38 f5       	brcc	.+78     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3e6:	fc 01       	movw	r30, r24
 3e8:	e6 5c       	subi	r30, 0xC6	; 198
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 3f0:	20 38       	cpi	r18, 0x80	; 128
 3f2:	11 f0       	breq	.+4      	; 0x3f8 <USB_Device_ProcessControlRequest+0x46>
 3f4:	22 38       	cpi	r18, 0x82	; 130
 3f6:	f1 f4       	brne	.+60     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
 3f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <USB_Device_GetStatus>
 3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 3fe:	22 23       	and	r18, r18
 400:	11 f0       	breq	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	22 30       	cpi	r18, 0x02	; 2
 404:	b9 f4       	brne	.+46     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
 406:	0e 94 19 01 	call	0x232	; 0x232 <USB_Device_ClearSetFeature>
 40a:	14 c0       	rjmp	.+40     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 40c:	21 11       	cpse	r18, r1
 40e:	12 c0       	rjmp	.+36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				  USB_Device_SetAddress();
 410:	0e 94 57 01 	call	0x2ae	; 0x2ae <USB_Device_SetAddress>
 414:	0f c0       	rjmp	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 416:	20 58       	subi	r18, 0x80	; 128
 418:	22 30       	cpi	r18, 0x02	; 2
 41a:	60 f4       	brcc	.+24     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
 41c:	0e 94 89 01 	call	0x312	; 0x312 <USB_Device_GetDescriptor>
 420:	09 c0       	rjmp	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 422:	20 38       	cpi	r18, 0x80	; 128
 424:	39 f4       	brne	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				  USB_Device_GetConfiguration();
 426:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USB_Device_GetConfiguration>
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 42c:	21 11       	cpse	r18, r1
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				  USB_Device_SetConfiguration();
 430:	0e 94 b3 01 	call	0x366	; 0x366 <USB_Device_SetConfiguration>
 434:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 438:	83 ff       	sbrs	r24, 3
 43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 43c:	e8 ee       	ldi	r30, 0xE8	; 232
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	87 7f       	andi	r24, 0xF7	; 247
 444:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 446:	eb ee       	ldi	r30, 0xEB	; 235
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	80 62       	ori	r24, 0x20	; 32
 44e:	80 83       	st	Z, r24
 450:	08 95       	ret

00000452 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 452:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <USB_ControlRequest+0x6>
 456:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <USB_ControlRequest+0x7>
 45a:	26 17       	cp	r18, r22
 45c:	37 07       	cpc	r19, r23
 45e:	58 f0       	brcs	.+22     	; 0x476 <Endpoint_Write_Control_PStream_LE+0x24>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 460:	61 15       	cp	r22, r1
 462:	71 05       	cpc	r23, r1
 464:	39 f4       	brne	.+14     	; 0x474 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 466:	e8 ee       	ldi	r30, 0xE8	; 232
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	20 81       	ld	r18, Z
 46c:	2e 77       	andi	r18, 0x7E	; 126
 46e:	20 83       	st	Z, r18
 470:	9b 01       	movw	r18, r22
 472:	01 c0       	rjmp	.+2      	; 0x476 <Endpoint_Write_Control_PStream_LE+0x24>
 474:	9b 01       	movw	r18, r22
 476:	e8 2f       	mov	r30, r24
 478:	f9 2f       	mov	r31, r25
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	2f c0       	rjmp	.+94     	; 0x4dc <Endpoint_Write_Control_PStream_LE+0x8a>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 47e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 482:	88 23       	and	r24, r24
 484:	09 f4       	brne	.+2      	; 0x488 <Endpoint_Write_Control_PStream_LE+0x36>
 486:	40 c0       	rjmp	.+128    	; 0x508 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 488:	85 30       	cpi	r24, 0x05	; 5
 48a:	09 f4       	brne	.+2      	; 0x48e <Endpoint_Write_Control_PStream_LE+0x3c>
 48c:	3f c0       	rjmp	.+126    	; 0x50c <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 48e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 492:	83 fd       	sbrc	r24, 3
 494:	3d c0       	rjmp	.+122    	; 0x510 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 496:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 49a:	82 fd       	sbrc	r24, 2
 49c:	2f c0       	rjmp	.+94     	; 0x4fc <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 49e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	1b c0       	rjmp	.+54     	; 0x4dc <Endpoint_Write_Control_PStream_LE+0x8a>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 4a6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 4aa:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4ae:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4b0:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4b4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 4ba:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4bc:	21 15       	cp	r18, r1
 4be:	31 05       	cpc	r19, r1
 4c0:	19 f0       	breq	.+6      	; 0x4c8 <Endpoint_Write_Control_PStream_LE+0x76>
 4c2:	80 34       	cpi	r24, 0x40	; 64
 4c4:	91 05       	cpc	r25, r1
 4c6:	98 f3       	brcs	.-26     	; 0x4ae <Endpoint_Write_Control_PStream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	80 34       	cpi	r24, 0x40	; 64
 4cc:	91 05       	cpc	r25, r1
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <Endpoint_Write_Control_PStream_LE+0x80>
 4d0:	40 e0       	ldi	r20, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4d2:	a8 ee       	ldi	r26, 0xE8	; 232
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	8c 91       	ld	r24, X
 4d8:	8e 77       	andi	r24, 0x7E	; 126
 4da:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4dc:	21 15       	cp	r18, r1
 4de:	31 05       	cpc	r19, r1
 4e0:	71 f6       	brne	.-100    	; 0x47e <Endpoint_Write_Control_PStream_LE+0x2c>
 4e2:	41 11       	cpse	r20, r1
 4e4:	cc cf       	rjmp	.-104    	; 0x47e <Endpoint_Write_Control_PStream_LE+0x2c>
 4e6:	0a c0       	rjmp	.+20     	; 0x4fc <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4e8:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4ec:	88 23       	and	r24, r24
 4ee:	91 f0       	breq	.+36     	; 0x514 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4f0:	85 30       	cpi	r24, 0x05	; 5
 4f2:	91 f0       	breq	.+36     	; 0x518 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4f8:	83 fd       	sbrc	r24, 3
 4fa:	10 c0       	rjmp	.+32     	; 0x51c <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 500:	82 ff       	sbrs	r24, 2
 502:	f2 cf       	rjmp	.-28     	; 0x4e8 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 51c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 51e:	08 95       	ret

00000520 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 520:	98 2f       	mov	r25, r24
 522:	29 c0       	rjmp	.+82     	; 0x576 <Endpoint_ConfigureEndpoint_Prv+0x56>
 524:	29 2f       	mov	r18, r25
 526:	2f 70       	andi	r18, 0x0F	; 15
 528:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 52c:	98 17       	cp	r25, r24
 52e:	39 f0       	breq	.+14     	; 0x53e <Endpoint_ConfigureEndpoint_Prv+0x1e>
 530:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 534:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 538:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
 53c:	03 c0       	rjmp	.+6      	; 0x544 <Endpoint_ConfigureEndpoint_Prv+0x24>
 53e:	24 2f       	mov	r18, r20
 540:	76 2f       	mov	r23, r22
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	21 ff       	sbrs	r18, 1
 546:	16 c0       	rjmp	.+44     	; 0x574 <Endpoint_ConfigureEndpoint_Prv+0x54>
 548:	eb ee       	ldi	r30, 0xEB	; 235
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	30 81       	ld	r19, Z
 54e:	3e 7f       	andi	r19, 0xFE	; 254
 550:	30 83       	st	Z, r19
 552:	ad ee       	ldi	r26, 0xED	; 237
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	3c 91       	ld	r19, X
 558:	3d 7f       	andi	r19, 0xFD	; 253
 55a:	3c 93       	st	X, r19
 55c:	30 81       	ld	r19, Z
 55e:	31 60       	ori	r19, 0x01	; 1
 560:	30 83       	st	Z, r19
 562:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 566:	2c 93       	st	X, r18
 568:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
 56c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 570:	22 23       	and	r18, r18
 572:	44 f4       	brge	.+16     	; 0x584 <Endpoint_ConfigureEndpoint_Prv+0x64>
 574:	9f 5f       	subi	r25, 0xFF	; 255
 576:	95 30       	cpi	r25, 0x05	; 5
 578:	a8 f2       	brcs	.-86     	; 0x524 <Endpoint_ConfigureEndpoint_Prv+0x4>
 57a:	8f 70       	andi	r24, 0x0F	; 15
 57c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	08 95       	ret
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret

00000588 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 588:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest>
 58c:	88 23       	and	r24, r24
 58e:	9c f4       	brge	.+38     	; 0x5b6 <Endpoint_ClearStatusStage+0x2e>
 590:	04 c0       	rjmp	.+8      	; 0x59a <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 592:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_DeviceState>
 596:	88 23       	and	r24, r24
 598:	b9 f0       	breq	.+46     	; 0x5c8 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 59a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 59e:	82 ff       	sbrs	r24, 2
 5a0:	f8 cf       	rjmp	.-16     	; 0x592 <Endpoint_ClearStatusStage+0xa>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5a2:	e8 ee       	ldi	r30, 0xE8	; 232
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	8b 77       	andi	r24, 0x7B	; 123
 5aa:	80 83       	st	Z, r24
 5ac:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5ae:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_DeviceState>
 5b2:	88 23       	and	r24, r24
 5b4:	49 f0       	breq	.+18     	; 0x5c8 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 5ba:	80 ff       	sbrs	r24, 0
 5bc:	f8 cf       	rjmp	.-16     	; 0x5ae <Endpoint_ClearStatusStage+0x26>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5be:	e8 ee       	ldi	r30, 0xE8	; 232
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	8e 77       	andi	r24, 0x7E	; 126
 5c6:	80 83       	st	Z, r24
 5c8:	08 95       	ret

000005ca <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 5ca:	08 95       	ret

000005cc <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
 5cc:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <USB_DeviceState>
 5d0:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <USB_Device_ConfigurationNumber>
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <USB_Init_Device+0x16>
 5dc:	4f 5f       	subi	r20, 0xFF	; 255
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	80 34       	cpi	r24, 0x40	; 64
 5e4:	91 05       	cpc	r25, r1
 5e6:	d0 f3       	brcs	.-12     	; 0x5dc <USB_Init_Device+0x10>
 5e8:	42 95       	swap	r20
 5ea:	40 7f       	andi	r20, 0xF0	; 240
 5ec:	42 60       	ori	r20, 0x02	; 2
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	0e 94 90 02 	call	0x520	; 0x520 <Endpoint_ConfigureEndpoint_Prv>
 5f6:	e1 ee       	ldi	r30, 0xE1	; 225
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	8e 7f       	andi	r24, 0xFE	; 254
 5fe:	80 83       	st	Z, r24
 600:	e2 ee       	ldi	r30, 0xE2	; 226
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	81 60       	ori	r24, 0x01	; 1
 608:	80 83       	st	Z, r24
 60a:	80 81       	ld	r24, Z
 60c:	88 60       	ori	r24, 0x08	; 8
 60e:	80 83       	st	Z, r24
 610:	e0 ee       	ldi	r30, 0xE0	; 224
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	80 83       	st	Z, r24
 61a:	08 95       	ret

0000061c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 61c:	0e 94 32 03 	call	0x664	; 0x664 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 620:	0e 94 35 03 	call	0x66a	; 0x66a <USB_INT_ClearAllInterrupts>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 624:	e8 ed       	ldi	r30, 0xD8	; 216
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	8f 77       	andi	r24, 0x7F	; 127
 62c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 62e:	80 81       	ld	r24, Z
 630:	80 68       	ori	r24, 0x80	; 128
 632:	80 83       	st	Z, r24
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 634:	80 81       	ld	r24, Z
 636:	8f 7d       	andi	r24, 0xDF	; 223
 638:	80 83       	st	Z, r24

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 63e:	86 e0       	ldi	r24, 0x06	; 6
 640:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 642:	09 b4       	in	r0, 0x29	; 41
 644:	00 fe       	sbrs	r0, 0
 646:	fd cf       	rjmp	.-6      	; 0x642 <USB_ResetInterface+0x26>
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
 648:	0e 94 e6 02 	call	0x5cc	; 0x5cc <USB_Init_Device>
 64c:	08 95       	ret

0000064e <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 64e:	e3 e6       	ldi	r30, 0x63	; 99
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	8e 7f       	andi	r24, 0xFE	; 254
 656:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_IsInitialized>

	USB_ResetInterface();
 65e:	0e 94 0e 03 	call	0x61c	; 0x61c <USB_ResetInterface>
 662:	08 95       	ret

00000664 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 664:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 668:	08 95       	ret

0000066a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 66a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 66e:	08 95       	ret

00000670 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	2f 93       	push	r18
 67c:	3f 93       	push	r19
 67e:	4f 93       	push	r20
 680:	5f 93       	push	r21
 682:	6f 93       	push	r22
 684:	7f 93       	push	r23
 686:	8f 93       	push	r24
 688:	9f 93       	push	r25
 68a:	af 93       	push	r26
 68c:	bf 93       	push	r27
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 692:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 696:	80 ff       	sbrs	r24, 0
 698:	17 c0       	rjmp	.+46     	; 0x6c8 <__vector_11+0x58>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 69a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 69e:	80 ff       	sbrs	r24, 0
 6a0:	13 c0       	rjmp	.+38     	; 0x6c8 <__vector_11+0x58>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6a2:	e2 ee       	ldi	r30, 0xE2	; 226
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	8e 7f       	andi	r24, 0xFE	; 254
 6aa:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6ac:	80 81       	ld	r24, Z
 6ae:	80 61       	ori	r24, 0x10	; 16
 6b0:	80 83       	st	Z, r24
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 6b2:	e8 ed       	ldi	r30, 0xD8	; 216
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	80 62       	ori	r24, 0x20	; 32
 6ba:	80 83       	st	Z, r24
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6bc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 6be:	85 e0       	ldi	r24, 0x05	; 5
 6c0:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 6c4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 6c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 6cc:	84 ff       	sbrs	r24, 4
 6ce:	30 c0       	rjmp	.+96     	; 0x730 <__vector_11+0xc0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 6d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 6d4:	84 ff       	sbrs	r24, 4
 6d6:	2c c0       	rjmp	.+88     	; 0x730 <__vector_11+0xc0>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6d8:	84 e0       	ldi	r24, 0x04	; 4
 6da:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6dc:	86 e0       	ldi	r24, 0x06	; 6
 6de:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6e0:	09 b4       	in	r0, 0x29	; 41
 6e2:	00 fe       	sbrs	r0, 0
 6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <__vector_11+0x70>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6e6:	e8 ed       	ldi	r30, 0xD8	; 216
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	8f 7d       	andi	r24, 0xDF	; 223
 6ee:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6f0:	e1 ee       	ldi	r30, 0xE1	; 225
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	8f 7e       	andi	r24, 0xEF	; 239
 6f8:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6fa:	e2 ee       	ldi	r30, 0xE2	; 226
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	8f 7e       	andi	r24, 0xEF	; 239
 702:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 704:	80 81       	ld	r24, Z
 706:	81 60       	ori	r24, 0x01	; 1
 708:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 70a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_Device_ConfigurationNumber>
 70e:	88 23       	and	r24, r24
 710:	21 f0       	breq	.+8      	; 0x71a <__vector_11+0xaa>
		  USB_DeviceState = DEVICE_STATE_Configured;
 712:	84 e0       	ldi	r24, 0x04	; 4
 714:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_DeviceState>
 718:	09 c0       	rjmp	.+18     	; 0x72c <__vector_11+0xbc>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 71a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 71e:	88 23       	and	r24, r24
 720:	14 f4       	brge	.+4      	; 0x726 <__vector_11+0xb6>
 722:	83 e0       	ldi	r24, 0x03	; 3
 724:	01 c0       	rjmp	.+2      	; 0x728 <__vector_11+0xb8>
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 72c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 730:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 734:	83 ff       	sbrs	r24, 3
 736:	31 c0       	rjmp	.+98     	; 0x79a <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 738:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
 73c:	83 ff       	sbrs	r24, 3
 73e:	2d c0       	rjmp	.+90     	; 0x79a <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 740:	e1 ee       	ldi	r30, 0xE1	; 225
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	87 7f       	andi	r24, 0xF7	; 247
 748:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 750:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 754:	80 81       	ld	r24, Z
 756:	8e 7f       	andi	r24, 0xFE	; 254
 758:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 75a:	e2 ee       	ldi	r30, 0xE2	; 226
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	8e 7f       	andi	r24, 0xFE	; 254
 762:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 764:	80 81       	ld	r24, Z
 766:	80 61       	ori	r24, 0x10	; 16
 768:	80 83       	st	Z, r24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 76a:	88 e0       	ldi	r24, 0x08	; 8
 76c:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 76e:	40 e0       	ldi	r20, 0x00	; 0
 770:	03 c0       	rjmp	.+6      	; 0x778 <__vector_11+0x108>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 772:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 778:	80 34       	cpi	r24, 0x40	; 64
 77a:	91 05       	cpc	r25, r1
 77c:	d0 f3       	brcs	.-12     	; 0x772 <__vector_11+0x102>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 77e:	42 95       	swap	r20
 780:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 782:	42 60       	ori	r20, 0x02	; 2
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	0e 94 90 02 	call	0x520	; 0x520 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 78c:	e0 ef       	ldi	r30, 0xF0	; 240
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	88 60       	ori	r24, 0x08	; 8
 794:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 796:	0e 94 e5 02 	call	0x5ca	; 0x5ca <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 79a:	ff 91       	pop	r31
 79c:	ef 91       	pop	r30
 79e:	bf 91       	pop	r27
 7a0:	af 91       	pop	r26
 7a2:	9f 91       	pop	r25
 7a4:	8f 91       	pop	r24
 7a6:	7f 91       	pop	r23
 7a8:	6f 91       	pop	r22
 7aa:	5f 91       	pop	r21
 7ac:	4f 91       	pop	r20
 7ae:	3f 91       	pop	r19
 7b0:	2f 91       	pop	r18
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 7bc:	1f 92       	push	r1
 7be:	0f 92       	push	r0
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	0f 92       	push	r0
 7c4:	11 24       	eor	r1, r1
 7c6:	ef 92       	push	r14
 7c8:	ff 92       	push	r15
 7ca:	1f 93       	push	r17
 7cc:	2f 93       	push	r18
 7ce:	3f 93       	push	r19
 7d0:	4f 93       	push	r20
 7d2:	5f 93       	push	r21
 7d4:	6f 93       	push	r22
 7d6:	7f 93       	push	r23
 7d8:	8f 93       	push	r24
 7da:	9f 93       	push	r25
 7dc:	af 93       	push	r26
 7de:	bf 93       	push	r27
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	ef 93       	push	r30
 7e6:	ff 93       	push	r31
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 7e8:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
 7ec:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7ee:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 7f2:	98 2f       	mov	r25, r24
 7f4:	91 70       	andi	r25, 0x01	; 1
 7f6:	80 fd       	sbrc	r24, 0
 7f8:	90 e8       	ldi	r25, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 7fa:	19 2f       	mov	r17, r25
 7fc:	1c 2b       	or	r17, r28
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7fe:	0f 2e       	mov	r0, r31
 800:	f9 ee       	ldi	r31, 0xE9	; 233
 802:	ef 2e       	mov	r14, r31
 804:	f1 2c       	mov	r15, r1
 806:	f0 2d       	mov	r31, r0
 808:	f7 01       	movw	r30, r14
 80a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 80c:	c0 ef       	ldi	r28, 0xF0	; 240
 80e:	d0 e0       	ldi	r29, 0x00	; 0
 810:	88 81       	ld	r24, Y
 812:	87 7f       	andi	r24, 0xF7	; 247
 814:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 816:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 818:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <USB_Device_ProcessControlRequest>
 81c:	f7 01       	movw	r30, r14
 81e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 820:	88 81       	ld	r24, Y
 822:	88 60       	ori	r24, 0x08	; 8
 824:	88 83       	st	Y, r24
 826:	c1 2f       	mov	r28, r17
 828:	cf 70       	andi	r28, 0x0F	; 15
 82a:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 82c:	ff 91       	pop	r31
 82e:	ef 91       	pop	r30
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	1f 91       	pop	r17
 84a:	ff 90       	pop	r15
 84c:	ef 90       	pop	r14
 84e:	0f 90       	pop	r0
 850:	0f be       	out	0x3f, r0	; 63
 852:	0f 90       	pop	r0
 854:	1f 90       	pop	r1
 856:	18 95       	reti

00000858 <delay_ms>:
		PORTB |= (1 << pin_SS);
	}
}

// This function does the delaying using Timer TC0 that is setup above this function.
void delay_ms(uint16_t milliseconds) {
 858:	ac 01       	movw	r20, r24
	uint16_t i;

	for (i = 0; i  <milliseconds; i++) {
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	07 c0       	rjmp	.+14     	; 0x86e <delay_ms+0x16>
		TCNT0 = 0;
 860:	16 bc       	out	0x26, r1	; 38
		while (!(TIFR0 &  (1 << OCF0A)));
 862:	a9 9b       	sbis	0x15, 1	; 21
 864:	fe cf       	rjmp	.-4      	; 0x862 <delay_ms+0xa>
		TIFR0 = (1 << OCF0A);
 866:	92 e0       	ldi	r25, 0x02	; 2
 868:	95 bb       	out	0x15, r25	; 21

// This function does the delaying using Timer TC0 that is setup above this function.
void delay_ms(uint16_t milliseconds) {
	uint16_t i;

	for (i = 0; i  <milliseconds; i++) {
 86a:	2f 5f       	subi	r18, 0xFF	; 255
 86c:	3f 4f       	sbci	r19, 0xFF	; 255
 86e:	24 17       	cp	r18, r20
 870:	35 07       	cpc	r19, r21
 872:	b0 f3       	brcs	.-20     	; 0x860 <delay_ms+0x8>
		TCNT0 = 0;
		while (!(TIFR0 &  (1 << OCF0A)));
		TIFR0 = (1 << OCF0A);
	}
}
 874:	08 95       	ret

00000876 <lightUp>:

// This function will light up LED "num" times in time [ms]
bool lightUp(uint8_t num, uint8_t GPIO_pin, uint16_t time) {
 876:	af 92       	push	r10
 878:	bf 92       	push	r11
 87a:	cf 92       	push	r12
 87c:	df 92       	push	r13
 87e:	ef 92       	push	r14
 880:	ff 92       	push	r15
 882:	0f 93       	push	r16
 884:	1f 93       	push	r17
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	b8 2e       	mov	r11, r24
 88c:	a6 2e       	mov	r10, r22
 88e:	ca 01       	movw	r24, r20
	uint16_t timer = time / num;
 890:	6b 2d       	mov	r22, r11
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__udivmodhi4>
 898:	7b 01       	movw	r14, r22

	for (int i = 0; i < num; i++) {
 89a:	00 e0       	ldi	r16, 0x00	; 0
 89c:	10 e0       	ldi	r17, 0x00	; 0
 89e:	1d c0       	rjmp	.+58     	; 0x8da <lightUp+0x64>
		PORTB |= (1 << GPIO_pin);
 8a0:	85 b1       	in	r24, 0x05	; 5
 8a2:	c1 e0       	ldi	r28, 0x01	; 1
 8a4:	d0 e0       	ldi	r29, 0x00	; 0
 8a6:	0a 2c       	mov	r0, r10
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <lightUp+0x38>
 8aa:	cc 0f       	add	r28, r28
 8ac:	dd 1f       	adc	r29, r29
 8ae:	0a 94       	dec	r0
 8b0:	e2 f7       	brpl	.-8      	; 0x8aa <lightUp+0x34>
 8b2:	8c 2b       	or	r24, r28
 8b4:	85 b9       	out	0x05, r24	; 5
		delay_ms(timer/2);
 8b6:	67 01       	movw	r12, r14
 8b8:	d6 94       	lsr	r13
 8ba:	c7 94       	ror	r12
 8bc:	c6 01       	movw	r24, r12
 8be:	0e 94 2c 04 	call	0x858	; 0x858 <delay_ms>
		PORTB &= ! (1 << GPIO_pin);
 8c2:	95 b1       	in	r25, 0x05	; 5
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	cd 2b       	or	r28, r29
 8c8:	09 f0       	breq	.+2      	; 0x8cc <lightUp+0x56>
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	89 23       	and	r24, r25
 8ce:	85 b9       	out	0x05, r24	; 5
		delay_ms(timer/2);
 8d0:	c6 01       	movw	r24, r12
 8d2:	0e 94 2c 04 	call	0x858	; 0x858 <delay_ms>

// This function will light up LED "num" times in time [ms]
bool lightUp(uint8_t num, uint8_t GPIO_pin, uint16_t time) {
	uint16_t timer = time / num;

	for (int i = 0; i < num; i++) {
 8d6:	0f 5f       	subi	r16, 0xFF	; 255
 8d8:	1f 4f       	sbci	r17, 0xFF	; 255
 8da:	8b 2d       	mov	r24, r11
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	08 17       	cp	r16, r24
 8e0:	19 07       	cpc	r17, r25
 8e2:	f4 f2       	brlt	.-68     	; 0x8a0 <lightUp+0x2a>
		delay_ms(timer/2);
		PORTB &= ! (1 << GPIO_pin);
		delay_ms(timer/2);
	}
	return true;
}
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	1f 91       	pop	r17
 8ec:	0f 91       	pop	r16
 8ee:	ff 90       	pop	r15
 8f0:	ef 90       	pop	r14
 8f2:	df 90       	pop	r13
 8f4:	cf 90       	pop	r12
 8f6:	bf 90       	pop	r11
 8f8:	af 90       	pop	r10
 8fa:	08 95       	ret

000008fc <process_voltage_data>:

// Process voltage data and prepare USB packet
void process_voltage_data(void) {
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
 904:	64 97       	sbiw	r28, 0x14	; 20
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
    voltage_packet_t packet;
    
    // Fill packet with data
    packet.timestamp = timestamp_counter;
 910:	19 82       	std	Y+1, r1	; 0x01
 912:	1a 82       	std	Y+2, r1	; 0x02
 914:	1b 82       	std	Y+3, r1	; 0x03
 916:	1c 82       	std	Y+4, r1	; 0x04
     for(uint8_t i = 0; i < 8; i++) {
         packet.probe_values[i] = SPI_transmit2(0xFF);  // Using existing SPI function
         packet.probe_values[i] = 2;
     } */

	uint16_t result = rand() % 1024;
 918:	0e 94 42 07 	call	0xe84	; 0xe84 <rand>
 91c:	93 78       	andi	r25, 0x83	; 131
 91e:	99 23       	and	r25, r25
 920:	1c f4       	brge	.+6      	; 0x928 <process_voltage_data+0x2c>
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	9c 6f       	ori	r25, 0xFC	; 252
 926:	01 96       	adiw	r24, 0x01	; 1
    uint8_t voltage = (result * 5.0) / 1023.0;
 928:	bc 01       	movw	r22, r24
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 d7 05 	call	0xbae	; 0xbae <__floatunsisf>
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	40 ea       	ldi	r20, 0xA0	; 160
 938:	50 e4       	ldi	r21, 0x40	; 64
 93a:	0e 94 65 06 	call	0xcca	; 0xcca <__mulsf3>
 93e:	20 e0       	ldi	r18, 0x00	; 0
 940:	30 ec       	ldi	r19, 0xC0	; 192
 942:	4f e7       	ldi	r20, 0x7F	; 127
 944:	54 e4       	ldi	r21, 0x44	; 68
 946:	0e 94 36 05 	call	0xa6c	; 0xa6c <__divsf3>
 94a:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fixunssfsi>

    // Fill all probe values with the same GPIO reading
    for(uint8_t i = 0; i < 8; i++) {
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	10 c0       	rjmp	.+32     	; 0x972 <process_voltage_data+0x76>
        packet.probe_values[i] = voltage;
 952:	e8 2f       	mov	r30, r24
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	32 96       	adiw	r30, 0x02	; 2
 958:	ee 0f       	add	r30, r30
 95a:	ff 1f       	adc	r31, r31
 95c:	21 e0       	ldi	r18, 0x01	; 1
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	2c 0f       	add	r18, r28
 962:	3d 1f       	adc	r19, r29
 964:	e2 0f       	add	r30, r18
 966:	f3 1f       	adc	r31, r19
 968:	26 2f       	mov	r18, r22
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	31 83       	std	Z+1, r19	; 0x01
 96e:	20 83       	st	Z, r18

	uint16_t result = rand() % 1024;
    uint8_t voltage = (result * 5.0) / 1023.0;

    // Fill all probe values with the same GPIO reading
    for(uint8_t i = 0; i < 8; i++) {
 970:	8f 5f       	subi	r24, 0xFF	; 255
 972:	88 30       	cpi	r24, 0x08	; 8
 974:	70 f3       	brcs	.-36     	; 0x952 <process_voltage_data+0x56>
        packet.probe_values[i] = voltage;
    }

    // Add to circular buffer if space available
    if (((buffer_head + 1) % BUFFER_SIZE) != buffer_tail) {
 976:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buffer_head>
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	90 78       	andi	r25, 0x80	; 128
 980:	99 23       	and	r25, r25
 982:	1c f4       	brge	.+6      	; 0x98a <process_voltage_data+0x8e>
 984:	01 97       	sbiw	r24, 0x01	; 1
 986:	9f 6f       	ori	r25, 0xFF	; 255
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <buffer_tail>
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	82 17       	cp	r24, r18
 992:	93 07       	cpc	r25, r19
 994:	c1 f0       	breq	.+48     	; 0x9c6 <process_voltage_data+0xca>
        memcpy((void*)&circular_buffer[buffer_head], &packet, sizeof(voltage_packet_t)); //hopefully this is good enough
 996:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <buffer_head>
 99a:	b0 e0       	ldi	r27, 0x00	; 0
 99c:	a7 5f       	subi	r26, 0xF7	; 247
 99e:	be 4f       	sbci	r27, 0xFE	; 254
 9a0:	84 e1       	ldi	r24, 0x14	; 20
 9a2:	fe 01       	movw	r30, r28
 9a4:	31 96       	adiw	r30, 0x01	; 1
 9a6:	01 90       	ld	r0, Z+
 9a8:	0d 92       	st	X+, r0
 9aa:	8a 95       	dec	r24
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <process_voltage_data+0xaa>
        buffer_head = (buffer_head + 1) % BUFFER_SIZE;
 9ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buffer_head>
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	90 78       	andi	r25, 0x80	; 128
 9b8:	99 23       	and	r25, r25
 9ba:	1c f4       	brge	.+6      	; 0x9c2 <process_voltage_data+0xc6>
 9bc:	01 97       	sbiw	r24, 0x01	; 1
 9be:	9f 6f       	ori	r25, 0xFF	; 255
 9c0:	01 96       	adiw	r24, 0x01	; 1
 9c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buffer_head>
    }
}
 9c6:	64 96       	adiw	r28, 0x14	; 20
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	08 95       	ret

000009d8 <USB_Task>:

// Main USB data transmission function
void USB_Task(void) {
    if (device_state == DEVICE_STATE_CONFIGURED && transfer_complete) {
 9d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 9dc:	85 30       	cpi	r24, 0x05	; 5
 9de:	61 f5       	brne	.+88     	; 0xa38 <USB_Task+0x60>
 9e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <transfer_complete>
 9e4:	88 23       	and	r24, r24
 9e6:	41 f1       	breq	.+80     	; 0xa38 <USB_Task+0x60>
        if (buffer_head != buffer_tail) {
 9e8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <buffer_head>
 9ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <buffer_tail>
 9f0:	98 17       	cp	r25, r24
 9f2:	11 f1       	breq	.+68     	; 0xa38 <USB_Task+0x60>
            // Copy data from circular buffer to USB endpoint buffer
            memcpy(endpoint_buffer, (void*)&circular_buffer[buffer_tail], sizeof(voltage_packet_t));
 9f4:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <buffer_tail>
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	e7 5f       	subi	r30, 0xF7	; 247
 9fc:	fe 4f       	sbci	r31, 0xFE	; 254
 9fe:	84 e1       	ldi	r24, 0x14	; 20
 a00:	a9 e0       	ldi	r26, 0x09	; 9
 a02:	b2 e0       	ldi	r27, 0x02	; 2
 a04:	01 90       	ld	r0, Z+
 a06:	0d 92       	st	X+, r0
 a08:	8a 95       	dec	r24
 a0a:	e1 f7       	brne	.-8      	; 0xa04 <USB_Task+0x2c>
            buffer_tail = (buffer_tail + 1) % BUFFER_SIZE;
 a0c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <buffer_tail>
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	01 96       	adiw	r24, 0x01	; 1
 a14:	90 78       	andi	r25, 0x80	; 128
 a16:	99 23       	and	r25, r25
 a18:	1c f4       	brge	.+6      	; 0xa20 <USB_Task+0x48>
 a1a:	01 97       	sbiw	r24, 0x01	; 1
 a1c:	9f 6f       	ori	r25, 0xFF	; 255
 a1e:	01 96       	adiw	r24, 0x01	; 1
 a20:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <buffer_tail>
            
            // Initiate USB bulk transfer
            UENUM = BULK_IN_EPADDR;
 a24:	81 e8       	ldi	r24, 0x81	; 129
 a26:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
            UEINTX &= ~(1 << TXINI);
 a2a:	e8 ee       	ldi	r30, 0xE8	; 232
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	80 81       	ld	r24, Z
 a30:	8e 7f       	andi	r24, 0xFE	; 254
 a32:	80 83       	st	Z, r24
            transfer_complete = false;
 a34:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <transfer_complete>
 a38:	08 95       	ret

00000a3a <main>:
        }
    }
}

int main(void) {
	USB_Init();                           // Initialize USB subsystem
 a3a:	0e 94 27 03 	call	0x64e	; 0x64e <USB_Init>
	sei();                                // Enable global interrupts
 a3e:	78 94       	sei
		/*SPI_select();                    // Select the SPI slave
		SPI_selection(true);
		uint8_t received = SPI_transmit2(0x55); // Transmit a byte and receive data
		SPI_selection(false);                  // Deselect the SPI slave */
		
		if (USB_DeviceState == DEVICE_STATE_CONFIGURED) {
 a40:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_DeviceState>
 a44:	85 30       	cpi	r24, 0x05	; 5
 a46:	59 f4       	brne	.+22     	; 0xa5e <main+0x24>
			/*pin_SPI_PORT &= !(1 << pin_SS);
			SPDR = 0xAB;
			while (!(SPSR & (1 << SPIF)));
			uint8_t received = SPDR;
			lightUp(received, pin_LED_GPIO, 1000); If using SPI*/
			lightUp(2, pin_LED_GPIO, 1000);
 a48:	48 ee       	ldi	r20, 0xE8	; 232
 a4a:	53 e0       	ldi	r21, 0x03	; 3
 a4c:	65 e0       	ldi	r22, 0x05	; 5
 a4e:	82 e0       	ldi	r24, 0x02	; 2
 a50:	0e 94 3b 04 	call	0x876	; 0x876 <lightUp>
			process_voltage_data();
 a54:	0e 94 7e 04 	call	0x8fc	; 0x8fc <process_voltage_data>
			USB_Task();
 a58:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <USB_Task>
 a5c:	f1 cf       	rjmp	.-30     	; 0xa40 <main+0x6>
		}
		
		else {
			lightUp(10, pin_LED_GPIO, 1000);
 a5e:	48 ee       	ldi	r20, 0xE8	; 232
 a60:	53 e0       	ldi	r21, 0x03	; 3
 a62:	65 e0       	ldi	r22, 0x05	; 5
 a64:	8a e0       	ldi	r24, 0x0A	; 10
 a66:	0e 94 3b 04 	call	0x876	; 0x876 <lightUp>
 a6a:	ea cf       	rjmp	.-44     	; 0xa40 <main+0x6>

00000a6c <__divsf3>:
 a6c:	0e 94 4a 05 	call	0xa94	; 0xa94 <__divsf3x>
 a70:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_round>
 a74:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_pscB>
 a78:	58 f0       	brcs	.+22     	; 0xa90 <__divsf3+0x24>
 a7a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscA>
 a7e:	40 f0       	brcs	.+16     	; 0xa90 <__divsf3+0x24>
 a80:	29 f4       	brne	.+10     	; 0xa8c <__divsf3+0x20>
 a82:	5f 3f       	cpi	r21, 0xFF	; 255
 a84:	29 f0       	breq	.+10     	; 0xa90 <__divsf3+0x24>
 a86:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_inf>
 a8a:	51 11       	cpse	r21, r1
 a8c:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_szero>
 a90:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_nan>

00000a94 <__divsf3x>:
 a94:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_split3>
 a98:	68 f3       	brcs	.-38     	; 0xa74 <__divsf3+0x8>

00000a9a <__divsf3_pse>:
 a9a:	99 23       	and	r25, r25
 a9c:	b1 f3       	breq	.-20     	; 0xa8a <__divsf3+0x1e>
 a9e:	55 23       	and	r21, r21
 aa0:	91 f3       	breq	.-28     	; 0xa86 <__divsf3+0x1a>
 aa2:	95 1b       	sub	r25, r21
 aa4:	55 0b       	sbc	r21, r21
 aa6:	bb 27       	eor	r27, r27
 aa8:	aa 27       	eor	r26, r26
 aaa:	62 17       	cp	r22, r18
 aac:	73 07       	cpc	r23, r19
 aae:	84 07       	cpc	r24, r20
 ab0:	38 f0       	brcs	.+14     	; 0xac0 <__divsf3_pse+0x26>
 ab2:	9f 5f       	subi	r25, 0xFF	; 255
 ab4:	5f 4f       	sbci	r21, 0xFF	; 255
 ab6:	22 0f       	add	r18, r18
 ab8:	33 1f       	adc	r19, r19
 aba:	44 1f       	adc	r20, r20
 abc:	aa 1f       	adc	r26, r26
 abe:	a9 f3       	breq	.-22     	; 0xaaa <__divsf3_pse+0x10>
 ac0:	35 d0       	rcall	.+106    	; 0xb2c <__divsf3_pse+0x92>
 ac2:	0e 2e       	mov	r0, r30
 ac4:	3a f0       	brmi	.+14     	; 0xad4 <__divsf3_pse+0x3a>
 ac6:	e0 e8       	ldi	r30, 0x80	; 128
 ac8:	32 d0       	rcall	.+100    	; 0xb2e <__divsf3_pse+0x94>
 aca:	91 50       	subi	r25, 0x01	; 1
 acc:	50 40       	sbci	r21, 0x00	; 0
 ace:	e6 95       	lsr	r30
 ad0:	00 1c       	adc	r0, r0
 ad2:	ca f7       	brpl	.-14     	; 0xac6 <__divsf3_pse+0x2c>
 ad4:	2b d0       	rcall	.+86     	; 0xb2c <__divsf3_pse+0x92>
 ad6:	fe 2f       	mov	r31, r30
 ad8:	29 d0       	rcall	.+82     	; 0xb2c <__divsf3_pse+0x92>
 ada:	66 0f       	add	r22, r22
 adc:	77 1f       	adc	r23, r23
 ade:	88 1f       	adc	r24, r24
 ae0:	bb 1f       	adc	r27, r27
 ae2:	26 17       	cp	r18, r22
 ae4:	37 07       	cpc	r19, r23
 ae6:	48 07       	cpc	r20, r24
 ae8:	ab 07       	cpc	r26, r27
 aea:	b0 e8       	ldi	r27, 0x80	; 128
 aec:	09 f0       	breq	.+2      	; 0xaf0 <__divsf3_pse+0x56>
 aee:	bb 0b       	sbc	r27, r27
 af0:	80 2d       	mov	r24, r0
 af2:	bf 01       	movw	r22, r30
 af4:	ff 27       	eor	r31, r31
 af6:	93 58       	subi	r25, 0x83	; 131
 af8:	5f 4f       	sbci	r21, 0xFF	; 255
 afa:	3a f0       	brmi	.+14     	; 0xb0a <__divsf3_pse+0x70>
 afc:	9e 3f       	cpi	r25, 0xFE	; 254
 afe:	51 05       	cpc	r21, r1
 b00:	78 f0       	brcs	.+30     	; 0xb20 <__divsf3_pse+0x86>
 b02:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_inf>
 b06:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_szero>
 b0a:	5f 3f       	cpi	r21, 0xFF	; 255
 b0c:	e4 f3       	brlt	.-8      	; 0xb06 <__divsf3_pse+0x6c>
 b0e:	98 3e       	cpi	r25, 0xE8	; 232
 b10:	d4 f3       	brlt	.-12     	; 0xb06 <__divsf3_pse+0x6c>
 b12:	86 95       	lsr	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	b7 95       	ror	r27
 b1a:	f7 95       	ror	r31
 b1c:	9f 5f       	subi	r25, 0xFF	; 255
 b1e:	c9 f7       	brne	.-14     	; 0xb12 <__divsf3_pse+0x78>
 b20:	88 0f       	add	r24, r24
 b22:	91 1d       	adc	r25, r1
 b24:	96 95       	lsr	r25
 b26:	87 95       	ror	r24
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret
 b2c:	e1 e0       	ldi	r30, 0x01	; 1
 b2e:	66 0f       	add	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	bb 1f       	adc	r27, r27
 b36:	62 17       	cp	r22, r18
 b38:	73 07       	cpc	r23, r19
 b3a:	84 07       	cpc	r24, r20
 b3c:	ba 07       	cpc	r27, r26
 b3e:	20 f0       	brcs	.+8      	; 0xb48 <__divsf3_pse+0xae>
 b40:	62 1b       	sub	r22, r18
 b42:	73 0b       	sbc	r23, r19
 b44:	84 0b       	sbc	r24, r20
 b46:	ba 0b       	sbc	r27, r26
 b48:	ee 1f       	adc	r30, r30
 b4a:	88 f7       	brcc	.-30     	; 0xb2e <__divsf3_pse+0x94>
 b4c:	e0 95       	com	r30
 b4e:	08 95       	ret

00000b50 <__fixunssfsi>:
 b50:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_splitA>
 b54:	88 f0       	brcs	.+34     	; 0xb78 <__fixunssfsi+0x28>
 b56:	9f 57       	subi	r25, 0x7F	; 127
 b58:	98 f0       	brcs	.+38     	; 0xb80 <__fixunssfsi+0x30>
 b5a:	b9 2f       	mov	r27, r25
 b5c:	99 27       	eor	r25, r25
 b5e:	b7 51       	subi	r27, 0x17	; 23
 b60:	b0 f0       	brcs	.+44     	; 0xb8e <__fixunssfsi+0x3e>
 b62:	e1 f0       	breq	.+56     	; 0xb9c <__fixunssfsi+0x4c>
 b64:	66 0f       	add	r22, r22
 b66:	77 1f       	adc	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	1a f0       	brmi	.+6      	; 0xb74 <__fixunssfsi+0x24>
 b6e:	ba 95       	dec	r27
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__fixunssfsi+0x14>
 b72:	14 c0       	rjmp	.+40     	; 0xb9c <__fixunssfsi+0x4c>
 b74:	b1 30       	cpi	r27, 0x01	; 1
 b76:	91 f0       	breq	.+36     	; 0xb9c <__fixunssfsi+0x4c>
 b78:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_zero>
 b7c:	b1 e0       	ldi	r27, 0x01	; 1
 b7e:	08 95       	ret
 b80:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_zero>
 b84:	67 2f       	mov	r22, r23
 b86:	78 2f       	mov	r23, r24
 b88:	88 27       	eor	r24, r24
 b8a:	b8 5f       	subi	r27, 0xF8	; 248
 b8c:	39 f0       	breq	.+14     	; 0xb9c <__fixunssfsi+0x4c>
 b8e:	b9 3f       	cpi	r27, 0xF9	; 249
 b90:	cc f3       	brlt	.-14     	; 0xb84 <__fixunssfsi+0x34>
 b92:	86 95       	lsr	r24
 b94:	77 95       	ror	r23
 b96:	67 95       	ror	r22
 b98:	b3 95       	inc	r27
 b9a:	d9 f7       	brne	.-10     	; 0xb92 <__fixunssfsi+0x42>
 b9c:	3e f4       	brtc	.+14     	; 0xbac <__fixunssfsi+0x5c>
 b9e:	90 95       	com	r25
 ba0:	80 95       	com	r24
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	08 95       	ret

00000bae <__floatunsisf>:
 bae:	e8 94       	clt
 bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <__floatsisf+0x12>

00000bb2 <__floatsisf>:
 bb2:	97 fb       	bst	r25, 7
 bb4:	3e f4       	brtc	.+14     	; 0xbc4 <__floatsisf+0x12>
 bb6:	90 95       	com	r25
 bb8:	80 95       	com	r24
 bba:	70 95       	com	r23
 bbc:	61 95       	neg	r22
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255
 bc0:	8f 4f       	sbci	r24, 0xFF	; 255
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	99 23       	and	r25, r25
 bc6:	a9 f0       	breq	.+42     	; 0xbf2 <__floatsisf+0x40>
 bc8:	f9 2f       	mov	r31, r25
 bca:	96 e9       	ldi	r25, 0x96	; 150
 bcc:	bb 27       	eor	r27, r27
 bce:	93 95       	inc	r25
 bd0:	f6 95       	lsr	r31
 bd2:	87 95       	ror	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	b7 95       	ror	r27
 bda:	f1 11       	cpse	r31, r1
 bdc:	f8 cf       	rjmp	.-16     	; 0xbce <__floatsisf+0x1c>
 bde:	fa f4       	brpl	.+62     	; 0xc1e <__floatsisf+0x6c>
 be0:	bb 0f       	add	r27, r27
 be2:	11 f4       	brne	.+4      	; 0xbe8 <__floatsisf+0x36>
 be4:	60 ff       	sbrs	r22, 0
 be6:	1b c0       	rjmp	.+54     	; 0xc1e <__floatsisf+0x6c>
 be8:	6f 5f       	subi	r22, 0xFF	; 255
 bea:	7f 4f       	sbci	r23, 0xFF	; 255
 bec:	8f 4f       	sbci	r24, 0xFF	; 255
 bee:	9f 4f       	sbci	r25, 0xFF	; 255
 bf0:	16 c0       	rjmp	.+44     	; 0xc1e <__floatsisf+0x6c>
 bf2:	88 23       	and	r24, r24
 bf4:	11 f0       	breq	.+4      	; 0xbfa <__floatsisf+0x48>
 bf6:	96 e9       	ldi	r25, 0x96	; 150
 bf8:	11 c0       	rjmp	.+34     	; 0xc1c <__floatsisf+0x6a>
 bfa:	77 23       	and	r23, r23
 bfc:	21 f0       	breq	.+8      	; 0xc06 <__floatsisf+0x54>
 bfe:	9e e8       	ldi	r25, 0x8E	; 142
 c00:	87 2f       	mov	r24, r23
 c02:	76 2f       	mov	r23, r22
 c04:	05 c0       	rjmp	.+10     	; 0xc10 <__floatsisf+0x5e>
 c06:	66 23       	and	r22, r22
 c08:	71 f0       	breq	.+28     	; 0xc26 <__floatsisf+0x74>
 c0a:	96 e8       	ldi	r25, 0x86	; 134
 c0c:	86 2f       	mov	r24, r22
 c0e:	70 e0       	ldi	r23, 0x00	; 0
 c10:	60 e0       	ldi	r22, 0x00	; 0
 c12:	2a f0       	brmi	.+10     	; 0xc1e <__floatsisf+0x6c>
 c14:	9a 95       	dec	r25
 c16:	66 0f       	add	r22, r22
 c18:	77 1f       	adc	r23, r23
 c1a:	88 1f       	adc	r24, r24
 c1c:	da f7       	brpl	.-10     	; 0xc14 <__floatsisf+0x62>
 c1e:	88 0f       	add	r24, r24
 c20:	96 95       	lsr	r25
 c22:	87 95       	ror	r24
 c24:	97 f9       	bld	r25, 7
 c26:	08 95       	ret

00000c28 <__fp_inf>:
 c28:	97 f9       	bld	r25, 7
 c2a:	9f 67       	ori	r25, 0x7F	; 127
 c2c:	80 e8       	ldi	r24, 0x80	; 128
 c2e:	70 e0       	ldi	r23, 0x00	; 0
 c30:	60 e0       	ldi	r22, 0x00	; 0
 c32:	08 95       	ret

00000c34 <__fp_nan>:
 c34:	9f ef       	ldi	r25, 0xFF	; 255
 c36:	80 ec       	ldi	r24, 0xC0	; 192
 c38:	08 95       	ret

00000c3a <__fp_pscA>:
 c3a:	00 24       	eor	r0, r0
 c3c:	0a 94       	dec	r0
 c3e:	16 16       	cp	r1, r22
 c40:	17 06       	cpc	r1, r23
 c42:	18 06       	cpc	r1, r24
 c44:	09 06       	cpc	r0, r25
 c46:	08 95       	ret

00000c48 <__fp_pscB>:
 c48:	00 24       	eor	r0, r0
 c4a:	0a 94       	dec	r0
 c4c:	12 16       	cp	r1, r18
 c4e:	13 06       	cpc	r1, r19
 c50:	14 06       	cpc	r1, r20
 c52:	05 06       	cpc	r0, r21
 c54:	08 95       	ret

00000c56 <__fp_round>:
 c56:	09 2e       	mov	r0, r25
 c58:	03 94       	inc	r0
 c5a:	00 0c       	add	r0, r0
 c5c:	11 f4       	brne	.+4      	; 0xc62 <__fp_round+0xc>
 c5e:	88 23       	and	r24, r24
 c60:	52 f0       	brmi	.+20     	; 0xc76 <__fp_round+0x20>
 c62:	bb 0f       	add	r27, r27
 c64:	40 f4       	brcc	.+16     	; 0xc76 <__fp_round+0x20>
 c66:	bf 2b       	or	r27, r31
 c68:	11 f4       	brne	.+4      	; 0xc6e <__fp_round+0x18>
 c6a:	60 ff       	sbrs	r22, 0
 c6c:	04 c0       	rjmp	.+8      	; 0xc76 <__fp_round+0x20>
 c6e:	6f 5f       	subi	r22, 0xFF	; 255
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	08 95       	ret

00000c78 <__fp_split3>:
 c78:	57 fd       	sbrc	r21, 7
 c7a:	90 58       	subi	r25, 0x80	; 128
 c7c:	44 0f       	add	r20, r20
 c7e:	55 1f       	adc	r21, r21
 c80:	59 f0       	breq	.+22     	; 0xc98 <__fp_splitA+0x10>
 c82:	5f 3f       	cpi	r21, 0xFF	; 255
 c84:	71 f0       	breq	.+28     	; 0xca2 <__fp_splitA+0x1a>
 c86:	47 95       	ror	r20

00000c88 <__fp_splitA>:
 c88:	88 0f       	add	r24, r24
 c8a:	97 fb       	bst	r25, 7
 c8c:	99 1f       	adc	r25, r25
 c8e:	61 f0       	breq	.+24     	; 0xca8 <__fp_splitA+0x20>
 c90:	9f 3f       	cpi	r25, 0xFF	; 255
 c92:	79 f0       	breq	.+30     	; 0xcb2 <__fp_splitA+0x2a>
 c94:	87 95       	ror	r24
 c96:	08 95       	ret
 c98:	12 16       	cp	r1, r18
 c9a:	13 06       	cpc	r1, r19
 c9c:	14 06       	cpc	r1, r20
 c9e:	55 1f       	adc	r21, r21
 ca0:	f2 cf       	rjmp	.-28     	; 0xc86 <__fp_split3+0xe>
 ca2:	46 95       	lsr	r20
 ca4:	f1 df       	rcall	.-30     	; 0xc88 <__fp_splitA>
 ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <__fp_splitA+0x30>
 ca8:	16 16       	cp	r1, r22
 caa:	17 06       	cpc	r1, r23
 cac:	18 06       	cpc	r1, r24
 cae:	99 1f       	adc	r25, r25
 cb0:	f1 cf       	rjmp	.-30     	; 0xc94 <__fp_splitA+0xc>
 cb2:	86 95       	lsr	r24
 cb4:	71 05       	cpc	r23, r1
 cb6:	61 05       	cpc	r22, r1
 cb8:	08 94       	sec
 cba:	08 95       	ret

00000cbc <__fp_zero>:
 cbc:	e8 94       	clt

00000cbe <__fp_szero>:
 cbe:	bb 27       	eor	r27, r27
 cc0:	66 27       	eor	r22, r22
 cc2:	77 27       	eor	r23, r23
 cc4:	cb 01       	movw	r24, r22
 cc6:	97 f9       	bld	r25, 7
 cc8:	08 95       	ret

00000cca <__mulsf3>:
 cca:	0e 94 77 06 	call	0xcee	; 0xcee <__mulsf3x>
 cce:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_round>
 cd2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscA>
 cd6:	38 f0       	brcs	.+14     	; 0xce6 <__mulsf3+0x1c>
 cd8:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_pscB>
 cdc:	20 f0       	brcs	.+8      	; 0xce6 <__mulsf3+0x1c>
 cde:	95 23       	and	r25, r21
 ce0:	11 f0       	breq	.+4      	; 0xce6 <__mulsf3+0x1c>
 ce2:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_inf>
 ce6:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_nan>
 cea:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_szero>

00000cee <__mulsf3x>:
 cee:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_split3>
 cf2:	78 f3       	brcs	.-34     	; 0xcd2 <__mulsf3+0x8>

00000cf4 <__mulsf3_pse>:
 cf4:	99 23       	and	r25, r25
 cf6:	c9 f3       	breq	.-14     	; 0xcea <__mulsf3+0x20>
 cf8:	55 23       	and	r21, r21
 cfa:	b9 f3       	breq	.-18     	; 0xcea <__mulsf3+0x20>
 cfc:	95 0f       	add	r25, r21
 cfe:	50 e0       	ldi	r21, 0x00	; 0
 d00:	55 1f       	adc	r21, r21
 d02:	aa 27       	eor	r26, r26
 d04:	ee 27       	eor	r30, r30
 d06:	ff 27       	eor	r31, r31
 d08:	bb 27       	eor	r27, r27
 d0a:	00 24       	eor	r0, r0
 d0c:	08 94       	sec
 d0e:	67 95       	ror	r22
 d10:	20 f4       	brcc	.+8      	; 0xd1a <__mulsf3_pse+0x26>
 d12:	e2 0f       	add	r30, r18
 d14:	f3 1f       	adc	r31, r19
 d16:	b4 1f       	adc	r27, r20
 d18:	0a 1e       	adc	r0, r26
 d1a:	22 0f       	add	r18, r18
 d1c:	33 1f       	adc	r19, r19
 d1e:	44 1f       	adc	r20, r20
 d20:	aa 1f       	adc	r26, r26
 d22:	66 95       	lsr	r22
 d24:	a9 f7       	brne	.-22     	; 0xd10 <__mulsf3_pse+0x1c>
 d26:	77 95       	ror	r23
 d28:	30 f4       	brcc	.+12     	; 0xd36 <__mulsf3_pse+0x42>
 d2a:	f3 0f       	add	r31, r19
 d2c:	b4 1f       	adc	r27, r20
 d2e:	0a 1e       	adc	r0, r26
 d30:	12 1e       	adc	r1, r18
 d32:	08 f4       	brcc	.+2      	; 0xd36 <__mulsf3_pse+0x42>
 d34:	63 95       	inc	r22
 d36:	33 0f       	add	r19, r19
 d38:	44 1f       	adc	r20, r20
 d3a:	aa 1f       	adc	r26, r26
 d3c:	22 1f       	adc	r18, r18
 d3e:	76 95       	lsr	r23
 d40:	99 f7       	brne	.-26     	; 0xd28 <__mulsf3_pse+0x34>
 d42:	87 95       	ror	r24
 d44:	20 f4       	brcc	.+8      	; 0xd4e <__mulsf3_pse+0x5a>
 d46:	b4 0f       	add	r27, r20
 d48:	0a 1e       	adc	r0, r26
 d4a:	12 1e       	adc	r1, r18
 d4c:	63 1f       	adc	r22, r19
 d4e:	44 0f       	add	r20, r20
 d50:	aa 1f       	adc	r26, r26
 d52:	22 1f       	adc	r18, r18
 d54:	33 1f       	adc	r19, r19
 d56:	86 95       	lsr	r24
 d58:	a9 f7       	brne	.-22     	; 0xd44 <__mulsf3_pse+0x50>
 d5a:	86 2f       	mov	r24, r22
 d5c:	71 2d       	mov	r23, r1
 d5e:	60 2d       	mov	r22, r0
 d60:	11 24       	eor	r1, r1
 d62:	9f 57       	subi	r25, 0x7F	; 127
 d64:	50 40       	sbci	r21, 0x00	; 0
 d66:	9a f0       	brmi	.+38     	; 0xd8e <__mulsf3_pse+0x9a>
 d68:	f1 f0       	breq	.+60     	; 0xda6 <__mulsf3_pse+0xb2>
 d6a:	88 23       	and	r24, r24
 d6c:	4a f0       	brmi	.+18     	; 0xd80 <__mulsf3_pse+0x8c>
 d6e:	ee 0f       	add	r30, r30
 d70:	ff 1f       	adc	r31, r31
 d72:	bb 1f       	adc	r27, r27
 d74:	66 1f       	adc	r22, r22
 d76:	77 1f       	adc	r23, r23
 d78:	88 1f       	adc	r24, r24
 d7a:	91 50       	subi	r25, 0x01	; 1
 d7c:	50 40       	sbci	r21, 0x00	; 0
 d7e:	a9 f7       	brne	.-22     	; 0xd6a <__mulsf3_pse+0x76>
 d80:	9e 3f       	cpi	r25, 0xFE	; 254
 d82:	51 05       	cpc	r21, r1
 d84:	80 f0       	brcs	.+32     	; 0xda6 <__mulsf3_pse+0xb2>
 d86:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_inf>
 d8a:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_szero>
 d8e:	5f 3f       	cpi	r21, 0xFF	; 255
 d90:	e4 f3       	brlt	.-8      	; 0xd8a <__mulsf3_pse+0x96>
 d92:	98 3e       	cpi	r25, 0xE8	; 232
 d94:	d4 f3       	brlt	.-12     	; 0xd8a <__mulsf3_pse+0x96>
 d96:	86 95       	lsr	r24
 d98:	77 95       	ror	r23
 d9a:	67 95       	ror	r22
 d9c:	b7 95       	ror	r27
 d9e:	f7 95       	ror	r31
 da0:	e7 95       	ror	r30
 da2:	9f 5f       	subi	r25, 0xFF	; 255
 da4:	c1 f7       	brne	.-16     	; 0xd96 <__mulsf3_pse+0xa2>
 da6:	fe 2b       	or	r31, r30
 da8:	88 0f       	add	r24, r24
 daa:	91 1d       	adc	r25, r1
 dac:	96 95       	lsr	r25
 dae:	87 95       	ror	r24
 db0:	97 f9       	bld	r25, 7
 db2:	08 95       	ret

00000db4 <__udivmodhi4>:
 db4:	aa 1b       	sub	r26, r26
 db6:	bb 1b       	sub	r27, r27
 db8:	51 e1       	ldi	r21, 0x11	; 17
 dba:	07 c0       	rjmp	.+14     	; 0xdca <__udivmodhi4_ep>

00000dbc <__udivmodhi4_loop>:
 dbc:	aa 1f       	adc	r26, r26
 dbe:	bb 1f       	adc	r27, r27
 dc0:	a6 17       	cp	r26, r22
 dc2:	b7 07       	cpc	r27, r23
 dc4:	10 f0       	brcs	.+4      	; 0xdca <__udivmodhi4_ep>
 dc6:	a6 1b       	sub	r26, r22
 dc8:	b7 0b       	sbc	r27, r23

00000dca <__udivmodhi4_ep>:
 dca:	88 1f       	adc	r24, r24
 dcc:	99 1f       	adc	r25, r25
 dce:	5a 95       	dec	r21
 dd0:	a9 f7       	brne	.-22     	; 0xdbc <__udivmodhi4_loop>
 dd2:	80 95       	com	r24
 dd4:	90 95       	com	r25
 dd6:	bc 01       	movw	r22, r24
 dd8:	cd 01       	movw	r24, r26
 dda:	08 95       	ret

00000ddc <__tablejump2__>:
 ddc:	ee 0f       	add	r30, r30
 dde:	ff 1f       	adc	r31, r31
 de0:	05 90       	lpm	r0, Z+
 de2:	f4 91       	lpm	r31, Z
 de4:	e0 2d       	mov	r30, r0
 de6:	09 94       	ijmp

00000de8 <do_rand>:
 de8:	8f 92       	push	r8
 dea:	9f 92       	push	r9
 dec:	af 92       	push	r10
 dee:	bf 92       	push	r11
 df0:	cf 92       	push	r12
 df2:	df 92       	push	r13
 df4:	ef 92       	push	r14
 df6:	ff 92       	push	r15
 df8:	cf 93       	push	r28
 dfa:	df 93       	push	r29
 dfc:	ec 01       	movw	r28, r24
 dfe:	68 81       	ld	r22, Y
 e00:	79 81       	ldd	r23, Y+1	; 0x01
 e02:	8a 81       	ldd	r24, Y+2	; 0x02
 e04:	9b 81       	ldd	r25, Y+3	; 0x03
 e06:	61 15       	cp	r22, r1
 e08:	71 05       	cpc	r23, r1
 e0a:	81 05       	cpc	r24, r1
 e0c:	91 05       	cpc	r25, r1
 e0e:	21 f4       	brne	.+8      	; 0xe18 <do_rand+0x30>
 e10:	64 e2       	ldi	r22, 0x24	; 36
 e12:	79 ed       	ldi	r23, 0xD9	; 217
 e14:	8b e5       	ldi	r24, 0x5B	; 91
 e16:	97 e0       	ldi	r25, 0x07	; 7
 e18:	2d e1       	ldi	r18, 0x1D	; 29
 e1a:	33 ef       	ldi	r19, 0xF3	; 243
 e1c:	41 e0       	ldi	r20, 0x01	; 1
 e1e:	50 e0       	ldi	r21, 0x00	; 0
 e20:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divmodsi4>
 e24:	49 01       	movw	r8, r18
 e26:	5a 01       	movw	r10, r20
 e28:	27 ea       	ldi	r18, 0xA7	; 167
 e2a:	31 e4       	ldi	r19, 0x41	; 65
 e2c:	40 e0       	ldi	r20, 0x00	; 0
 e2e:	50 e0       	ldi	r21, 0x00	; 0
 e30:	0e 94 52 07 	call	0xea4	; 0xea4 <__mulsi3>
 e34:	6b 01       	movw	r12, r22
 e36:	7c 01       	movw	r14, r24
 e38:	2c ee       	ldi	r18, 0xEC	; 236
 e3a:	34 ef       	ldi	r19, 0xF4	; 244
 e3c:	4f ef       	ldi	r20, 0xFF	; 255
 e3e:	5f ef       	ldi	r21, 0xFF	; 255
 e40:	c5 01       	movw	r24, r10
 e42:	b4 01       	movw	r22, r8
 e44:	0e 94 52 07 	call	0xea4	; 0xea4 <__mulsi3>
 e48:	dc 01       	movw	r26, r24
 e4a:	cb 01       	movw	r24, r22
 e4c:	8c 0d       	add	r24, r12
 e4e:	9d 1d       	adc	r25, r13
 e50:	ae 1d       	adc	r26, r14
 e52:	bf 1d       	adc	r27, r15
 e54:	b7 ff       	sbrs	r27, 7
 e56:	03 c0       	rjmp	.+6      	; 0xe5e <do_rand+0x76>
 e58:	01 97       	sbiw	r24, 0x01	; 1
 e5a:	a1 09       	sbc	r26, r1
 e5c:	b0 48       	sbci	r27, 0x80	; 128
 e5e:	88 83       	st	Y, r24
 e60:	99 83       	std	Y+1, r25	; 0x01
 e62:	aa 83       	std	Y+2, r26	; 0x02
 e64:	bb 83       	std	Y+3, r27	; 0x03
 e66:	9f 77       	andi	r25, 0x7F	; 127
 e68:	df 91       	pop	r29
 e6a:	cf 91       	pop	r28
 e6c:	ff 90       	pop	r15
 e6e:	ef 90       	pop	r14
 e70:	df 90       	pop	r13
 e72:	cf 90       	pop	r12
 e74:	bf 90       	pop	r11
 e76:	af 90       	pop	r10
 e78:	9f 90       	pop	r9
 e7a:	8f 90       	pop	r8
 e7c:	08 95       	ret

00000e7e <rand_r>:
 e7e:	0e 94 f4 06 	call	0xde8	; 0xde8 <do_rand>
 e82:	08 95       	ret

00000e84 <rand>:
 e84:	80 e0       	ldi	r24, 0x00	; 0
 e86:	91 e0       	ldi	r25, 0x01	; 1
 e88:	0e 94 f4 06 	call	0xde8	; 0xde8 <do_rand>
 e8c:	08 95       	ret

00000e8e <srand>:
 e8e:	a0 e0       	ldi	r26, 0x00	; 0
 e90:	b0 e0       	ldi	r27, 0x00	; 0
 e92:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 e96:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 e9a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 e9e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 ea2:	08 95       	ret

00000ea4 <__mulsi3>:
 ea4:	ee 27       	eor	r30, r30
 ea6:	ff 27       	eor	r31, r31

00000ea8 <__mulsi3_helper>:
 ea8:	aa 27       	eor	r26, r26
 eaa:	bb 27       	eor	r27, r27
 eac:	08 c0       	rjmp	.+16     	; 0xebe <__mulsi3_helper+0x16>
 eae:	a2 0f       	add	r26, r18
 eb0:	b3 1f       	adc	r27, r19
 eb2:	e4 1f       	adc	r30, r20
 eb4:	f5 1f       	adc	r31, r21
 eb6:	22 0f       	add	r18, r18
 eb8:	33 1f       	adc	r19, r19
 eba:	44 1f       	adc	r20, r20
 ebc:	55 1f       	adc	r21, r21
 ebe:	96 95       	lsr	r25
 ec0:	87 95       	ror	r24
 ec2:	77 95       	ror	r23
 ec4:	67 95       	ror	r22
 ec6:	98 f3       	brcs	.-26     	; 0xeae <__mulsi3_helper+0x6>
 ec8:	70 40       	sbci	r23, 0x00	; 0
 eca:	a9 f7       	brne	.-22     	; 0xeb6 <__mulsi3_helper+0xe>
 ecc:	00 97       	sbiw	r24, 0x00	; 0
 ece:	99 f7       	brne	.-26     	; 0xeb6 <__mulsi3_helper+0xe>
 ed0:	bd 01       	movw	r22, r26
 ed2:	cf 01       	movw	r24, r30
 ed4:	08 95       	ret

00000ed6 <__divmodsi4>:
 ed6:	05 2e       	mov	r0, r21
 ed8:	97 fb       	bst	r25, 7
 eda:	1e f4       	brtc	.+6      	; 0xee2 <__divmodsi4+0xc>
 edc:	00 94       	com	r0
 ede:	0e 94 82 07 	call	0xf04	; 0xf04 <__negsi2>
 ee2:	57 fd       	sbrc	r21, 7
 ee4:	07 d0       	rcall	.+14     	; 0xef4 <__divmodsi4_neg2>
 ee6:	0e 94 8a 07 	call	0xf14	; 0xf14 <__udivmodsi4>
 eea:	07 fc       	sbrc	r0, 7
 eec:	03 d0       	rcall	.+6      	; 0xef4 <__divmodsi4_neg2>
 eee:	4e f4       	brtc	.+18     	; 0xf02 <__divmodsi4_exit>
 ef0:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__negsi2>

00000ef4 <__divmodsi4_neg2>:
 ef4:	50 95       	com	r21
 ef6:	40 95       	com	r20
 ef8:	30 95       	com	r19
 efa:	21 95       	neg	r18
 efc:	3f 4f       	sbci	r19, 0xFF	; 255
 efe:	4f 4f       	sbci	r20, 0xFF	; 255
 f00:	5f 4f       	sbci	r21, 0xFF	; 255

00000f02 <__divmodsi4_exit>:
 f02:	08 95       	ret

00000f04 <__negsi2>:
 f04:	90 95       	com	r25
 f06:	80 95       	com	r24
 f08:	70 95       	com	r23
 f0a:	61 95       	neg	r22
 f0c:	7f 4f       	sbci	r23, 0xFF	; 255
 f0e:	8f 4f       	sbci	r24, 0xFF	; 255
 f10:	9f 4f       	sbci	r25, 0xFF	; 255
 f12:	08 95       	ret

00000f14 <__udivmodsi4>:
 f14:	a1 e2       	ldi	r26, 0x21	; 33
 f16:	1a 2e       	mov	r1, r26
 f18:	aa 1b       	sub	r26, r26
 f1a:	bb 1b       	sub	r27, r27
 f1c:	fd 01       	movw	r30, r26
 f1e:	0d c0       	rjmp	.+26     	; 0xf3a <__udivmodsi4_ep>

00000f20 <__udivmodsi4_loop>:
 f20:	aa 1f       	adc	r26, r26
 f22:	bb 1f       	adc	r27, r27
 f24:	ee 1f       	adc	r30, r30
 f26:	ff 1f       	adc	r31, r31
 f28:	a2 17       	cp	r26, r18
 f2a:	b3 07       	cpc	r27, r19
 f2c:	e4 07       	cpc	r30, r20
 f2e:	f5 07       	cpc	r31, r21
 f30:	20 f0       	brcs	.+8      	; 0xf3a <__udivmodsi4_ep>
 f32:	a2 1b       	sub	r26, r18
 f34:	b3 0b       	sbc	r27, r19
 f36:	e4 0b       	sbc	r30, r20
 f38:	f5 0b       	sbc	r31, r21

00000f3a <__udivmodsi4_ep>:
 f3a:	66 1f       	adc	r22, r22
 f3c:	77 1f       	adc	r23, r23
 f3e:	88 1f       	adc	r24, r24
 f40:	99 1f       	adc	r25, r25
 f42:	1a 94       	dec	r1
 f44:	69 f7       	brne	.-38     	; 0xf20 <__udivmodsi4_loop>
 f46:	60 95       	com	r22
 f48:	70 95       	com	r23
 f4a:	80 95       	com	r24
 f4c:	90 95       	com	r25
 f4e:	9b 01       	movw	r18, r22
 f50:	ac 01       	movw	r20, r24
 f52:	bd 01       	movw	r22, r26
 f54:	cf 01       	movw	r24, r30
 f56:	08 95       	ret

00000f58 <_exit>:
 f58:	f8 94       	cli

00000f5a <__stop_program>:
 f5a:	ff cf       	rjmp	.-2      	; 0xf5a <__stop_program>
