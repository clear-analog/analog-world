
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000168a  0000171e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000168a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800134  00800134  00001752  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000745e  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e26  00000000  00000000  00008fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fd4  00000000  00000000  0000ade4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a00  00000000  00000000  0000edb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002fa0  00000000  00000000  0000f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004142  00000000  00000000  00012758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  0001689a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_11>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      4c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__vector_19>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      74:	be 01       	movw	r22, r28
      76:	e5 01       	movw	r28, r10
      78:	dd 02       	muls	r29, r29
      7a:	e5 01       	movw	r28, r10
      7c:	dd 02       	muls	r29, r29
      7e:	31 02       	muls	r19, r17
      80:	54 02       	muls	r21, r20
      82:	dd 02       	muls	r29, r29
      84:	ab 02       	muls	r26, r27
      86:	ba 02       	muls	r27, r26

00000088 <ProductString>:
      88:	16 03 43 00 65 00 72 00 65 00 6c 00 6f 00 67 00     ..C.e.r.e.l.o.g.
      98:	20 00 58 00 38 00 00 00                              .X.8...

000000a0 <ManufacturerString>:
      a0:	10 03 43 00 65 00 72 00 65 00 6c 00 6f 00 67 00     ..C.e.r.e.l.o.g.
	...

000000b2 <LanguageString>:
      b2:	04 03 09 04                                         ....

000000b6 <ConfigurationDescriptor>:
      b6:	09 02 ad 00 04 01 00 c0 32 09 04 00 00 00 01 01     ........2.......
      c6:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
      d6:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
      e6:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
      f6:	00 00 07 24 01 02 01 01 00 17 24 02 01 01 02 10     ...$......$.....
     106:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
     116:	09 05 81 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....
     126:	08 0b 02 02 02 02 01 00 09 04 02 00 01 02 02 01     ................
     136:	00 05 24 00 10 01 04 24 02 06 05 24 06 02 03 07     ..$....$...$....
     146:	05 83 03 08 00 ff 09 04 03 00 02 0a 00 00 00 07     ................
     156:	05 03 02 10 00 05 07 05 82 02 10 00 05              .............

00000163 <DeviceDescriptor>:
     163:	12 01 10 01 00 00 00 08 d8 04 2d e5 02 00 01 02     ..........-.....
     173:	dc 01 00                                            ...

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d2 e0       	ldi	r29, 0x02	; 2
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	ea e8       	ldi	r30, 0x8A	; 138
     18a:	f6 e1       	ldi	r31, 0x16	; 22
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a4 33       	cpi	r26, 0x34	; 52
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	a4 e3       	ldi	r26, 0x34	; 52
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a2 34       	cpi	r26, 0x42	; 66
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 48 06 	call	0xc90	; 0xc90 <main>
     1ac:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1b4:	29 2f       	mov	r18, r25
     1b6:	33 27       	eor	r19, r19
     1b8:	22 30       	cpi	r18, 0x02	; 2
     1ba:	31 05       	cpc	r19, r1
     1bc:	59 f0       	breq	.+22     	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x20>
     1be:	23 30       	cpi	r18, 0x03	; 3
     1c0:	31 05       	cpc	r19, r1
     1c2:	69 f0       	breq	.+26     	; 0x1de <CALLBACK_USB_GetDescriptor+0x2a>
     1c4:	21 30       	cpi	r18, 0x01	; 1
     1c6:	31 05       	cpc	r19, r1
     1c8:	e9 f4       	brne	.+58     	; 0x204 <__DATA_REGION_LENGTH__+0x4>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1ca:	82 e1       	ldi	r24, 0x12	; 18
     1cc:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1ce:	23 e6       	ldi	r18, 0x63	; 99
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	1c c0       	rjmp	.+56     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1d4:	8d ea       	ldi	r24, 0xAD	; 173
     1d6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1d8:	26 eb       	ldi	r18, 0xB6	; 182
     1da:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1dc:	17 c0       	rjmp	.+46     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
		case DTYPE_String:
			switch (DescriptorNumber)
     1de:	99 27       	eor	r25, r25
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	91 05       	cpc	r25, r1
     1e4:	49 f0       	breq	.+18     	; 0x1f8 <CALLBACK_USB_GetDescriptor+0x44>
     1e6:	28 f0       	brcs	.+10     	; 0x1f2 <CALLBACK_USB_GetDescriptor+0x3e>
     1e8:	02 97       	sbiw	r24, 0x02	; 2
     1ea:	61 f4       	brne	.+24     	; 0x204 <__DATA_REGION_LENGTH__+0x4>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1ec:	e8 e8       	ldi	r30, 0x88	; 136
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1f2:	e2 eb       	ldi	r30, 0xB2	; 178
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1f8:	e0 ea       	ldi	r30, 0xA0	; 160
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1fc:	84 91       	lpm	r24, Z
     1fe:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     200:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     202:	04 c0       	rjmp	.+8      	; 0x20c <__DATA_REGION_LENGTH__+0xc>
                                    const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     20c:	fa 01       	movw	r30, r20
     20e:	31 83       	std	Z+1, r19	; 0x01
     210:	20 83       	st	Z, r18
	return Size;
     212:	08 95       	ret

00000214 <CDC_Device_ConfigureEndpoints>:

	static int CDC_Device_putchar(char c,
	                              FILE* Stream)
	{
		return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : c;
	}
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	ec 01       	movw	r28, r24
     21a:	fc 01       	movw	r30, r24
     21c:	70 96       	adiw	r30, 0x10	; 16
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	df 01       	movw	r26, r30
     222:	1d 92       	st	X+, r1
     224:	8a 95       	dec	r24
     226:	e9 f7       	brne	.-6      	; 0x222 <CDC_Device_ConfigureEndpoints+0xe>
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	8c 83       	std	Y+4, r24	; 0x04
     22c:	89 87       	std	Y+9, r24	; 0x09
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	8e 87       	std	Y+14, r24	; 0x0e
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	ce 01       	movw	r24, r28
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Endpoint_ConfigureEndpointTable>
     23c:	88 23       	and	r24, r24
     23e:	71 f0       	breq	.+28     	; 0x25c <CDC_Device_ConfigureEndpoints+0x48>
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	ce 01       	movw	r24, r28
     244:	06 96       	adiw	r24, 0x06	; 6
     246:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Endpoint_ConfigureEndpointTable>
     24a:	88 23       	and	r24, r24
     24c:	39 f0       	breq	.+14     	; 0x25c <CDC_Device_ConfigureEndpoints+0x48>
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	ce 01       	movw	r24, r28
     252:	0b 96       	adiw	r24, 0x0b	; 11
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <Endpoint_ConfigureEndpointTable>
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <CDC_Device_SendString>:
     264:	db 01       	movw	r26, r22
     266:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <USB_DeviceState>
     26a:	24 30       	cpi	r18, 0x04	; 4
     26c:	d1 f4       	brne	.+52     	; 0x2a2 <CDC_Device_SendString+0x3e>
     26e:	fc 01       	movw	r30, r24
     270:	44 89       	ldd	r20, Z+20	; 0x14
     272:	55 89       	ldd	r21, Z+21	; 0x15
     274:	66 89       	ldd	r22, Z+22	; 0x16
     276:	77 89       	ldd	r23, Z+23	; 0x17
     278:	45 2b       	or	r20, r21
     27a:	46 2b       	or	r20, r22
     27c:	47 2b       	or	r20, r23
     27e:	89 f0       	breq	.+34     	; 0x2a2 <CDC_Device_SendString+0x3e>
     280:	81 81       	ldd	r24, Z+1	; 0x01
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     288:	fd 01       	movw	r30, r26
     28a:	01 90       	ld	r0, Z+
     28c:	00 20       	and	r0, r0
     28e:	e9 f7       	brne	.-6      	; 0x28a <CDC_Device_SendString+0x26>
     290:	31 97       	sbiw	r30, 0x01	; 1
     292:	bf 01       	movw	r22, r30
     294:	6a 1b       	sub	r22, r26
     296:	7b 0b       	sbc	r23, r27
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	cd 01       	movw	r24, r26
     29e:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <Endpoint_Write_Stream_LE>
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	08 95       	ret

000002a6 <CDC_Device_Flush>:
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     2a6:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <USB_DeviceState>
     2aa:	24 30       	cpi	r18, 0x04	; 4
     2ac:	29 f5       	brne	.+74     	; 0x2f8 <CDC_Device_Flush+0x52>
     2ae:	fc 01       	movw	r30, r24
     2b0:	44 89       	ldd	r20, Z+20	; 0x14
     2b2:	55 89       	ldd	r21, Z+21	; 0x15
     2b4:	66 89       	ldd	r22, Z+22	; 0x16
     2b6:	77 89       	ldd	r23, Z+23	; 0x17
     2b8:	45 2b       	or	r20, r21
     2ba:	46 2b       	or	r20, r22
     2bc:	47 2b       	or	r20, r23
     2be:	e1 f0       	breq	.+56     	; 0x2f8 <CDC_Device_Flush+0x52>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2c0:	81 81       	ldd	r24, Z+1	; 0x01
     2c2:	8f 70       	andi	r24, 0x0F	; 15
     2c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     2c8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     2cc:	88 23       	and	r24, r24
     2ce:	91 f0       	breq	.+36     	; 0x2f4 <CDC_Device_Flush+0x4e>
			 *          on its direction.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     2d0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     2d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     2d8:	8e 77       	andi	r24, 0x7E	; 126
     2da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     2de:	95 fd       	sbrc	r25, 5
     2e0:	09 c0       	rjmp	.+18     	; 0x2f4 <CDC_Device_Flush+0x4e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     2e2:	0e 94 c9 04 	call	0x992	; 0x992 <Endpoint_WaitUntilReady>
     2e6:	81 11       	cpse	r24, r1
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <CDC_Device_Flush+0x54>
     2ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     2ee:	8e 77       	andi	r24, 0x7E	; 126
     2f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     2f8:	82 e0       	ldi	r24, 0x02	; 2

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     2fa:	08 95       	ret

000002fc <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     2fc:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <USB_DeviceState>
     300:	24 30       	cpi	r18, 0x04	; 4
     302:	91 f4       	brne	.+36     	; 0x328 <__stack+0x29>
     304:	fc 01       	movw	r30, r24
     306:	44 89       	ldd	r20, Z+20	; 0x14
     308:	55 89       	ldd	r21, Z+21	; 0x15
     30a:	66 89       	ldd	r22, Z+22	; 0x16
     30c:	77 89       	ldd	r23, Z+23	; 0x17
     30e:	45 2b       	or	r20, r21
     310:	46 2b       	or	r20, r22
     312:	47 2b       	or	r20, r23
     314:	49 f0       	breq	.+18     	; 0x328 <__stack+0x29>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     316:	21 81       	ldd	r18, Z+1	; 0x01
     318:	2f 70       	andi	r18, 0x0F	; 15
     31a:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     31e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     322:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     324:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <CDC_Device_Flush>
     328:	08 95       	ret

0000032a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	aa 97       	sbiw	r28, 0x2a	; 42
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	ea e3       	ldi	r30, 0x3A	; 58
     342:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     344:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     348:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	e2 34       	cpi	r30, 0x42	; 66
     34e:	f2 07       	cpc	r31, r18
     350:	c9 f7       	brne	.-14     	; 0x344 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     352:	0e 94 b4 06 	call	0xd68	; 0xd68 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     356:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
     35a:	83 ff       	sbrs	r24, 3
     35c:	2e c1       	rjmp	.+604    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     35e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     362:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <USB_ControlRequest+0x1>
     366:	49 2f       	mov	r20, r25
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	4a 30       	cpi	r20, 0x0A	; 10
     36c:	51 05       	cpc	r21, r1
     36e:	08 f0       	brcs	.+2      	; 0x372 <USB_Device_ProcessControlRequest+0x48>
     370:	24 c1       	rjmp	.+584    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     372:	fa 01       	movw	r30, r20
     374:	e6 5c       	subi	r30, 0xC6	; 198
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     37c:	80 38       	cpi	r24, 0x80	; 128
     37e:	21 f0       	breq	.+8      	; 0x388 <USB_Device_ProcessControlRequest+0x5e>
     380:	82 38       	cpi	r24, 0x82	; 130
     382:	09 f0       	breq	.+2      	; 0x386 <USB_Device_ProcessControlRequest+0x5c>
     384:	1a c1       	rjmp	.+564    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     386:	08 c0       	rjmp	.+16     	; 0x398 <USB_Device_ProcessControlRequest+0x6e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     388:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     38c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <USB_Device_RemoteWakeupEnabled>
     390:	99 23       	and	r25, r25
     392:	89 f0       	breq	.+34     	; 0x3b6 <USB_Device_ProcessControlRequest+0x8c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     394:	82 60       	ori	r24, 0x02	; 2
     396:	0f c0       	rjmp	.+30     	; 0x3b6 <USB_Device_ProcessControlRequest+0x8c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     398:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest+0x4>
     39c:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     39e:	85 30       	cpi	r24, 0x05	; 5
     3a0:	08 f0       	brcs	.+2      	; 0x3a4 <USB_Device_ProcessControlRequest+0x7a>
     3a2:	0b c1       	rjmp	.+534    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3a4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     3ac:	85 fb       	bst	r24, 5
     3ae:	88 27       	eor	r24, r24
     3b0:	80 f9       	bld	r24, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3b2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3b6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     3ba:	97 7f       	andi	r25, 0xF7	; 247
     3bc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     3c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     3c4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     3c8:	d1 c0       	rjmp	.+418    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     3ca:	28 2f       	mov	r18, r24
     3cc:	2d 7f       	andi	r18, 0xFD	; 253
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <USB_Device_ProcessControlRequest+0xa8>
     3d0:	f4 c0       	rjmp	.+488    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     3d2:	88 23       	and	r24, r24
     3d4:	19 f0       	breq	.+6      	; 0x3dc <USB_Device_ProcessControlRequest+0xb2>
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	61 f0       	breq	.+24     	; 0x3f2 <USB_Device_ProcessControlRequest+0xc8>
     3da:	ef c0       	rjmp	.+478    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     3dc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x2>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	09 f0       	breq	.+2      	; 0x3e6 <USB_Device_ProcessControlRequest+0xbc>
     3e4:	ea c0       	rjmp	.+468    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     3e6:	93 30       	cpi	r25, 0x03	; 3
     3e8:	09 f0       	breq	.+2      	; 0x3ec <USB_Device_ProcessControlRequest+0xc2>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_Device_RemoteWakeupEnabled>
     3f0:	2e c0       	rjmp	.+92     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     3f2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x2>
     3f6:	81 11       	cpse	r24, r1
     3f8:	2a c0       	rjmp	.+84     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     3fa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest+0x4>
     3fe:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     400:	2f ef       	ldi	r18, 0xFF	; 255
     402:	28 0f       	add	r18, r24
     404:	24 30       	cpi	r18, 0x04	; 4
     406:	08 f0       	brcs	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	d8 c0       	rjmp	.+432    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     40a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     40e:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     412:	20 ff       	sbrs	r18, 0
     414:	1c c0       	rjmp	.+56     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     416:	93 30       	cpi	r25, 0x03	; 3
     418:	21 f4       	brne	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     41a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	14 c0       	rjmp	.+40     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     422:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     426:	90 61       	ori	r25, 0x10	; 16
     428:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	a9 01       	movw	r20, r18
     432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     434:	44 0f       	add	r20, r20
     436:	55 1f       	adc	r21, r21
     438:	8a 95       	dec	r24
     43a:	e2 f7       	brpl	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43c:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
     440:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     444:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     44e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     452:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     456:	87 7f       	andi	r24, 0xF7	; 247
     458:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     45c:	0e 94 aa 04 	call	0x954	; 0x954 <Endpoint_ClearStatusStage>
     460:	ac c0       	rjmp	.+344    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     462:	81 11       	cpse	r24, r1
     464:	aa c0       	rjmp	.+340    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     466:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <USB_ControlRequest+0x2>
     46a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     46c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     470:	80 78       	andi	r24, 0x80	; 128
     472:	81 2b       	or	r24, r17
     474:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     478:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     47c:	87 7f       	andi	r24, 0xF7	; 247
     47e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     482:	0e 94 aa 04 	call	0x954	; 0x954 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     486:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
     48a:	80 ff       	sbrs	r24, 0
     48c:	fc cf       	rjmp	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     48e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     492:	80 68       	ori	r24, 0x80	; 128
     494:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     498:	11 11       	cpse	r17, r1
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <USB_DeviceState>
     4a6:	89 c0       	rjmp	.+274    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     4a8:	80 58       	subi	r24, 0x80	; 128
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ae:	85 c0       	rjmp	.+266    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     4b0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x2>
     4b4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <USB_ControlRequest+0x3>
     4b8:	8c 3d       	cpi	r24, 0xDC	; 220
     4ba:	53 e0       	ldi	r21, 0x03	; 3
     4bc:	95 07       	cpc	r25, r21
     4be:	79 f5       	brne	.+94     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     4c4:	8a e2       	ldi	r24, 0x2A	; 42
     4c6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     4c8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     4ca:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     4cc:	de 01       	movw	r26, r28
     4ce:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     4d0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     4d2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     4d4:	51 e2       	ldi	r21, 0x21	; 33
     4d6:	e3 2f       	mov	r30, r19
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
     4de:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     4e0:	20 ff       	sbrs	r18, 0
     4e2:	03 c0       	rjmp	.+6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
					{
						SerialByte >>= 4;
     4e4:	e2 95       	swap	r30
     4e6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     4e8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     4ea:	ef 70       	andi	r30, 0x0F	; 15
     4ec:	8e 2f       	mov	r24, r30
     4ee:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     4f0:	ea 30       	cpi	r30, 0x0A	; 10
     4f2:	10 f0       	brcs	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4f4:	c7 96       	adiw	r24, 0x37	; 55
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f8:	c0 96       	adiw	r24, 0x30	; 48
     4fa:	8d 93       	st	X+, r24
     4fc:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     4fe:	2f 5f       	subi	r18, 0xFF	; 255
     500:	24 31       	cpi	r18, 0x14	; 20
     502:	49 f7       	brne	.-46     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     504:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     506:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     50a:	87 7f       	andi	r24, 0xF7	; 247
     50c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     510:	6a e2       	ldi	r22, 0x2A	; 42
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	0e 94 42 03 	call	0x684	; 0x684 <Endpoint_Write_Control_Stream_LE>
     51c:	16 c0       	rjmp	.+44     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     51e:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <USB_ControlRequest+0x4>
     522:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <USB_ControlRequest+0x5>
     526:	ae 01       	movw	r20, r28
     528:	4f 5f       	subi	r20, 0xFF	; 255
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <CALLBACK_USB_GetDescriptor>
     530:	bc 01       	movw	r22, r24
     532:	89 2b       	or	r24, r25
     534:	09 f4       	brne	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     536:	41 c0       	rjmp	.+130    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     538:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     53c:	97 7f       	andi	r25, 0xF7	; 247
     53e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Endpoint_Write_Control_PStream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     54a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     54e:	8b 77       	andi	r24, 0x7B	; 123
     550:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     554:	32 c0       	rjmp	.+100    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     556:	80 38       	cpi	r24, 0x80	; 128
     558:	81 f5       	brne	.+96     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     55a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     55e:	87 7f       	andi	r24, 0xF7	; 247
     560:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     564:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     568:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     56c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     570:	8e 77       	andi	r24, 0x7E	; 126
     572:	72 cf       	rjmp	.-284    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     574:	81 11       	cpse	r24, r1
     576:	21 c0       	rjmp	.+66     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     578:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x2>
     57c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <USB_ControlRequest+0x3>
     580:	99 27       	eor	r25, r25
     582:	02 97       	sbiw	r24, 0x02	; 2
     584:	d4 f4       	brge	.+52     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     586:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     58a:	87 7f       	andi	r24, 0xF7	; 247
     58c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     590:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x2>
     594:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     598:	0e 94 aa 04 	call	0x954	; 0x954 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     59c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <USB_Device_ConfigurationNumber>
     5a0:	81 11       	cpse	r24, r1
     5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     5a4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     5a8:	87 fd       	sbrc	r24, 7
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     5b6:	0e 94 af 06 	call	0xd5e	; 0xd5e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     5be:	83 ff       	sbrs	r24, 3
     5c0:	0a c0       	rjmp	.+20     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5c6:	87 7f       	andi	r24, 0xF7	; 247
     5c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     5cc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     5d0:	80 62       	ori	r24, 0x20	; 32
     5d2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     5d6:	aa 96       	adiw	r28, 0x2a	; 42
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	08 95       	ret

000005ea <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
     5fc:	8b 01       	movw	r16, r22
     5fe:	7a 01       	movw	r14, r20
     600:	0e 94 c9 04 	call	0x992	; 0x992 <Endpoint_WaitUntilReady>
     604:	81 11       	cpse	r24, r1
     606:	35 c0       	rjmp	.+106    	; 0x672 <Endpoint_Write_Stream_LE+0x88>
     608:	e1 14       	cp	r14, r1
     60a:	f1 04       	cpc	r15, r1
     60c:	39 f0       	breq	.+14     	; 0x61c <Endpoint_Write_Stream_LE+0x32>
     60e:	f7 01       	movw	r30, r14
     610:	80 81       	ld	r24, Z
     612:	91 81       	ldd	r25, Z+1	; 0x01
     614:	08 1b       	sub	r16, r24
     616:	19 0b       	sbc	r17, r25
     618:	c8 0f       	add	r28, r24
     61a:	d9 1f       	adc	r29, r25
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
     620:	01 15       	cp	r16, r1
     622:	11 05       	cpc	r17, r1
     624:	29 f1       	breq	.+74     	; 0x670 <Endpoint_Write_Stream_LE+0x86>
     626:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     62a:	85 fd       	sbrc	r24, 5
     62c:	18 c0       	rjmp	.+48     	; 0x65e <Endpoint_Write_Stream_LE+0x74>
     62e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     632:	8e 77       	andi	r24, 0x7E	; 126
     634:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     638:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <USB_USBTask>
     63c:	e1 14       	cp	r14, r1
     63e:	f1 04       	cpc	r15, r1
     640:	49 f0       	breq	.+18     	; 0x654 <Endpoint_Write_Stream_LE+0x6a>
     642:	f7 01       	movw	r30, r14
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	c8 0e       	add	r12, r24
     64a:	d9 1e       	adc	r13, r25
     64c:	d1 82       	std	Z+1, r13	; 0x01
     64e:	c0 82       	st	Z, r12
     650:	85 e0       	ldi	r24, 0x05	; 5
     652:	0f c0       	rjmp	.+30     	; 0x672 <Endpoint_Write_Stream_LE+0x88>
     654:	0e 94 c9 04 	call	0x992	; 0x992 <Endpoint_WaitUntilReady>
     658:	88 23       	and	r24, r24
     65a:	11 f3       	breq	.-60     	; 0x620 <Endpoint_Write_Stream_LE+0x36>
     65c:	0a c0       	rjmp	.+20     	; 0x672 <Endpoint_Write_Stream_LE+0x88>
     65e:	89 91       	ld	r24, Y+
     660:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     664:	01 50       	subi	r16, 0x01	; 1
     666:	11 09       	sbc	r17, r1
     668:	ff ef       	ldi	r31, 0xFF	; 255
     66a:	cf 1a       	sub	r12, r31
     66c:	df 0a       	sbc	r13, r31
     66e:	d8 cf       	rjmp	.-80     	; 0x620 <Endpoint_Write_Stream_LE+0x36>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	08 95       	ret

00000684 <Endpoint_Write_Control_Stream_LE>:
     684:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <USB_ControlRequest+0x6>
     688:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <USB_ControlRequest+0x7>
     68c:	26 17       	cp	r18, r22
     68e:	37 07       	cpc	r19, r23
     690:	48 f0       	brcs	.+18     	; 0x6a4 <Endpoint_Write_Control_Stream_LE+0x20>
     692:	61 15       	cp	r22, r1
     694:	71 05       	cpc	r23, r1
     696:	39 f4       	brne	.+14     	; 0x6a6 <Endpoint_Write_Control_Stream_LE+0x22>
     698:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     69c:	2e 77       	andi	r18, 0x7E	; 126
     69e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <Endpoint_Write_Control_Stream_LE+0x22>
     6a4:	b9 01       	movw	r22, r18
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	61 15       	cp	r22, r1
     6ac:	71 05       	cpc	r23, r1
     6ae:	61 f1       	breq	.+88     	; 0x708 <Endpoint_Write_Control_Stream_LE+0x84>
     6b0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     6b4:	88 23       	and	r24, r24
     6b6:	d9 f1       	breq	.+118    	; 0x72e <Endpoint_Write_Control_Stream_LE+0xaa>
     6b8:	85 30       	cpi	r24, 0x05	; 5
     6ba:	d9 f1       	breq	.+118    	; 0x732 <Endpoint_Write_Control_Stream_LE+0xae>
     6bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6c0:	83 fd       	sbrc	r24, 3
     6c2:	39 c0       	rjmp	.+114    	; 0x736 <Endpoint_Write_Control_Stream_LE+0xb2>
     6c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6c8:	82 fd       	sbrc	r24, 2
     6ca:	2b c0       	rjmp	.+86     	; 0x722 <Endpoint_Write_Control_Stream_LE+0x9e>
     6cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     6d0:	80 ff       	sbrs	r24, 0
     6d2:	eb cf       	rjmp	.-42     	; 0x6aa <Endpoint_Write_Control_Stream_LE+0x26>
     6d4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	61 15       	cp	r22, r1
     6dc:	71 05       	cpc	r23, r1
     6de:	51 f0       	breq	.+20     	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0x70>
     6e0:	88 30       	cpi	r24, 0x08	; 8
     6e2:	91 05       	cpc	r25, r1
     6e4:	38 f4       	brcc	.+14     	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0x70>
     6e6:	21 91       	ld	r18, Z+
     6e8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     6ec:	61 50       	subi	r22, 0x01	; 1
     6ee:	71 09       	sbc	r23, r1
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	f3 cf       	rjmp	.-26     	; 0x6da <Endpoint_Write_Control_Stream_LE+0x56>
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	08 97       	sbiw	r24, 0x08	; 8
     6f8:	09 f0       	breq	.+2      	; 0x6fc <Endpoint_Write_Control_Stream_LE+0x78>
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     700:	8e 77       	andi	r24, 0x7E	; 126
     702:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     706:	d1 cf       	rjmp	.-94     	; 0x6aa <Endpoint_Write_Control_Stream_LE+0x26>
     708:	21 11       	cpse	r18, r1
     70a:	d2 cf       	rjmp	.-92     	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0x2c>
     70c:	0a c0       	rjmp	.+20     	; 0x722 <Endpoint_Write_Control_Stream_LE+0x9e>
     70e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     712:	88 23       	and	r24, r24
     714:	61 f0       	breq	.+24     	; 0x72e <Endpoint_Write_Control_Stream_LE+0xaa>
     716:	85 30       	cpi	r24, 0x05	; 5
     718:	61 f0       	breq	.+24     	; 0x732 <Endpoint_Write_Control_Stream_LE+0xae>
     71a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     71e:	83 fd       	sbrc	r24, 3
     720:	0a c0       	rjmp	.+20     	; 0x736 <Endpoint_Write_Control_Stream_LE+0xb2>
     722:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     726:	82 ff       	sbrs	r24, 2
     728:	f2 cf       	rjmp	.-28     	; 0x70e <Endpoint_Write_Control_Stream_LE+0x8a>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	08 95       	ret
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	08 95       	ret
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	08 95       	ret

0000073a <Endpoint_Read_Control_Stream_LE>:
     73a:	61 15       	cp	r22, r1
     73c:	71 05       	cpc	r23, r1
     73e:	29 f4       	brne	.+10     	; 0x74a <Endpoint_Read_Control_Stream_LE+0x10>
     740:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     744:	2b 77       	andi	r18, 0x7B	; 123
     746:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     74a:	fc 01       	movw	r30, r24
     74c:	61 15       	cp	r22, r1
     74e:	71 05       	cpc	r23, r1
     750:	21 f1       	breq	.+72     	; 0x79a <Endpoint_Read_Control_Stream_LE+0x60>
     752:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     756:	88 23       	and	r24, r24
     758:	41 f1       	breq	.+80     	; 0x7aa <Endpoint_Read_Control_Stream_LE+0x70>
     75a:	85 30       	cpi	r24, 0x05	; 5
     75c:	41 f1       	breq	.+80     	; 0x7ae <Endpoint_Read_Control_Stream_LE+0x74>
     75e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     762:	83 fd       	sbrc	r24, 3
     764:	20 c0       	rjmp	.+64     	; 0x7a6 <Endpoint_Read_Control_Stream_LE+0x6c>
     766:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     76a:	82 ff       	sbrs	r24, 2
     76c:	ef cf       	rjmp	.-34     	; 0x74c <Endpoint_Read_Control_Stream_LE+0x12>
     76e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     772:	88 23       	and	r24, r24
     774:	31 f0       	breq	.+12     	; 0x782 <Endpoint_Read_Control_Stream_LE+0x48>
     776:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     77a:	81 93       	st	Z+, r24
     77c:	61 50       	subi	r22, 0x01	; 1
     77e:	71 09       	sbc	r23, r1
     780:	b1 f7       	brne	.-20     	; 0x76e <Endpoint_Read_Control_Stream_LE+0x34>
     782:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     786:	8b 77       	andi	r24, 0x7B	; 123
     788:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     78c:	df cf       	rjmp	.-66     	; 0x74c <Endpoint_Read_Control_Stream_LE+0x12>
     78e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     792:	88 23       	and	r24, r24
     794:	51 f0       	breq	.+20     	; 0x7aa <Endpoint_Read_Control_Stream_LE+0x70>
     796:	85 30       	cpi	r24, 0x05	; 5
     798:	51 f0       	breq	.+20     	; 0x7ae <Endpoint_Read_Control_Stream_LE+0x74>
     79a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     79e:	80 ff       	sbrs	r24, 0
     7a0:	f6 cf       	rjmp	.-20     	; 0x78e <Endpoint_Read_Control_Stream_LE+0x54>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	08 95       	ret
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	08 95       	ret
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	08 95       	ret
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	08 95       	ret

000007b2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7b2:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <USB_ControlRequest+0x6>
     7b6:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <USB_ControlRequest+0x7>
     7ba:	26 17       	cp	r18, r22
     7bc:	37 07       	cpc	r19, r23
     7be:	48 f0       	brcs	.+18     	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7c6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     7ca:	2e 77       	andi	r18, 0x7E	; 126
     7cc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0x22>
     7d2:	b9 01       	movw	r22, r18
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	79 f1       	breq	.+94     	; 0x83c <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7de:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7e2:	88 23       	and	r24, r24
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <Endpoint_Write_Control_PStream_LE+0x36>
     7e6:	3d c0       	rjmp	.+122    	; 0x862 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7e8:	85 30       	cpi	r24, 0x05	; 5
     7ea:	09 f4       	brne	.+2      	; 0x7ee <Endpoint_Write_Control_PStream_LE+0x3c>
     7ec:	3c c0       	rjmp	.+120    	; 0x866 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7f2:	83 fd       	sbrc	r24, 3
     7f4:	3a c0       	rjmp	.+116    	; 0x86a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7fa:	82 fd       	sbrc	r24, 2
     7fc:	2c c0       	rjmp	.+88     	; 0x856 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
     802:	80 ff       	sbrs	r24, 0
     804:	e9 cf       	rjmp	.-46     	; 0x7d8 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     806:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     80a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     80c:	61 15       	cp	r22, r1
     80e:	71 05       	cpc	r23, r1
     810:	59 f0       	breq	.+22     	; 0x828 <Endpoint_Write_Control_PStream_LE+0x76>
     812:	88 30       	cpi	r24, 0x08	; 8
     814:	91 05       	cpc	r25, r1
     816:	40 f4       	brcc	.+16     	; 0x828 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     818:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     81a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     81e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     820:	61 50       	subi	r22, 0x01	; 1
     822:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	f2 cf       	rjmp	.-28     	; 0x80c <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     828:	21 e0       	ldi	r18, 0x01	; 1
     82a:	08 97       	sbiw	r24, 0x08	; 8
     82c:	09 f0       	breq	.+2      	; 0x830 <Endpoint_Write_Control_PStream_LE+0x7e>
     82e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     830:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     834:	8e 77       	andi	r24, 0x7E	; 126
     836:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     83a:	ce cf       	rjmp	.-100    	; 0x7d8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     83c:	21 11       	cpse	r18, r1
     83e:	cf cf       	rjmp	.-98     	; 0x7de <Endpoint_Write_Control_PStream_LE+0x2c>
     840:	0a c0       	rjmp	.+20     	; 0x856 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     842:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     846:	88 23       	and	r24, r24
     848:	61 f0       	breq	.+24     	; 0x862 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     84a:	85 30       	cpi	r24, 0x05	; 5
     84c:	61 f0       	breq	.+24     	; 0x866 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     84e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     852:	83 fd       	sbrc	r24, 3
     854:	0a c0       	rjmp	.+20     	; 0x86a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     856:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     85a:	82 ff       	sbrs	r24, 2
     85c:	f2 cf       	rjmp	.-28     	; 0x842 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     86a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     86c:	08 95       	ret

0000086e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     86e:	98 2f       	mov	r25, r24
     870:	95 30       	cpi	r25, 0x05	; 5
     872:	68 f5       	brcc	.+90     	; 0x8ce <Endpoint_ConfigureEndpoint_Prv+0x60>
     874:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     878:	98 17       	cp	r25, r24
     87a:	39 f0       	breq	.+14     	; 0x88a <Endpoint_ConfigureEndpoint_Prv+0x1c>
     87c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     880:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     884:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     888:	03 c0       	rjmp	.+6      	; 0x890 <Endpoint_ConfigureEndpoint_Prv+0x22>
     88a:	24 2f       	mov	r18, r20
     88c:	76 2f       	mov	r23, r22
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	21 fd       	sbrc	r18, 1
     892:	02 c0       	rjmp	.+4      	; 0x898 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     894:	9f 5f       	subi	r25, 0xFF	; 255
     896:	ec cf       	rjmp	.-40     	; 0x870 <Endpoint_ConfigureEndpoint_Prv+0x2>
     898:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     89c:	3e 7f       	andi	r19, 0xFE	; 254
     89e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     8a2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     8a6:	3d 7f       	andi	r19, 0xFD	; 253
     8a8:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     8ac:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     8b0:	31 60       	ori	r19, 0x01	; 1
     8b2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     8b6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     8ba:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     8be:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     8c2:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     8c6:	27 fd       	sbrc	r18, 7
     8c8:	e5 cf       	rjmp	.-54     	; 0x894 <Endpoint_ConfigureEndpoint_Prv+0x26>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	08 95       	ret
     8ce:	8f 70       	andi	r24, 0x0F	; 15
     8d0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	08 95       	ret

000008d8 <Endpoint_ConfigureEndpointTable>:
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	06 2f       	mov	r16, r22
     8e2:	ec 01       	movw	r28, r24
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	10 17       	cp	r17, r16
     8e8:	79 f1       	breq	.+94     	; 0x948 <Endpoint_ConfigureEndpointTable+0x70>
     8ea:	98 81       	ld	r25, Y
     8ec:	91 11       	cpse	r25, r1
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <Endpoint_ConfigureEndpointTable+0x1e>
     8f0:	1f 5f       	subi	r17, 0xFF	; 255
     8f2:	25 96       	adiw	r28, 0x05	; 5
     8f4:	f8 cf       	rjmp	.-16     	; 0x8e6 <Endpoint_ConfigureEndpointTable+0xe>
     8f6:	2c 81       	ldd	r18, Y+4	; 0x04
     8f8:	a9 81       	ldd	r26, Y+1	; 0x01
     8fa:	ba 81       	ldd	r27, Y+2	; 0x02
     8fc:	6b 81       	ldd	r22, Y+3	; 0x03
     8fe:	89 2f       	mov	r24, r25
     900:	8f 70       	andi	r24, 0x0F	; 15
     902:	85 30       	cpi	r24, 0x05	; 5
     904:	10 f0       	brcs	.+4      	; 0x90a <Endpoint_ConfigureEndpointTable+0x32>
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	20 c0       	rjmp	.+64     	; 0x94a <Endpoint_ConfigureEndpointTable+0x72>
     90a:	22 30       	cpi	r18, 0x02	; 2
     90c:	10 f4       	brcc	.+4      	; 0x912 <Endpoint_ConfigureEndpointTable+0x3a>
     90e:	42 e0       	ldi	r20, 0x02	; 2
     910:	01 c0       	rjmp	.+2      	; 0x914 <Endpoint_ConfigureEndpointTable+0x3c>
     912:	46 e0       	ldi	r20, 0x06	; 6
     914:	e8 e0       	ldi	r30, 0x08	; 8
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	ea 17       	cp	r30, r26
     91c:	fb 07       	cpc	r31, r27
     91e:	20 f4       	brcc	.+8      	; 0x928 <Endpoint_ConfigureEndpointTable+0x50>
     920:	2f 5f       	subi	r18, 0xFF	; 255
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	f9 cf       	rjmp	.-14     	; 0x91a <Endpoint_ConfigureEndpointTable+0x42>
     928:	22 95       	swap	r18
     92a:	20 7f       	andi	r18, 0xF0	; 240
     92c:	42 2b       	or	r20, r18
     92e:	62 95       	swap	r22
     930:	66 0f       	add	r22, r22
     932:	66 0f       	add	r22, r22
     934:	60 7c       	andi	r22, 0xC0	; 192
     936:	99 1f       	adc	r25, r25
     938:	99 27       	eor	r25, r25
     93a:	99 1f       	adc	r25, r25
     93c:	69 2b       	or	r22, r25
     93e:	0e 94 37 04 	call	0x86e	; 0x86e <Endpoint_ConfigureEndpoint_Prv>
     942:	81 11       	cpse	r24, r1
     944:	d5 cf       	rjmp	.-86     	; 0x8f0 <Endpoint_ConfigureEndpointTable+0x18>
     946:	df cf       	rjmp	.-66     	; 0x906 <Endpoint_ConfigureEndpointTable+0x2e>
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     954:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest>
     958:	87 ff       	sbrs	r24, 7
     95a:	11 c0       	rjmp	.+34     	; 0x97e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     95c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     960:	82 fd       	sbrc	r24, 2
     962:	05 c0       	rjmp	.+10     	; 0x96e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     964:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     968:	81 11       	cpse	r24, r1
     96a:	f8 cf       	rjmp	.-16     	; 0x95c <Endpoint_ClearStatusStage+0x8>
     96c:	11 c0       	rjmp	.+34     	; 0x990 <Endpoint_ClearStatusStage+0x3c>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     96e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     972:	8b 77       	andi	r24, 0x7B	; 123
     974:	0b c0       	rjmp	.+22     	; 0x98c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     976:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     97a:	88 23       	and	r24, r24
     97c:	49 f0       	breq	.+18     	; 0x990 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     97e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     982:	80 ff       	sbrs	r24, 0
     984:	f8 cf       	rjmp	.-16     	; 0x976 <Endpoint_ClearStatusStage+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     986:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     98a:	8e 77       	andi	r24, 0x7E	; 126
     98c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     990:	08 95       	ret

00000992 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     992:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     996:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     99a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     99c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     9a0:	84 2f       	mov	r24, r20
     9a2:	81 70       	andi	r24, 0x01	; 1
     9a4:	40 ff       	sbrs	r20, 0
     9a6:	23 c0       	rjmp	.+70     	; 0x9ee <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     9ac:	80 fd       	sbrc	r24, 0
     9ae:	1d c0       	rjmp	.+58     	; 0x9ea <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9b0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9b4:	88 23       	and	r24, r24
     9b6:	99 f0       	breq	.+38     	; 0x9de <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9b8:	85 30       	cpi	r24, 0x05	; 5
     9ba:	99 f0       	breq	.+38     	; 0x9e2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9bc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     9c0:	85 fd       	sbrc	r24, 5
     9c2:	11 c0       	rjmp	.+34     	; 0x9e6 <Endpoint_WaitUntilReady+0x54>
     9c4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     9c8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9cc:	24 17       	cp	r18, r20
     9ce:	35 07       	cpc	r19, r21
     9d0:	29 f3       	breq	.-54     	; 0x99c <Endpoint_WaitUntilReady+0xa>
     9d2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9d4:	11 f0       	breq	.+4      	; 0x9da <Endpoint_WaitUntilReady+0x48>
     9d6:	9a 01       	movw	r18, r20
     9d8:	e1 cf       	rjmp	.-62     	; 0x99c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9ee:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9f2:	42 ff       	sbrs	r20, 2
     9f4:	dd cf       	rjmp	.-70     	; 0x9b0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     9f6:	08 95       	ret

000009f8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     9f8:	08 95       	ret

000009fa <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9fa:	0e 94 43 05 	call	0xa86	; 0xa86 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9fe:	0e 94 46 05 	call	0xa8c	; 0xa8c <USB_INT_ClearAllInterrupts>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     a06:	8f 77       	andi	r24, 0x7F	; 127
     a08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
     a0c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     a10:	80 68       	ori	r24, 0x80	; 128
     a12:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a16:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     a1a:	8f 7d       	andi	r24, 0xDF	; 223
     a1c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a24:	86 e0       	ldi	r24, 0x06	; 6
     a26:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a28:	09 b4       	in	r0, 0x29	; 41
     a2a:	00 fe       	sbrs	r0, 0
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     a2e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     a32:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a36:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a3a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a3e:	42 e0       	ldi	r20, 0x02	; 2
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	0e 94 37 04 	call	0x86e	; 0x86e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a48:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a4c:	8e 7f       	andi	r24, 0xFE	; 254
     a4e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a52:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a56:	81 60       	ori	r24, 0x01	; 1
     a58:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a60:	88 60       	ori	r24, 0x08	; 8
     a62:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a66:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     a70:	08 95       	ret

00000a72 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     a72:	e3 e6       	ldi	r30, 0x63	; 99
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <USB_IsInitialized>

	USB_ResetInterface();
     a82:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <USB_ResetInterface>

00000a86 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a86:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     a8a:	08 95       	ret

00000a8c <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a8c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     a90:	08 95       	ret

00000a92 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ab4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     ab8:	82 ff       	sbrs	r24, 2
     aba:	0b c0       	rjmp	.+22     	; 0xad2 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     abc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     ac0:	82 ff       	sbrs	r24, 2
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ac4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     ac8:	8b 7f       	andi	r24, 0xFB	; 251
     aca:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ace:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ad2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ad6:	80 ff       	sbrs	r24, 0
     ad8:	18 c0       	rjmp	.+48     	; 0xb0a <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ada:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     ade:	80 ff       	sbrs	r24, 0
     ae0:	14 c0       	rjmp	.+40     	; 0xb0a <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ae2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     ae6:	8e 7f       	andi	r24, 0xFE	; 254
     ae8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     aec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     af0:	80 61       	ori	r24, 0x10	; 16
     af2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     af6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     afa:	80 62       	ori	r24, 0x20	; 32
     afc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b00:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     b02:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     b06:	0e 94 ab 06 	call	0xd56	; 0xd56 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b0a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b0e:	84 ff       	sbrs	r24, 4
     b10:	30 c0       	rjmp	.+96     	; 0xb72 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b16:	84 ff       	sbrs	r24, 4
     b18:	2c c0       	rjmp	.+88     	; 0xb72 <__vector_11+0xe0>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b1e:	86 e0       	ldi	r24, 0x06	; 6
     b20:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b22:	09 b4       	in	r0, 0x29	; 41
     b24:	00 fe       	sbrs	r0, 0
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <__vector_11+0x90>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     b2c:	8f 7d       	andi	r24, 0xDF	; 223
     b2e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     b36:	8f 7e       	andi	r24, 0xEF	; 239
     b38:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b3c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b40:	8f 7e       	andi	r24, 0xEF	; 239
     b42:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b4a:	81 60       	ori	r24, 0x01	; 1
     b4c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b50:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <USB_Device_ConfigurationNumber>
     b54:	88 23       	and	r24, r24
     b56:	11 f0       	breq	.+4      	; 0xb5c <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	07 c0       	rjmp	.+14     	; 0xb6a <__vector_11+0xd8>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b5c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b60:	87 fd       	sbrc	r24, 7
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <__vector_11+0xd6>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <__vector_11+0xd8>
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     b6e:	0e 94 93 06 	call	0xd26	; 0xd26 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b72:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b76:	83 ff       	sbrs	r24, 3
     b78:	24 c0       	rjmp	.+72     	; 0xbc2 <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b7a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     b7e:	83 ff       	sbrs	r24, 3
     b80:	20 c0       	rjmp	.+64     	; 0xbc2 <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     b82:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     b86:	87 7f       	andi	r24, 0xF7	; 247
     b88:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     b92:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b96:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ba0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     ba4:	8e 7f       	andi	r24, 0xFE	; 254
     ba6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     baa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     bae:	80 61       	ori	r24, 0x10	; 16
     bb0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bb4:	42 e0       	ldi	r20, 0x02	; 2
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	0e 94 37 04 	call	0x86e	; 0x86e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     bbe:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	bf 91       	pop	r27
     bc8:	af 91       	pop	r26
     bca:	9f 91       	pop	r25
     bcc:	8f 91       	pop	r24
     bce:	7f 91       	pop	r23
     bd0:	6f 91       	pop	r22
     bd2:	5f 91       	pop	r21
     bd4:	4f 91       	pop	r20
     bd6:	3f 91       	pop	r19
     bd8:	2f 91       	pop	r18
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0
     be0:	1f 90       	pop	r1
     be2:	18 95       	reti

00000be4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     be4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     be6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     bea:	88 23       	and	r24, r24
     bec:	a1 f0       	breq	.+40     	; 0xc16 <USB_USBTask+0x32>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bee:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     bf2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bf4:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     bf8:	89 2f       	mov	r24, r25
     bfa:	81 70       	andi	r24, 0x01	; 1
     bfc:	90 fd       	sbrc	r25, 0
     bfe:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c00:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c02:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c0a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c0c:	0e 94 95 01 	call	0x32a	; 0x32a <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c10:	cf 70       	andi	r28, 0x0F	; 15
     c12:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <SetupHardware>:

// Configures the board hardware and chip peripherals.
void SetupHardware(void) {
	#if (ARCH == ARCH_AVR8)
		// Disable watchdog if enabled by bootloader/fuses
		MCUSR &= ~(1 << WDRF);
     c1a:	84 b7       	in	r24, 0x34	; 52
     c1c:	87 7f       	andi	r24, 0xF7	; 247
     c1e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	a8 95       	wdr
     c26:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     c2a:	88 61       	ori	r24, 0x18	; 24
     c2c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     c30:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     c34:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     c36:	90 e8       	ldi	r25, 0x80	; 128
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     c42:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     c46:	0f be       	out	0x3f, r0	; 63
		// Disable clock division
		clock_prescale_set(clock_div_1);
	#endif
	
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
     c48:	84 b7       	in	r24, 0x34	; 52
     c4a:	87 7f       	andi	r24, 0xF7	; 247
     c4c:	84 bf       	out	0x34, r24	; 52
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	a8 95       	wdr
     c54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     c58:	88 61       	ori	r24, 0x18	; 24
     c5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     c5e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     c6c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     c70:	0f be       	out	0x3f, r0	; 63
	SPCR = (1 << SPE) | (1 << MSTR) | (1<<SPI2X) | (1 << SPR0) | (0 << CPOL) | (0 << CPHA);
	ADS1299_SETUP();
	
	delay_sck_cycles(2^15);*/

	USB_Init();
     c72:	0e 94 39 05 	call	0xa72	; 0xa72 <USB_Init>
	sei();
     c76:	78 94       	sei
	// Setup onboard LED as output
	DDRC |= (1 << PC7);
     c78:	3f 9a       	sbi	0x07, 7	; 7

	// Set LED based on USB configuration state
	if (USB_DeviceState == DEVICE_STATE_Configured)
     c7a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	11 f4       	brne	.+4      	; 0xc86 <SetupHardware+0x6c>
		PORTC |= (1 << PC7);  // LED on
     c82:	47 9a       	sbi	0x08, 7	; 8
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <SetupHardware+0x6e>
	else 
		PORTC &= ~(1 << PC7); // LED off
     c86:	47 98       	cbi	0x08, 7	; 8
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     c88:	88 e0       	ldi	r24, 0x08	; 8
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <CDC_Device_ConfigureEndpoints>

00000c90 <main>:
	// Set SPI LED high and low in startup sequence as well
	lightUp(1, pin_SS, 1000);
	lightUp(2, pin_SS, 1000);
	lightUp(3, pin_SS, 1000);*/
				
	SetupHardware();
     c90:	0e 94 0d 06 	call	0xc1a	; 0xc1a <SetupHardware>
	#ifdef TEST_USB
		#include "Tests/test_USB.c"
		test_usb();
	#endif */	

	long long int a = 0;
     c94:	e1 2c       	mov	r14, r1
     c96:	f1 2c       	mov	r15, r1
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	c1 2c       	mov	r12, r1
     ca2:	d1 2c       	mov	r13, r1
	/*uint8_t values[1] = {5};
	uint8_t add = 0x07; //address of register being changed
	uint8_t prev_val[1];*/

	for (;;) {
		USB_USBTask();
     ca4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <USB_USBTask>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     ca8:	88 e0       	ldi	r24, 0x08	; 8
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 7e 01 	call	0x2fc	; 0x2fc <CDC_Device_USBTask>
		//port_GPIO &= ~(1 << pin_LED_DEBUG);
		//delay_sck_cycles(time2sck(1500));
		port_GPIO |= (1 << pin_LED_DEBUG);
     cb0:	5f 9a       	sbi	0x0b, 7	; 11
		}
		a++;
		port_GPIO &= ~(1 << pin_LED_DEBUG);
	*/
	
		if (a > 100000) {
     cb2:	97 01       	movw	r18, r14
     cb4:	a8 01       	movw	r20, r16
     cb6:	6d 2f       	mov	r22, r29
     cb8:	7c 2f       	mov	r23, r28
     cba:	c6 01       	movw	r24, r12
     cbc:	20 3a       	cpi	r18, 0xA0	; 160
     cbe:	36 48       	sbci	r19, 0x86	; 134
     cc0:	41 40       	sbci	r20, 0x01	; 1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	81 05       	cpc	r24, r1
     cca:	91 05       	cpc	r25, r1
     ccc:	f1 f0       	breq	.+60     	; 0xd0a <main+0x7a>
     cce:	ec f0       	brlt	.+58     	; 0xd0a <main+0x7a>
			//SerialSendString("Setup Done");
			if (USB_DeviceState == DEVICE_STATE_Configured) {
     cd0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_DeviceState>
     cd4:	84 30       	cpi	r24, 0x04	; 4
     cd6:	39 f4       	brne	.+14     	; 0xce6 <main+0x56>
				PORTC |= (1 << PORTC7);  // LED on
     cd8:	47 9a       	sbi	0x08, 7	; 8
 
				CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Debug message\r\n");
     cda:	63 e2       	ldi	r22, 0x23	; 35
     cdc:	71 e0       	ldi	r23, 0x01	; 1
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 32 01 	call	0x264	; 0x264 <CDC_Device_SendString>
			}
			a -= 100000;
     ce6:	97 01       	movw	r18, r14
     ce8:	a8 01       	movw	r20, r16
     cea:	6d 2f       	mov	r22, r29
     cec:	7c 2f       	mov	r23, r28
     cee:	c6 01       	movw	r24, r12
     cf0:	20 5a       	subi	r18, 0xA0	; 160
     cf2:	36 48       	sbci	r19, 0x86	; 134
     cf4:	41 40       	sbci	r20, 0x01	; 1
     cf6:	51 09       	sbc	r21, r1
     cf8:	61 09       	sbc	r22, r1
     cfa:	71 09       	sbc	r23, r1
     cfc:	81 09       	sbc	r24, r1
     cfe:	91 09       	sbc	r25, r1
     d00:	79 01       	movw	r14, r18
     d02:	8a 01       	movw	r16, r20
     d04:	d6 2f       	mov	r29, r22
     d06:	c7 2f       	mov	r28, r23
     d08:	6c 01       	movw	r12, r24
		}
		
		a++;
     d0a:	97 01       	movw	r18, r14
     d0c:	a8 01       	movw	r20, r16
     d0e:	6d 2f       	mov	r22, r29
     d10:	7c 2f       	mov	r23, r28
     d12:	c6 01       	movw	r24, r12
     d14:	a1 e0       	ldi	r26, 0x01	; 1
     d16:	0e 94 cb 07 	call	0xf96	; 0xf96 <__adddi3_s8>
     d1a:	79 01       	movw	r14, r18
     d1c:	8a 01       	movw	r16, r20
     d1e:	d6 2f       	mov	r29, r22
     d20:	c7 2f       	mov	r28, r23
     d22:	6c 01       	movw	r12, r24
	}
     d24:	bf cf       	rjmp	.-130    	; 0xca4 <main+0x14>

00000d26 <EVENT_USB_Device_Connect>:
}

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs, and
 *  configures the sample update and PWM timers.
 */
void EVENT_USB_Device_Connect(void) {
     d26:	cf 93       	push	r28
	/* Indicate USB enumerating */
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     d28:	c2 e0       	ldi	r28, 0x02	; 2
     d2a:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     d2e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
     d32:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     d36:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     d3a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <CurrentAudioSampleFrequency+0x3>
     d3e:	60 e8       	ldi	r22, 0x80	; 128
     d40:	74 e8       	ldi	r23, 0x84	; 132
     d42:	8e e1       	ldi	r24, 0x1E	; 30
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 a3 07 	call	0xf46	; 0xf46 <__udivmodsi4>
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	27 bd       	out	0x27, r18	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     d4e:	c4 bd       	out	0x24, r28	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     d50:	c5 bd       	out	0x25, r28	; 37
}
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <EVENT_USB_Device_Disconnect>:
/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void) {
	/* Stop the sample reload timer */
	TCCR0B = 0;
     d56:	15 bc       	out	0x25, r1	; 37

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
     d58:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
     d5c:	08 95       	ret

00000d5e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     d5e:	46 e5       	ldi	r20, 0x56	; 86
     d60:	61 e4       	ldi	r22, 0x41	; 65
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	0c 94 37 04 	jmp	0x86e	; 0x86e <Endpoint_ConfigureEndpoint_Prv>

00000d68 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <EVENT_USB_Device_ControlRequest+0x6>
     d6e:	1f 92       	push	r1
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest) {
     d74:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest+0x1>
     d78:	8b 30       	cpi	r24, 0x0B	; 11
     d7a:	51 f0       	breq	.+20     	; 0xd90 <EVENT_USB_Device_ControlRequest+0x28>
     d7c:	18 f4       	brcc	.+6      	; 0xd84 <EVENT_USB_Device_ControlRequest+0x1c>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	61 f1       	breq	.+88     	; 0xdda <EVENT_USB_Device_ControlRequest+0x72>
     d82:	8f c0       	rjmp	.+286    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
     d84:	81 38       	cpi	r24, 0x81	; 129
     d86:	09 f4       	brne	.+2      	; 0xd8a <EVENT_USB_Device_ControlRequest+0x22>
     d88:	67 c0       	rjmp	.+206    	; 0xe58 <EVENT_USB_Device_ControlRequest+0xf0>
     d8a:	8f 3f       	cpi	r24, 0xFF	; 255
     d8c:	c1 f0       	breq	.+48     	; 0xdbe <EVENT_USB_Device_ControlRequest+0x56>
     d8e:	89 c0       	rjmp	.+274    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
     d90:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest>
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	09 f0       	breq	.+2      	; 0xd9a <EVENT_USB_Device_ControlRequest+0x32>
     d98:	84 c0       	rjmp	.+264    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     da4:	0e 94 aa 04 	call	0x954	; 0x954 <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <USB_ControlRequest+0x2>
     dae:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <USB_ControlRequest+0x3>
     db2:	23 2b       	or	r18, r19
     db4:	09 f4       	brne	.+2      	; 0xdb8 <EVENT_USB_Device_ControlRequest+0x50>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
     dbc:	72 c0       	rjmp	.+228    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>

			break;
		case AUDIO_REQ_GetStatus:
			/* Get Status request can be directed at either the interface or endpoint, neither is currently used
			 * according to the latest USB Audio 1.0 standard, but must be ACKed with no data when requested */
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
     dbe:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest>
     dc2:	81 52       	subi	r24, 0x21	; 33
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	08 f0       	brcs	.+2      	; 0xdca <EVENT_USB_Device_ControlRequest+0x62>
     dc8:	6c c0       	rjmp	.+216    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
     dca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dce:	87 7f       	andi	r24, 0xF7	; 247
     dd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dd4:	0e 94 aa 04 	call	0x954	; 0x954 <Endpoint_ClearStatusStage>
     dd8:	64 c0       	rjmp	.+200    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
			}

			break;
		case AUDIO_REQ_SetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
     dda:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest>
     dde:	82 32       	cpi	r24, 0x22	; 34
     de0:	09 f0       	breq	.+2      	; 0xde4 <EVENT_USB_Device_ControlRequest+0x7c>
     de2:	5f c0       	rjmp	.+190    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
				/* Extract out the relevant request information to get the target Endpoint address and control being set */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);

				/* Only handle SET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
     de4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest+0x4>
     de8:	81 38       	cpi	r24, 0x81	; 129
     dea:	09 f0       	breq	.+2      	; 0xdee <EVENT_USB_Device_ControlRequest+0x86>
     dec:	5a c0       	rjmp	.+180    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
     dee:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x3>
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	09 f0       	breq	.+2      	; 0xdf8 <EVENT_USB_Device_ControlRequest+0x90>
     df6:	55 c0       	rjmp	.+170    	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
     df8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				{
					uint8_t SampleRate[3];

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(SampleRate, sizeof(SampleRate));
     e02:	63 e0       	ldi	r22, 0x03	; 3
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 9d 03 	call	0x73a	; 0x73a <Endpoint_Read_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e12:	8e 77       	andi	r24, 0x7E	; 126
     e14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
					Endpoint_ClearIN();

					/* Set the new sampling frequency to the value given by the host */
					CurrentAudioSampleFrequency = (((uint32_t)SampleRate[2] << 16) | ((uint32_t)SampleRate[1] << 8) | (uint32_t)SampleRate[0]);
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	2a 81       	ldd	r18, Y+2	; 0x02
     e1c:	42 2f       	mov	r20, r18
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	76 2f       	mov	r23, r22
     e26:	65 2f       	mov	r22, r21
     e28:	54 2f       	mov	r21, r20
     e2a:	44 27       	eor	r20, r20
     e2c:	68 2b       	or	r22, r24
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 01       	movw	r18, r20
     e32:	ab 01       	movw	r20, r22
     e34:	28 2b       	or	r18, r24
     e36:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <CurrentAudioSampleFrequency>
     e3a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     e3e:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     e42:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <CurrentAudioSampleFrequency+0x3>

					/* Adjust sample reload timer to the new frequency */
					OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     e46:	60 e8       	ldi	r22, 0x80	; 128
     e48:	74 e8       	ldi	r23, 0x84	; 132
     e4a:	8e e1       	ldi	r24, 0x1E	; 30
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 a3 07 	call	0xf46	; 0xf46 <__udivmodsi4>
     e52:	21 50       	subi	r18, 0x01	; 1
     e54:	27 bd       	out	0x27, r18	; 39
     e56:	25 c0       	rjmp	.+74     	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
				}
			}

			break;
		case AUDIO_REQ_GetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     e58:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest>
     e5c:	82 3a       	cpi	r24, 0xA2	; 162
     e5e:	09 f5       	brne	.+66     	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
				/* Extract out the relevant request information to get the target Endpoint address and control being retrieved */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);

				/* Only handle GET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
     e60:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USB_ControlRequest+0x4>
     e64:	81 38       	cpi	r24, 0x81	; 129
     e66:	e9 f4       	brne	.+58     	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
     e68:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x3>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	c9 f4       	brne	.+50     	; 0xea2 <EVENT_USB_Device_ControlRequest+0x13a>
				{
					uint8_t SampleRate[3];

					/* Convert the sampling rate value into the 24-bit format the host expects for the property */
					SampleRate[2] = (CurrentAudioSampleFrequency >> 16);
     e70:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
     e74:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     e78:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     e7c:	2b 83       	std	Y+3, r18	; 0x03
					SampleRate[1] = (CurrentAudioSampleFrequency >> 8);
     e7e:	9a 83       	std	Y+2, r25	; 0x02
					SampleRate[0] = (CurrentAudioSampleFrequency &  0xFF);
     e80:	89 83       	std	Y+1, r24	; 0x01
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(SampleRate, sizeof(SampleRate));
     e8c:	63 e0       	ldi	r22, 0x03	; 3
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	0e 94 42 03 	call	0x684	; 0x684 <Endpoint_Write_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     e9c:	8b 77       	andi	r24, 0x7B	; 123
     e9e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				}
			}

			break;
	}
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <__vector_19>:

// ISR to handle the reloading of the data endpoint with the next sample.
ISR(TIMER0_COMPA_vect, ISR_BLOCK) {
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	cf 93       	push	r28
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ed2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     ed6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     ed8:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     edc:	89 2f       	mov	r24, r25
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	90 fd       	sbrc	r25, 0
     ee2:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ee4:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPADDR);

	/* Check if the current endpoint can be written to and that the audio interface is enabled */
	if (Endpoint_IsINReady() && StreamingAudioInterfaceSelected)
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <__vector_19+0x6e>
     ef4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     ef8:	88 23       	and	r24, r24
     efa:	81 f0       	breq	.+32     	; 0xf1c <__vector_19+0x6e>
	{
		int16_t AudioSample;

		/* Generate random sample between -32768 and 32767 */
		AudioSample = (rand() % 65536) - 32768;
     efc:	0e 94 25 08 	call	0x104a	; 0x104a <rand>
     f00:	90 58       	subi	r25, 0x80	; 128
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f02:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     f06:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *          on its direction.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		/* Write the sample to the buffer */
		Endpoint_Write_16_LE(AudioSample);

		/* Check to see if the bank is now full */
		if (!(Endpoint_IsReadWriteAllowed()))
     f0e:	85 fd       	sbrc	r24, 5
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <__vector_19+0x6e>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     f16:	8e 77       	andi	r24, 0x7E	; 126
     f18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f1c:	cf 70       	andi	r28, 0x0F	; 15
     f1e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			Endpoint_ClearIN();
		}
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	cf 91       	pop	r28
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__udivmodsi4>:
     f46:	a1 e2       	ldi	r26, 0x21	; 33
     f48:	1a 2e       	mov	r1, r26
     f4a:	aa 1b       	sub	r26, r26
     f4c:	bb 1b       	sub	r27, r27
     f4e:	fd 01       	movw	r30, r26
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <__udivmodsi4_ep>

00000f52 <__udivmodsi4_loop>:
     f52:	aa 1f       	adc	r26, r26
     f54:	bb 1f       	adc	r27, r27
     f56:	ee 1f       	adc	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	a2 17       	cp	r26, r18
     f5c:	b3 07       	cpc	r27, r19
     f5e:	e4 07       	cpc	r30, r20
     f60:	f5 07       	cpc	r31, r21
     f62:	20 f0       	brcs	.+8      	; 0xf6c <__udivmodsi4_ep>
     f64:	a2 1b       	sub	r26, r18
     f66:	b3 0b       	sbc	r27, r19
     f68:	e4 0b       	sbc	r30, r20
     f6a:	f5 0b       	sbc	r31, r21

00000f6c <__udivmodsi4_ep>:
     f6c:	66 1f       	adc	r22, r22
     f6e:	77 1f       	adc	r23, r23
     f70:	88 1f       	adc	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	1a 94       	dec	r1
     f76:	69 f7       	brne	.-38     	; 0xf52 <__udivmodsi4_loop>
     f78:	60 95       	com	r22
     f7a:	70 95       	com	r23
     f7c:	80 95       	com	r24
     f7e:	90 95       	com	r25
     f80:	9b 01       	movw	r18, r22
     f82:	ac 01       	movw	r20, r24
     f84:	bd 01       	movw	r22, r26
     f86:	cf 01       	movw	r24, r30
     f88:	08 95       	ret

00000f8a <__tablejump2__>:
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	05 90       	lpm	r0, Z+
     f90:	f4 91       	lpm	r31, Z
     f92:	e0 2d       	mov	r30, r0
     f94:	09 94       	ijmp

00000f96 <__adddi3_s8>:
     f96:	00 24       	eor	r0, r0
     f98:	a7 fd       	sbrc	r26, 7
     f9a:	00 94       	com	r0
     f9c:	2a 0f       	add	r18, r26
     f9e:	30 1d       	adc	r19, r0
     fa0:	40 1d       	adc	r20, r0
     fa2:	50 1d       	adc	r21, r0
     fa4:	60 1d       	adc	r22, r0
     fa6:	70 1d       	adc	r23, r0
     fa8:	80 1d       	adc	r24, r0
     faa:	90 1d       	adc	r25, r0
     fac:	08 95       	ret

00000fae <do_rand>:
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	ec 01       	movw	r28, r24
     fc4:	68 81       	ld	r22, Y
     fc6:	79 81       	ldd	r23, Y+1	; 0x01
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	61 15       	cp	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	81 05       	cpc	r24, r1
     fd2:	91 05       	cpc	r25, r1
     fd4:	21 f4       	brne	.+8      	; 0xfde <do_rand+0x30>
     fd6:	64 e2       	ldi	r22, 0x24	; 36
     fd8:	79 ed       	ldi	r23, 0xD9	; 217
     fda:	8b e5       	ldi	r24, 0x5B	; 91
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	2d e1       	ldi	r18, 0x1D	; 29
     fe0:	33 ef       	ldi	r19, 0xF3	; 243
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	0e 94 ed 0a 	call	0x15da	; 0x15da <__divmodsi4>
     fea:	49 01       	movw	r8, r18
     fec:	5a 01       	movw	r10, r20
     fee:	27 ea       	ldi	r18, 0xA7	; 167
     ff0:	31 e4       	ldi	r19, 0x41	; 65
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsi3>
     ffa:	6b 01       	movw	r12, r22
     ffc:	7c 01       	movw	r14, r24
     ffe:	2c ee       	ldi	r18, 0xEC	; 236
    1000:	34 ef       	ldi	r19, 0xF4	; 244
    1002:	4f ef       	ldi	r20, 0xFF	; 255
    1004:	5f ef       	ldi	r21, 0xFF	; 255
    1006:	c5 01       	movw	r24, r10
    1008:	b4 01       	movw	r22, r8
    100a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsi3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8c 0d       	add	r24, r12
    1014:	9d 1d       	adc	r25, r13
    1016:	ae 1d       	adc	r26, r14
    1018:	bf 1d       	adc	r27, r15
    101a:	b7 ff       	sbrs	r27, 7
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <do_rand+0x76>
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	a1 09       	sbc	r26, r1
    1022:	b0 48       	sbci	r27, 0x80	; 128
    1024:	88 83       	st	Y, r24
    1026:	99 83       	std	Y+1, r25	; 0x01
    1028:	aa 83       	std	Y+2, r26	; 0x02
    102a:	bb 83       	std	Y+3, r27	; 0x03
    102c:	9f 77       	andi	r25, 0x7F	; 127
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	9f 90       	pop	r9
    1040:	8f 90       	pop	r8
    1042:	08 95       	ret

00001044 <rand_r>:
    1044:	0e 94 d7 07 	call	0xfae	; 0xfae <do_rand>
    1048:	08 95       	ret

0000104a <rand>:
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	0e 94 d7 07 	call	0xfae	; 0xfae <do_rand>
    1052:	08 95       	ret

00001054 <srand>:
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    105c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1060:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1064:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1068:	08 95       	ret

0000106a <vfprintf>:
    106a:	ab e0       	ldi	r26, 0x0B	; 11
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f8 e0       	ldi	r31, 0x08	; 8
    1072:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__prologue_saves__>
    1076:	6c 01       	movw	r12, r24
    1078:	7b 01       	movw	r14, r22
    107a:	8a 01       	movw	r16, r20
    107c:	fc 01       	movw	r30, r24
    107e:	17 82       	std	Z+7, r1	; 0x07
    1080:	16 82       	std	Z+6, r1	; 0x06
    1082:	83 81       	ldd	r24, Z+3	; 0x03
    1084:	81 ff       	sbrs	r24, 1
    1086:	cf c1       	rjmp	.+926    	; 0x1426 <vfprintf+0x3bc>
    1088:	ce 01       	movw	r24, r28
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	3c 01       	movw	r6, r24
    108e:	f6 01       	movw	r30, r12
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	f7 01       	movw	r30, r14
    1094:	93 fd       	sbrc	r25, 3
    1096:	85 91       	lpm	r24, Z+
    1098:	93 ff       	sbrs	r25, 3
    109a:	81 91       	ld	r24, Z+
    109c:	7f 01       	movw	r14, r30
    109e:	88 23       	and	r24, r24
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <vfprintf+0x3a>
    10a2:	bd c1       	rjmp	.+890    	; 0x141e <vfprintf+0x3b4>
    10a4:	85 32       	cpi	r24, 0x25	; 37
    10a6:	39 f4       	brne	.+14     	; 0x10b6 <vfprintf+0x4c>
    10a8:	93 fd       	sbrc	r25, 3
    10aa:	85 91       	lpm	r24, Z+
    10ac:	93 ff       	sbrs	r25, 3
    10ae:	81 91       	ld	r24, Z+
    10b0:	7f 01       	movw	r14, r30
    10b2:	85 32       	cpi	r24, 0x25	; 37
    10b4:	29 f4       	brne	.+10     	; 0x10c0 <vfprintf+0x56>
    10b6:	b6 01       	movw	r22, r12
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    10be:	e7 cf       	rjmp	.-50     	; 0x108e <vfprintf+0x24>
    10c0:	91 2c       	mov	r9, r1
    10c2:	21 2c       	mov	r2, r1
    10c4:	31 2c       	mov	r3, r1
    10c6:	ff e1       	ldi	r31, 0x1F	; 31
    10c8:	f3 15       	cp	r31, r3
    10ca:	e0 f0       	brcs	.+56     	; 0x1104 <vfprintf+0x9a>
    10cc:	8b 32       	cpi	r24, 0x2B	; 43
    10ce:	79 f0       	breq	.+30     	; 0x10ee <vfprintf+0x84>
    10d0:	38 f4       	brcc	.+14     	; 0x10e0 <vfprintf+0x76>
    10d2:	80 32       	cpi	r24, 0x20	; 32
    10d4:	79 f0       	breq	.+30     	; 0x10f4 <vfprintf+0x8a>
    10d6:	83 32       	cpi	r24, 0x23	; 35
    10d8:	a9 f4       	brne	.+42     	; 0x1104 <vfprintf+0x9a>
    10da:	23 2d       	mov	r18, r3
    10dc:	20 61       	ori	r18, 0x10	; 16
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <vfprintf+0x96>
    10e0:	8d 32       	cpi	r24, 0x2D	; 45
    10e2:	59 f0       	breq	.+22     	; 0x10fa <vfprintf+0x90>
    10e4:	80 33       	cpi	r24, 0x30	; 48
    10e6:	71 f4       	brne	.+28     	; 0x1104 <vfprintf+0x9a>
    10e8:	23 2d       	mov	r18, r3
    10ea:	21 60       	ori	r18, 0x01	; 1
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <vfprintf+0x96>
    10ee:	83 2d       	mov	r24, r3
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	38 2e       	mov	r3, r24
    10f4:	e3 2d       	mov	r30, r3
    10f6:	e4 60       	ori	r30, 0x04	; 4
    10f8:	24 c0       	rjmp	.+72     	; 0x1142 <vfprintf+0xd8>
    10fa:	f3 2d       	mov	r31, r3
    10fc:	f8 60       	ori	r31, 0x08	; 8
    10fe:	27 c0       	rjmp	.+78     	; 0x114e <vfprintf+0xe4>
    1100:	32 2e       	mov	r3, r18
    1102:	29 c0       	rjmp	.+82     	; 0x1156 <vfprintf+0xec>
    1104:	37 fc       	sbrc	r3, 7
    1106:	2f c0       	rjmp	.+94     	; 0x1166 <vfprintf+0xfc>
    1108:	20 ed       	ldi	r18, 0xD0	; 208
    110a:	28 0f       	add	r18, r24
    110c:	2a 30       	cpi	r18, 0x0A	; 10
    110e:	98 f4       	brcc	.+38     	; 0x1136 <vfprintf+0xcc>
    1110:	36 fe       	sbrs	r3, 6
    1112:	07 c0       	rjmp	.+14     	; 0x1122 <vfprintf+0xb8>
    1114:	89 2d       	mov	r24, r9
    1116:	6a e0       	ldi	r22, 0x0A	; 10
    1118:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulqi3>
    111c:	92 2e       	mov	r9, r18
    111e:	98 0e       	add	r9, r24
    1120:	1a c0       	rjmp	.+52     	; 0x1156 <vfprintf+0xec>
    1122:	82 2d       	mov	r24, r2
    1124:	6a e0       	ldi	r22, 0x0A	; 10
    1126:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulqi3>
    112a:	22 2e       	mov	r2, r18
    112c:	28 0e       	add	r2, r24
    112e:	83 2d       	mov	r24, r3
    1130:	80 62       	ori	r24, 0x20	; 32
    1132:	38 2e       	mov	r3, r24
    1134:	10 c0       	rjmp	.+32     	; 0x1156 <vfprintf+0xec>
    1136:	8e 32       	cpi	r24, 0x2E	; 46
    1138:	31 f4       	brne	.+12     	; 0x1146 <vfprintf+0xdc>
    113a:	36 fc       	sbrc	r3, 6
    113c:	70 c1       	rjmp	.+736    	; 0x141e <vfprintf+0x3b4>
    113e:	e3 2d       	mov	r30, r3
    1140:	e0 64       	ori	r30, 0x40	; 64
    1142:	3e 2e       	mov	r3, r30
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <vfprintf+0xec>
    1146:	8c 36       	cpi	r24, 0x6C	; 108
    1148:	21 f4       	brne	.+8      	; 0x1152 <vfprintf+0xe8>
    114a:	f3 2d       	mov	r31, r3
    114c:	f0 68       	ori	r31, 0x80	; 128
    114e:	3f 2e       	mov	r3, r31
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <vfprintf+0xec>
    1152:	88 36       	cpi	r24, 0x68	; 104
    1154:	41 f4       	brne	.+16     	; 0x1166 <vfprintf+0xfc>
    1156:	f7 01       	movw	r30, r14
    1158:	93 fd       	sbrc	r25, 3
    115a:	85 91       	lpm	r24, Z+
    115c:	93 ff       	sbrs	r25, 3
    115e:	81 91       	ld	r24, Z+
    1160:	7f 01       	movw	r14, r30
    1162:	81 11       	cpse	r24, r1
    1164:	b0 cf       	rjmp	.-160    	; 0x10c6 <vfprintf+0x5c>
    1166:	98 2f       	mov	r25, r24
    1168:	9f 7d       	andi	r25, 0xDF	; 223
    116a:	95 54       	subi	r25, 0x45	; 69
    116c:	93 30       	cpi	r25, 0x03	; 3
    116e:	28 f4       	brcc	.+10     	; 0x117a <vfprintf+0x110>
    1170:	0c 5f       	subi	r16, 0xFC	; 252
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	2f e3       	ldi	r18, 0x3F	; 63
    1176:	29 83       	std	Y+1, r18	; 0x01
    1178:	0d c0       	rjmp	.+26     	; 0x1194 <vfprintf+0x12a>
    117a:	83 36       	cpi	r24, 0x63	; 99
    117c:	31 f0       	breq	.+12     	; 0x118a <vfprintf+0x120>
    117e:	83 37       	cpi	r24, 0x73	; 115
    1180:	71 f0       	breq	.+28     	; 0x119e <vfprintf+0x134>
    1182:	83 35       	cpi	r24, 0x53	; 83
    1184:	09 f0       	breq	.+2      	; 0x1188 <vfprintf+0x11e>
    1186:	59 c0       	rjmp	.+178    	; 0x123a <vfprintf+0x1d0>
    1188:	21 c0       	rjmp	.+66     	; 0x11cc <vfprintf+0x162>
    118a:	f8 01       	movw	r30, r16
    118c:	80 81       	ld	r24, Z
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	0e 5f       	subi	r16, 0xFE	; 254
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	88 24       	eor	r8, r8
    1196:	83 94       	inc	r8
    1198:	91 2c       	mov	r9, r1
    119a:	53 01       	movw	r10, r6
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <vfprintf+0x15a>
    119e:	28 01       	movw	r4, r16
    11a0:	f2 e0       	ldi	r31, 0x02	; 2
    11a2:	4f 0e       	add	r4, r31
    11a4:	51 1c       	adc	r5, r1
    11a6:	f8 01       	movw	r30, r16
    11a8:	a0 80       	ld	r10, Z
    11aa:	b1 80       	ldd	r11, Z+1	; 0x01
    11ac:	36 fe       	sbrs	r3, 6
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <vfprintf+0x14c>
    11b0:	69 2d       	mov	r22, r9
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <vfprintf+0x150>
    11b6:	6f ef       	ldi	r22, 0xFF	; 255
    11b8:	7f ef       	ldi	r23, 0xFF	; 255
    11ba:	c5 01       	movw	r24, r10
    11bc:	0e 94 24 0a 	call	0x1448	; 0x1448 <strnlen>
    11c0:	4c 01       	movw	r8, r24
    11c2:	82 01       	movw	r16, r4
    11c4:	f3 2d       	mov	r31, r3
    11c6:	ff 77       	andi	r31, 0x7F	; 127
    11c8:	3f 2e       	mov	r3, r31
    11ca:	16 c0       	rjmp	.+44     	; 0x11f8 <vfprintf+0x18e>
    11cc:	28 01       	movw	r4, r16
    11ce:	22 e0       	ldi	r18, 0x02	; 2
    11d0:	42 0e       	add	r4, r18
    11d2:	51 1c       	adc	r5, r1
    11d4:	f8 01       	movw	r30, r16
    11d6:	a0 80       	ld	r10, Z
    11d8:	b1 80       	ldd	r11, Z+1	; 0x01
    11da:	36 fe       	sbrs	r3, 6
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <vfprintf+0x17a>
    11de:	69 2d       	mov	r22, r9
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0x17e>
    11e4:	6f ef       	ldi	r22, 0xFF	; 255
    11e6:	7f ef       	ldi	r23, 0xFF	; 255
    11e8:	c5 01       	movw	r24, r10
    11ea:	0e 94 19 0a 	call	0x1432	; 0x1432 <strnlen_P>
    11ee:	4c 01       	movw	r8, r24
    11f0:	f3 2d       	mov	r31, r3
    11f2:	f0 68       	ori	r31, 0x80	; 128
    11f4:	3f 2e       	mov	r3, r31
    11f6:	82 01       	movw	r16, r4
    11f8:	33 fc       	sbrc	r3, 3
    11fa:	1b c0       	rjmp	.+54     	; 0x1232 <vfprintf+0x1c8>
    11fc:	82 2d       	mov	r24, r2
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	88 16       	cp	r8, r24
    1202:	99 06       	cpc	r9, r25
    1204:	b0 f4       	brcc	.+44     	; 0x1232 <vfprintf+0x1c8>
    1206:	b6 01       	movw	r22, r12
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    1210:	2a 94       	dec	r2
    1212:	f4 cf       	rjmp	.-24     	; 0x11fc <vfprintf+0x192>
    1214:	f5 01       	movw	r30, r10
    1216:	37 fc       	sbrc	r3, 7
    1218:	85 91       	lpm	r24, Z+
    121a:	37 fe       	sbrs	r3, 7
    121c:	81 91       	ld	r24, Z+
    121e:	5f 01       	movw	r10, r30
    1220:	b6 01       	movw	r22, r12
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    1228:	21 10       	cpse	r2, r1
    122a:	2a 94       	dec	r2
    122c:	21 e0       	ldi	r18, 0x01	; 1
    122e:	82 1a       	sub	r8, r18
    1230:	91 08       	sbc	r9, r1
    1232:	81 14       	cp	r8, r1
    1234:	91 04       	cpc	r9, r1
    1236:	71 f7       	brne	.-36     	; 0x1214 <vfprintf+0x1aa>
    1238:	e8 c0       	rjmp	.+464    	; 0x140a <vfprintf+0x3a0>
    123a:	84 36       	cpi	r24, 0x64	; 100
    123c:	11 f0       	breq	.+4      	; 0x1242 <vfprintf+0x1d8>
    123e:	89 36       	cpi	r24, 0x69	; 105
    1240:	41 f5       	brne	.+80     	; 0x1292 <vfprintf+0x228>
    1242:	f8 01       	movw	r30, r16
    1244:	37 fe       	sbrs	r3, 7
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <vfprintf+0x1ec>
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	0c 5f       	subi	r16, 0xFC	; 252
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <vfprintf+0x1fc>
    1256:	60 81       	ld	r22, Z
    1258:	71 81       	ldd	r23, Z+1	; 0x01
    125a:	07 2e       	mov	r0, r23
    125c:	00 0c       	add	r0, r0
    125e:	88 0b       	sbc	r24, r24
    1260:	99 0b       	sbc	r25, r25
    1262:	0e 5f       	subi	r16, 0xFE	; 254
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	f3 2d       	mov	r31, r3
    1268:	ff 76       	andi	r31, 0x6F	; 111
    126a:	3f 2e       	mov	r3, r31
    126c:	97 ff       	sbrs	r25, 7
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <vfprintf+0x218>
    1270:	90 95       	com	r25
    1272:	80 95       	com	r24
    1274:	70 95       	com	r23
    1276:	61 95       	neg	r22
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	8f 4f       	sbci	r24, 0xFF	; 255
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	f0 68       	ori	r31, 0x80	; 128
    1280:	3f 2e       	mov	r3, r31
    1282:	2a e0       	ldi	r18, 0x0A	; 10
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	a3 01       	movw	r20, r6
    1288:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__ultoa_invert>
    128c:	88 2e       	mov	r8, r24
    128e:	86 18       	sub	r8, r6
    1290:	45 c0       	rjmp	.+138    	; 0x131c <vfprintf+0x2b2>
    1292:	85 37       	cpi	r24, 0x75	; 117
    1294:	31 f4       	brne	.+12     	; 0x12a2 <vfprintf+0x238>
    1296:	23 2d       	mov	r18, r3
    1298:	2f 7e       	andi	r18, 0xEF	; 239
    129a:	b2 2e       	mov	r11, r18
    129c:	2a e0       	ldi	r18, 0x0A	; 10
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	25 c0       	rjmp	.+74     	; 0x12ec <vfprintf+0x282>
    12a2:	93 2d       	mov	r25, r3
    12a4:	99 7f       	andi	r25, 0xF9	; 249
    12a6:	b9 2e       	mov	r11, r25
    12a8:	8f 36       	cpi	r24, 0x6F	; 111
    12aa:	c1 f0       	breq	.+48     	; 0x12dc <vfprintf+0x272>
    12ac:	18 f4       	brcc	.+6      	; 0x12b4 <vfprintf+0x24a>
    12ae:	88 35       	cpi	r24, 0x58	; 88
    12b0:	79 f0       	breq	.+30     	; 0x12d0 <vfprintf+0x266>
    12b2:	b5 c0       	rjmp	.+362    	; 0x141e <vfprintf+0x3b4>
    12b4:	80 37       	cpi	r24, 0x70	; 112
    12b6:	19 f0       	breq	.+6      	; 0x12be <vfprintf+0x254>
    12b8:	88 37       	cpi	r24, 0x78	; 120
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <vfprintf+0x25a>
    12bc:	b0 c0       	rjmp	.+352    	; 0x141e <vfprintf+0x3b4>
    12be:	e9 2f       	mov	r30, r25
    12c0:	e0 61       	ori	r30, 0x10	; 16
    12c2:	be 2e       	mov	r11, r30
    12c4:	b4 fe       	sbrs	r11, 4
    12c6:	0d c0       	rjmp	.+26     	; 0x12e2 <vfprintf+0x278>
    12c8:	fb 2d       	mov	r31, r11
    12ca:	f4 60       	ori	r31, 0x04	; 4
    12cc:	bf 2e       	mov	r11, r31
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <vfprintf+0x278>
    12d0:	34 fe       	sbrs	r3, 4
    12d2:	0a c0       	rjmp	.+20     	; 0x12e8 <vfprintf+0x27e>
    12d4:	29 2f       	mov	r18, r25
    12d6:	26 60       	ori	r18, 0x06	; 6
    12d8:	b2 2e       	mov	r11, r18
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <vfprintf+0x27e>
    12dc:	28 e0       	ldi	r18, 0x08	; 8
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <vfprintf+0x282>
    12e2:	20 e1       	ldi	r18, 0x10	; 16
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <vfprintf+0x282>
    12e8:	20 e1       	ldi	r18, 0x10	; 16
    12ea:	32 e0       	ldi	r19, 0x02	; 2
    12ec:	f8 01       	movw	r30, r16
    12ee:	b7 fe       	sbrs	r11, 7
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <vfprintf+0x296>
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	0c 5f       	subi	r16, 0xFC	; 252
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <vfprintf+0x2a2>
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 5f       	subi	r16, 0xFE	; 254
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	a3 01       	movw	r20, r6
    130e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__ultoa_invert>
    1312:	88 2e       	mov	r8, r24
    1314:	86 18       	sub	r8, r6
    1316:	fb 2d       	mov	r31, r11
    1318:	ff 77       	andi	r31, 0x7F	; 127
    131a:	3f 2e       	mov	r3, r31
    131c:	36 fe       	sbrs	r3, 6
    131e:	0d c0       	rjmp	.+26     	; 0x133a <vfprintf+0x2d0>
    1320:	23 2d       	mov	r18, r3
    1322:	2e 7f       	andi	r18, 0xFE	; 254
    1324:	a2 2e       	mov	r10, r18
    1326:	89 14       	cp	r8, r9
    1328:	58 f4       	brcc	.+22     	; 0x1340 <vfprintf+0x2d6>
    132a:	34 fe       	sbrs	r3, 4
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <vfprintf+0x2da>
    132e:	32 fc       	sbrc	r3, 2
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <vfprintf+0x2da>
    1332:	83 2d       	mov	r24, r3
    1334:	8e 7e       	andi	r24, 0xEE	; 238
    1336:	a8 2e       	mov	r10, r24
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <vfprintf+0x2da>
    133a:	b8 2c       	mov	r11, r8
    133c:	a3 2c       	mov	r10, r3
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <vfprintf+0x2dc>
    1340:	b8 2c       	mov	r11, r8
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <vfprintf+0x2dc>
    1344:	b9 2c       	mov	r11, r9
    1346:	a4 fe       	sbrs	r10, 4
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <vfprintf+0x2fe>
    134a:	fe 01       	movw	r30, r28
    134c:	e8 0d       	add	r30, r8
    134e:	f1 1d       	adc	r31, r1
    1350:	80 81       	ld	r24, Z
    1352:	80 33       	cpi	r24, 0x30	; 48
    1354:	21 f4       	brne	.+8      	; 0x135e <vfprintf+0x2f4>
    1356:	9a 2d       	mov	r25, r10
    1358:	99 7e       	andi	r25, 0xE9	; 233
    135a:	a9 2e       	mov	r10, r25
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <vfprintf+0x306>
    135e:	a2 fe       	sbrs	r10, 2
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x304>
    1362:	b3 94       	inc	r11
    1364:	b3 94       	inc	r11
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <vfprintf+0x306>
    1368:	8a 2d       	mov	r24, r10
    136a:	86 78       	andi	r24, 0x86	; 134
    136c:	09 f0       	breq	.+2      	; 0x1370 <vfprintf+0x306>
    136e:	b3 94       	inc	r11
    1370:	a3 fc       	sbrc	r10, 3
    1372:	11 c0       	rjmp	.+34     	; 0x1396 <vfprintf+0x32c>
    1374:	a0 fe       	sbrs	r10, 0
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <vfprintf+0x31a>
    1378:	b2 14       	cp	r11, r2
    137a:	88 f4       	brcc	.+34     	; 0x139e <vfprintf+0x334>
    137c:	28 0c       	add	r2, r8
    137e:	92 2c       	mov	r9, r2
    1380:	9b 18       	sub	r9, r11
    1382:	0e c0       	rjmp	.+28     	; 0x13a0 <vfprintf+0x336>
    1384:	b2 14       	cp	r11, r2
    1386:	60 f4       	brcc	.+24     	; 0x13a0 <vfprintf+0x336>
    1388:	b6 01       	movw	r22, r12
    138a:	80 e2       	ldi	r24, 0x20	; 32
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    1392:	b3 94       	inc	r11
    1394:	f7 cf       	rjmp	.-18     	; 0x1384 <vfprintf+0x31a>
    1396:	b2 14       	cp	r11, r2
    1398:	18 f4       	brcc	.+6      	; 0x13a0 <vfprintf+0x336>
    139a:	2b 18       	sub	r2, r11
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <vfprintf+0x338>
    139e:	98 2c       	mov	r9, r8
    13a0:	21 2c       	mov	r2, r1
    13a2:	a4 fe       	sbrs	r10, 4
    13a4:	10 c0       	rjmp	.+32     	; 0x13c6 <vfprintf+0x35c>
    13a6:	b6 01       	movw	r22, r12
    13a8:	80 e3       	ldi	r24, 0x30	; 48
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    13b0:	a2 fe       	sbrs	r10, 2
    13b2:	17 c0       	rjmp	.+46     	; 0x13e2 <vfprintf+0x378>
    13b4:	a1 fc       	sbrc	r10, 1
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <vfprintf+0x354>
    13b8:	88 e7       	ldi	r24, 0x78	; 120
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfprintf+0x358>
    13be:	88 e5       	ldi	r24, 0x58	; 88
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	b6 01       	movw	r22, r12
    13c4:	0c c0       	rjmp	.+24     	; 0x13de <vfprintf+0x374>
    13c6:	8a 2d       	mov	r24, r10
    13c8:	86 78       	andi	r24, 0x86	; 134
    13ca:	59 f0       	breq	.+22     	; 0x13e2 <vfprintf+0x378>
    13cc:	a1 fe       	sbrs	r10, 1
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <vfprintf+0x36a>
    13d0:	8b e2       	ldi	r24, 0x2B	; 43
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <vfprintf+0x36c>
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	a7 fc       	sbrc	r10, 7
    13d8:	8d e2       	ldi	r24, 0x2D	; 45
    13da:	b6 01       	movw	r22, r12
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    13e2:	89 14       	cp	r8, r9
    13e4:	38 f4       	brcc	.+14     	; 0x13f4 <vfprintf+0x38a>
    13e6:	b6 01       	movw	r22, r12
    13e8:	80 e3       	ldi	r24, 0x30	; 48
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    13f0:	9a 94       	dec	r9
    13f2:	f7 cf       	rjmp	.-18     	; 0x13e2 <vfprintf+0x378>
    13f4:	8a 94       	dec	r8
    13f6:	f3 01       	movw	r30, r6
    13f8:	e8 0d       	add	r30, r8
    13fa:	f1 1d       	adc	r31, r1
    13fc:	80 81       	ld	r24, Z
    13fe:	b6 01       	movw	r22, r12
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    1406:	81 10       	cpse	r8, r1
    1408:	f5 cf       	rjmp	.-22     	; 0x13f4 <vfprintf+0x38a>
    140a:	22 20       	and	r2, r2
    140c:	09 f4       	brne	.+2      	; 0x1410 <vfprintf+0x3a6>
    140e:	3f ce       	rjmp	.-898    	; 0x108e <vfprintf+0x24>
    1410:	b6 01       	movw	r22, r12
    1412:	80 e2       	ldi	r24, 0x20	; 32
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputc>
    141a:	2a 94       	dec	r2
    141c:	f6 cf       	rjmp	.-20     	; 0x140a <vfprintf+0x3a0>
    141e:	f6 01       	movw	r30, r12
    1420:	86 81       	ldd	r24, Z+6	; 0x06
    1422:	97 81       	ldd	r25, Z+7	; 0x07
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x3c0>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	2b 96       	adiw	r28, 0x0b	; 11
    142c:	e2 e1       	ldi	r30, 0x12	; 18
    142e:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__epilogue_restores__>

00001432 <strnlen_P>:
    1432:	fc 01       	movw	r30, r24
    1434:	05 90       	lpm	r0, Z+
    1436:	61 50       	subi	r22, 0x01	; 1
    1438:	70 40       	sbci	r23, 0x00	; 0
    143a:	01 10       	cpse	r0, r1
    143c:	d8 f7       	brcc	.-10     	; 0x1434 <strnlen_P+0x2>
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	8e 0f       	add	r24, r30
    1444:	9f 1f       	adc	r25, r31
    1446:	08 95       	ret

00001448 <strnlen>:
    1448:	fc 01       	movw	r30, r24
    144a:	61 50       	subi	r22, 0x01	; 1
    144c:	70 40       	sbci	r23, 0x00	; 0
    144e:	01 90       	ld	r0, Z+
    1450:	01 10       	cpse	r0, r1
    1452:	d8 f7       	brcc	.-10     	; 0x144a <strnlen+0x2>
    1454:	80 95       	com	r24
    1456:	90 95       	com	r25
    1458:	8e 0f       	add	r24, r30
    145a:	9f 1f       	adc	r25, r31
    145c:	08 95       	ret

0000145e <fputc>:
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	fb 01       	movw	r30, r22
    1468:	23 81       	ldd	r18, Z+3	; 0x03
    146a:	21 fd       	sbrc	r18, 1
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <fputc+0x16>
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	9f ef       	ldi	r25, 0xFF	; 255
    1472:	2c c0       	rjmp	.+88     	; 0x14cc <fputc+0x6e>
    1474:	22 ff       	sbrs	r18, 2
    1476:	16 c0       	rjmp	.+44     	; 0x14a4 <fputc+0x46>
    1478:	46 81       	ldd	r20, Z+6	; 0x06
    147a:	57 81       	ldd	r21, Z+7	; 0x07
    147c:	24 81       	ldd	r18, Z+4	; 0x04
    147e:	35 81       	ldd	r19, Z+5	; 0x05
    1480:	42 17       	cp	r20, r18
    1482:	53 07       	cpc	r21, r19
    1484:	44 f4       	brge	.+16     	; 0x1496 <fputc+0x38>
    1486:	a0 81       	ld	r26, Z
    1488:	b1 81       	ldd	r27, Z+1	; 0x01
    148a:	9d 01       	movw	r18, r26
    148c:	2f 5f       	subi	r18, 0xFF	; 255
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	31 83       	std	Z+1, r19	; 0x01
    1492:	20 83       	st	Z, r18
    1494:	8c 93       	st	X, r24
    1496:	26 81       	ldd	r18, Z+6	; 0x06
    1498:	37 81       	ldd	r19, Z+7	; 0x07
    149a:	2f 5f       	subi	r18, 0xFF	; 255
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	37 83       	std	Z+7, r19	; 0x07
    14a0:	26 83       	std	Z+6, r18	; 0x06
    14a2:	14 c0       	rjmp	.+40     	; 0x14cc <fputc+0x6e>
    14a4:	8b 01       	movw	r16, r22
    14a6:	ec 01       	movw	r28, r24
    14a8:	fb 01       	movw	r30, r22
    14aa:	00 84       	ldd	r0, Z+8	; 0x08
    14ac:	f1 85       	ldd	r31, Z+9	; 0x09
    14ae:	e0 2d       	mov	r30, r0
    14b0:	09 95       	icall
    14b2:	89 2b       	or	r24, r25
    14b4:	e1 f6       	brne	.-72     	; 0x146e <fputc+0x10>
    14b6:	d8 01       	movw	r26, r16
    14b8:	16 96       	adiw	r26, 0x06	; 6
    14ba:	8d 91       	ld	r24, X+
    14bc:	9c 91       	ld	r25, X
    14be:	17 97       	sbiw	r26, 0x07	; 7
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	17 96       	adiw	r26, 0x07	; 7
    14c4:	9c 93       	st	X, r25
    14c6:	8e 93       	st	-X, r24
    14c8:	16 97       	sbiw	r26, 0x06	; 6
    14ca:	ce 01       	movw	r24, r28
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	08 95       	ret

000014d6 <__ultoa_invert>:
    14d6:	fa 01       	movw	r30, r20
    14d8:	aa 27       	eor	r26, r26
    14da:	28 30       	cpi	r18, 0x08	; 8
    14dc:	61 f1       	breq	.+88     	; 0x1536 <__ultoa_invert+0x60>
    14de:	20 31       	cpi	r18, 0x10	; 16
    14e0:	91 f1       	breq	.+100    	; 0x1546 <__ultoa_invert+0x70>
    14e2:	e8 94       	clt
    14e4:	6f 93       	push	r22
    14e6:	6e 7f       	andi	r22, 0xFE	; 254
    14e8:	6e 5f       	subi	r22, 0xFE	; 254
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	af 4f       	sbci	r26, 0xFF	; 255
    14f2:	b1 e0       	ldi	r27, 0x01	; 1
    14f4:	40 d0       	rcall	.+128    	; 0x1576 <__ultoa_invert+0xa0>
    14f6:	b4 e0       	ldi	r27, 0x04	; 4
    14f8:	3e d0       	rcall	.+124    	; 0x1576 <__ultoa_invert+0xa0>
    14fa:	67 0f       	add	r22, r23
    14fc:	78 1f       	adc	r23, r24
    14fe:	89 1f       	adc	r24, r25
    1500:	9a 1f       	adc	r25, r26
    1502:	a1 1d       	adc	r26, r1
    1504:	68 0f       	add	r22, r24
    1506:	79 1f       	adc	r23, r25
    1508:	8a 1f       	adc	r24, r26
    150a:	91 1d       	adc	r25, r1
    150c:	a1 1d       	adc	r26, r1
    150e:	6a 0f       	add	r22, r26
    1510:	71 1d       	adc	r23, r1
    1512:	81 1d       	adc	r24, r1
    1514:	91 1d       	adc	r25, r1
    1516:	a1 1d       	adc	r26, r1
    1518:	22 d0       	rcall	.+68     	; 0x155e <__ultoa_invert+0x88>
    151a:	09 f4       	brne	.+2      	; 0x151e <__ultoa_invert+0x48>
    151c:	68 94       	set
    151e:	3f 91       	pop	r19
    1520:	06 2e       	mov	r0, r22
    1522:	00 0c       	add	r0, r0
    1524:	30 19       	sub	r19, r0
    1526:	00 0c       	add	r0, r0
    1528:	00 0c       	add	r0, r0
    152a:	30 19       	sub	r19, r0
    152c:	30 5d       	subi	r19, 0xD0	; 208
    152e:	31 93       	st	Z+, r19
    1530:	ce f6       	brtc	.-78     	; 0x14e4 <__ultoa_invert+0xe>
    1532:	cf 01       	movw	r24, r30
    1534:	08 95       	ret
    1536:	46 2f       	mov	r20, r22
    1538:	47 70       	andi	r20, 0x07	; 7
    153a:	40 5d       	subi	r20, 0xD0	; 208
    153c:	41 93       	st	Z+, r20
    153e:	b3 e0       	ldi	r27, 0x03	; 3
    1540:	0f d0       	rcall	.+30     	; 0x1560 <__ultoa_invert+0x8a>
    1542:	c9 f7       	brne	.-14     	; 0x1536 <__ultoa_invert+0x60>
    1544:	f6 cf       	rjmp	.-20     	; 0x1532 <__ultoa_invert+0x5c>
    1546:	46 2f       	mov	r20, r22
    1548:	4f 70       	andi	r20, 0x0F	; 15
    154a:	40 5d       	subi	r20, 0xD0	; 208
    154c:	4a 33       	cpi	r20, 0x3A	; 58
    154e:	18 f0       	brcs	.+6      	; 0x1556 <__ultoa_invert+0x80>
    1550:	49 5d       	subi	r20, 0xD9	; 217
    1552:	31 fd       	sbrc	r19, 1
    1554:	40 52       	subi	r20, 0x20	; 32
    1556:	41 93       	st	Z+, r20
    1558:	02 d0       	rcall	.+4      	; 0x155e <__ultoa_invert+0x88>
    155a:	a9 f7       	brne	.-22     	; 0x1546 <__ultoa_invert+0x70>
    155c:	ea cf       	rjmp	.-44     	; 0x1532 <__ultoa_invert+0x5c>
    155e:	b4 e0       	ldi	r27, 0x04	; 4
    1560:	a6 95       	lsr	r26
    1562:	97 95       	ror	r25
    1564:	87 95       	ror	r24
    1566:	77 95       	ror	r23
    1568:	67 95       	ror	r22
    156a:	ba 95       	dec	r27
    156c:	c9 f7       	brne	.-14     	; 0x1560 <__ultoa_invert+0x8a>
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 05       	cpc	r22, r1
    1572:	71 05       	cpc	r23, r1
    1574:	08 95       	ret
    1576:	9b 01       	movw	r18, r22
    1578:	ac 01       	movw	r20, r24
    157a:	0a 2e       	mov	r0, r26
    157c:	06 94       	lsr	r0
    157e:	57 95       	ror	r21
    1580:	47 95       	ror	r20
    1582:	37 95       	ror	r19
    1584:	27 95       	ror	r18
    1586:	ba 95       	dec	r27
    1588:	c9 f7       	brne	.-14     	; 0x157c <__ultoa_invert+0xa6>
    158a:	62 0f       	add	r22, r18
    158c:	73 1f       	adc	r23, r19
    158e:	84 1f       	adc	r24, r20
    1590:	95 1f       	adc	r25, r21
    1592:	a0 1d       	adc	r26, r0
    1594:	08 95       	ret

00001596 <__mulqi3>:
    1596:	00 24       	eor	r0, r0

00001598 <__mulqi3_loop>:
    1598:	80 fd       	sbrc	r24, 0
    159a:	06 0e       	add	r0, r22
    159c:	66 0f       	add	r22, r22
    159e:	11 f0       	breq	.+4      	; 0x15a4 <__mulqi3_exit>
    15a0:	86 95       	lsr	r24
    15a2:	d1 f7       	brne	.-12     	; 0x1598 <__mulqi3_loop>

000015a4 <__mulqi3_exit>:
    15a4:	80 2d       	mov	r24, r0
    15a6:	08 95       	ret

000015a8 <__mulsi3>:
    15a8:	ee 27       	eor	r30, r30
    15aa:	ff 27       	eor	r31, r31

000015ac <__mulsi3_helper>:
    15ac:	aa 27       	eor	r26, r26
    15ae:	bb 27       	eor	r27, r27
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <__mulsi3_helper+0x16>
    15b2:	a2 0f       	add	r26, r18
    15b4:	b3 1f       	adc	r27, r19
    15b6:	e4 1f       	adc	r30, r20
    15b8:	f5 1f       	adc	r31, r21
    15ba:	22 0f       	add	r18, r18
    15bc:	33 1f       	adc	r19, r19
    15be:	44 1f       	adc	r20, r20
    15c0:	55 1f       	adc	r21, r21
    15c2:	96 95       	lsr	r25
    15c4:	87 95       	ror	r24
    15c6:	77 95       	ror	r23
    15c8:	67 95       	ror	r22
    15ca:	98 f3       	brcs	.-26     	; 0x15b2 <__mulsi3_helper+0x6>
    15cc:	70 40       	sbci	r23, 0x00	; 0
    15ce:	a9 f7       	brne	.-22     	; 0x15ba <__mulsi3_helper+0xe>
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	99 f7       	brne	.-26     	; 0x15ba <__mulsi3_helper+0xe>
    15d4:	bd 01       	movw	r22, r26
    15d6:	cf 01       	movw	r24, r30
    15d8:	08 95       	ret

000015da <__divmodsi4>:
    15da:	05 2e       	mov	r0, r21
    15dc:	97 fb       	bst	r25, 7
    15de:	1e f4       	brtc	.+6      	; 0x15e6 <__divmodsi4+0xc>
    15e0:	00 94       	com	r0
    15e2:	0e 94 04 0b 	call	0x1608	; 0x1608 <__negsi2>
    15e6:	57 fd       	sbrc	r21, 7
    15e8:	07 d0       	rcall	.+14     	; 0x15f8 <__divmodsi4_neg2>
    15ea:	0e 94 a3 07 	call	0xf46	; 0xf46 <__udivmodsi4>
    15ee:	07 fc       	sbrc	r0, 7
    15f0:	03 d0       	rcall	.+6      	; 0x15f8 <__divmodsi4_neg2>
    15f2:	4e f4       	brtc	.+18     	; 0x1606 <__divmodsi4_exit>
    15f4:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__negsi2>

000015f8 <__divmodsi4_neg2>:
    15f8:	50 95       	com	r21
    15fa:	40 95       	com	r20
    15fc:	30 95       	com	r19
    15fe:	21 95       	neg	r18
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	4f 4f       	sbci	r20, 0xFF	; 255
    1604:	5f 4f       	sbci	r21, 0xFF	; 255

00001606 <__divmodsi4_exit>:
    1606:	08 95       	ret

00001608 <__negsi2>:
    1608:	90 95       	com	r25
    160a:	80 95       	com	r24
    160c:	70 95       	com	r23
    160e:	61 95       	neg	r22
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
    1612:	8f 4f       	sbci	r24, 0xFF	; 255
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	08 95       	ret

00001618 <__prologue_saves__>:
    1618:	2f 92       	push	r2
    161a:	3f 92       	push	r3
    161c:	4f 92       	push	r4
    161e:	5f 92       	push	r5
    1620:	6f 92       	push	r6
    1622:	7f 92       	push	r7
    1624:	8f 92       	push	r8
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	bf 92       	push	r11
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	ca 1b       	sub	r28, r26
    1642:	db 0b       	sbc	r29, r27
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	09 94       	ijmp

00001650 <__epilogue_restores__>:
    1650:	2a 88       	ldd	r2, Y+18	; 0x12
    1652:	39 88       	ldd	r3, Y+17	; 0x11
    1654:	48 88       	ldd	r4, Y+16	; 0x10
    1656:	5f 84       	ldd	r5, Y+15	; 0x0f
    1658:	6e 84       	ldd	r6, Y+14	; 0x0e
    165a:	7d 84       	ldd	r7, Y+13	; 0x0d
    165c:	8c 84       	ldd	r8, Y+12	; 0x0c
    165e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1660:	aa 84       	ldd	r10, Y+10	; 0x0a
    1662:	b9 84       	ldd	r11, Y+9	; 0x09
    1664:	c8 84       	ldd	r12, Y+8	; 0x08
    1666:	df 80       	ldd	r13, Y+7	; 0x07
    1668:	ee 80       	ldd	r14, Y+6	; 0x06
    166a:	fd 80       	ldd	r15, Y+5	; 0x05
    166c:	0c 81       	ldd	r16, Y+4	; 0x04
    166e:	1b 81       	ldd	r17, Y+3	; 0x03
    1670:	aa 81       	ldd	r26, Y+2	; 0x02
    1672:	b9 81       	ldd	r27, Y+1	; 0x01
    1674:	ce 0f       	add	r28, r30
    1676:	d1 1d       	adc	r29, r1
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	ed 01       	movw	r28, r26
    1684:	08 95       	ret

00001686 <_exit>:
    1686:	f8 94       	cli

00001688 <__stop_program>:
    1688:	ff cf       	rjmp	.-2      	; 0x1688 <__stop_program>
