
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  000011d8  0000126c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800160  00800160  000012cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039e8  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015f2  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ef3  00000000  00000000  00006512  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00008408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001689  00000000  00000000  0000889c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001542  00000000  00000000  00009f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000b467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_11>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_19>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d2 e0       	ldi	r29, 0x02	; 2
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e8 ed       	ldi	r30, 0xD8	; 216
      88:	f1 e1       	ldi	r31, 0x11	; 17
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a0 36       	cpi	r26, 0x60	; 96
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	af 36       	cpi	r26, 0x6F	; 111
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 a9 03 	call	0x752	; 0x752 <main>
      aa:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
      b2:	98 2f       	mov	r25, r24
      b4:	95 30       	cpi	r25, 0x05	; 5
      b6:	68 f5       	brcc	.+90     	; 0x112 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      b8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
      bc:	98 17       	cp	r25, r24
      be:	39 f0       	breq	.+14     	; 0xce <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
      c0:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
			UECFG1XTemp = UECFG1X;
      c4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
			UEIENXTemp  = UEIENX;
      c8:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
      cc:	03 c0       	rjmp	.+6      	; 0xd4 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
      ce:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
      d0:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
      d2:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
      d4:	21 fd       	sbrc	r18, 1
      d6:	02 c0       	rjmp	.+4      	; 0xdc <Endpoint_ConfigureEndpoint_Prv+0x2a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
      d8:	9f 5f       	subi	r25, 0xFF	; 255
      da:	ec cf       	rjmp	.-40     	; 0xb4 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
      dc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
      e0:	3e 7f       	andi	r19, 0xFE	; 254
      e2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
      e6:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
      ea:	3d 7f       	andi	r19, 0xFD	; 253
      ec:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
      f0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
      f4:	31 60       	ori	r19, 0x01	; 1
      f6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
      fa:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
		UECFG1X = UECFG1XTemp;
      fe:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		UEIENX  = UEIENXTemp;
     102:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     106:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>

		if (!(Endpoint_IsConfigured()))
     10a:	27 fd       	sbrc	r18, 7
     10c:	e5 cf       	rjmp	.-54     	; 0xd8 <Endpoint_ConfigureEndpoint_Prv+0x26>
		  return false;
     10e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     110:	08 95       	ret
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     112:	8f 70       	andi	r24, 0x0F	; 15
     114:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	08 95       	ret

0000011c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     11c:	08 95       	ret

0000011e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     11e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     122:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USB_INT_ClearAllInterrupts>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     126:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     12a:	8f 77       	andi	r24, 0x7F	; 127
     12c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
     130:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     134:	80 68       	ori	r24, 0x80	; 128
     136:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     13a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     13e:	8f 7d       	andi	r24, 0xDF	; 223
     140:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     144:	84 e0       	ldi	r24, 0x04	; 4
     146:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     148:	86 e0       	ldi	r24, 0x06	; 6
     14a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     14c:	09 b4       	in	r0, 0x29	; 41
     14e:	00 fe       	sbrs	r0, 0
     150:	fd cf       	rjmp	.-6      	; 0x14c <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     152:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     156:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     15a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     15e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     162:	42 e0       	ldi	r20, 0x02	; 2
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 59 00 	call	0xb2	; 0xb2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     16c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     170:	8e 7f       	andi	r24, 0xFE	; 254
     172:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     176:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     17a:	81 60       	ori	r24, 0x01	; 1
     17c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     180:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     184:	88 60       	ori	r24, 0x08	; 8
     186:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     18a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     18e:	8e 7f       	andi	r24, 0xFE	; 254
     190:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     194:	08 95       	ret

00000196 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     196:	e3 e6       	ldi	r30, 0x63	; 99
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	8e 7f       	andi	r24, 0xFE	; 254
     19e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <USB_IsInitialized>

	USB_ResetInterface();
     1a6:	0c 94 8f 00 	jmp	0x11e	; 0x11e <USB_ResetInterface>

000001aa <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     1aa:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     1ae:	08 95       	ret

000001b0 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     1b0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     1b4:	08 95       	ret

000001b6 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	2f 93       	push	r18
     1c2:	3f 93       	push	r19
     1c4:	4f 93       	push	r20
     1c6:	5f 93       	push	r21
     1c8:	6f 93       	push	r22
     1ca:	7f 93       	push	r23
     1cc:	8f 93       	push	r24
     1ce:	9f 93       	push	r25
     1d0:	af 93       	push	r26
     1d2:	bf 93       	push	r27
     1d4:	ef 93       	push	r30
     1d6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     1d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     1dc:	82 ff       	sbrs	r24, 2
     1de:	0b c0       	rjmp	.+22     	; 0x1f6 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     1e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     1e4:	82 ff       	sbrs	r24, 2
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     1e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     1ec:	8b 7f       	andi	r24, 0xFB	; 251
     1ee:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     1f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     1fa:	80 ff       	sbrs	r24, 0
     1fc:	18 c0       	rjmp	.+48     	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     1fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     202:	80 ff       	sbrs	r24, 0
     204:	14 c0       	rjmp	.+40     	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     206:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     20a:	8e 7f       	andi	r24, 0xFE	; 254
     20c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     210:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     214:	80 61       	ori	r24, 0x10	; 16
     216:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     21a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     21e:	80 62       	ori	r24, 0x20	; 32
     220:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     224:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     226:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     22a:	0e 94 9c 01 	call	0x338	; 0x338 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     22e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     232:	84 ff       	sbrs	r24, 4
     234:	30 c0       	rjmp	.+96     	; 0x296 <__DATA_REGION_LENGTH__+0x96>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     236:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     23a:	84 ff       	sbrs	r24, 4
     23c:	2c c0       	rjmp	.+88     	; 0x296 <__DATA_REGION_LENGTH__+0x96>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     23e:	84 e0       	ldi	r24, 0x04	; 4
     240:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     246:	09 b4       	in	r0, 0x29	; 41
     248:	00 fe       	sbrs	r0, 0
     24a:	fd cf       	rjmp	.-6      	; 0x246 <__DATA_REGION_LENGTH__+0x46>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     24c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     256:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     25a:	8f 7e       	andi	r24, 0xEF	; 239
     25c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     260:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     264:	8f 7e       	andi	r24, 0xEF	; 239
     266:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     26a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     26e:	81 60       	ori	r24, 0x01	; 1
     270:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     274:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <USB_Device_ConfigurationNumber>
     278:	88 23       	and	r24, r24
     27a:	11 f0       	breq	.+4      	; 0x280 <__DATA_REGION_LENGTH__+0x80>
		  USB_DeviceState = DEVICE_STATE_Configured;
     27c:	84 e0       	ldi	r24, 0x04	; 4
     27e:	07 c0       	rjmp	.+14     	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     280:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     284:	87 fd       	sbrc	r24, 7
     286:	02 c0       	rjmp	.+4      	; 0x28c <__DATA_REGION_LENGTH__+0x8c>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     292:	0e 94 84 01 	call	0x308	; 0x308 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     296:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     29a:	83 ff       	sbrs	r24, 3
     29c:	24 c0       	rjmp	.+72     	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     29e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     2a2:	83 ff       	sbrs	r24, 3
     2a4:	20 c0       	rjmp	.+64     	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     2a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     2aa:	87 7f       	andi	r24, 0xF7	; 247
     2ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     2b6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     2ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     2be:	8e 7f       	andi	r24, 0xFE	; 254
     2c0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     2c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     2c8:	8e 7f       	andi	r24, 0xFE	; 254
     2ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     2ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     2d8:	42 e0       	ldi	r20, 0x02	; 2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 59 00 	call	0xb2	; 0xb2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     2e2:	0e 94 8e 00 	call	0x11c	; 0x11c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     2e6:	ff 91       	pop	r31
     2e8:	ef 91       	pop	r30
     2ea:	bf 91       	pop	r27
     2ec:	af 91       	pop	r26
     2ee:	9f 91       	pop	r25
     2f0:	8f 91       	pop	r24
     2f2:	7f 91       	pop	r23
     2f4:	6f 91       	pop	r22
     2f6:	5f 91       	pop	r21
     2f8:	4f 91       	pop	r20
     2fa:	3f 91       	pop	r19
     2fc:	2f 91       	pop	r18
     2fe:	0f 90       	pop	r0
     300:	0f be       	out	0x3f, r0	; 63
     302:	0f 90       	pop	r0
     304:	1f 90       	pop	r1
     306:	18 95       	reti

00000308 <EVENT_USB_Device_Connect>:
        while(!(SPSR & (1<<SPIF))); // Wait for transfer to complete
        buffer[i] = SPDR; // Store the received data in the buffer
    }
    
    SET_SPI_SS(true); // Set SS high
}
     308:	cf 93       	push	r28
     30a:	c2 e0       	ldi	r28, 0x02	; 2
     30c:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
     310:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
     314:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     318:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     31c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <CurrentAudioSampleFrequency+0x3>
     320:	60 e8       	ldi	r22, 0x80	; 128
     322:	74 e8       	ldi	r23, 0x84	; 132
     324:	8e e1       	ldi	r24, 0x1E	; 30
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
     32c:	21 50       	subi	r18, 0x01	; 1
     32e:	27 bd       	out	0x27, r18	; 39
     330:	c4 bd       	out	0x24, r28	; 36
     332:	c5 bd       	out	0x25, r28	; 37
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <EVENT_USB_Device_Disconnect>:
     338:	15 bc       	out	0x25, r1	; 37
     33a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
     33e:	08 95       	ret

00000340 <__vector_19>:
     340:	1f 92       	push	r1
     342:	0f 92       	push	r0
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	0f 92       	push	r0
     348:	11 24       	eor	r1, r1
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	ef 93       	push	r30
     362:	ff 93       	push	r31
     364:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     368:	cf 70       	andi	r28, 0x0F	; 15
     36a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     36e:	89 2f       	mov	r24, r25
     370:	81 70       	andi	r24, 0x01	; 1
     372:	90 fd       	sbrc	r25, 0
     374:	80 e8       	ldi	r24, 0x80	; 128
     376:	c8 2b       	or	r28, r24
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     37e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     382:	80 ff       	sbrs	r24, 0
     384:	14 c0       	rjmp	.+40     	; 0x3ae <__vector_19+0x6e>
     386:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     38a:	88 23       	and	r24, r24
     38c:	81 f0       	breq	.+32     	; 0x3ae <__vector_19+0x6e>
     38e:	0e 94 cc 05 	call	0xb98	; 0xb98 <rand>
     392:	90 58       	subi	r25, 0x80	; 128
     394:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     398:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     39c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     3a0:	85 fd       	sbrc	r24, 5
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <__vector_19+0x6e>
     3a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     3a8:	8e 77       	andi	r24, 0x7E	; 126
     3aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     3ae:	cf 70       	andi	r28, 0x0F	; 15
     3b0:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     3b4:	ff 91       	pop	r31
     3b6:	ef 91       	pop	r30
     3b8:	cf 91       	pop	r28
     3ba:	bf 91       	pop	r27
     3bc:	af 91       	pop	r26
     3be:	9f 91       	pop	r25
     3c0:	8f 91       	pop	r24
     3c2:	7f 91       	pop	r23
     3c4:	6f 91       	pop	r22
     3c6:	5f 91       	pop	r21
     3c8:	4f 91       	pop	r20
     3ca:	3f 91       	pop	r19
     3cc:	2f 91       	pop	r18
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <delay_sck_cycles>:
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	22 e0       	ldi	r18, 0x02	; 2
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	aa 1f       	adc	r26, r26
     3e8:	bb 1f       	adc	r27, r27
     3ea:	2a 95       	dec	r18
     3ec:	d1 f7       	brne	.-12     	; 0x3e2 <delay_sck_cycles+0xa>
     3ee:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     3f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     3fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     400:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     404:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	08 17       	cp	r16, r24
     40e:	19 07       	cpc	r17, r25
     410:	2a 07       	cpc	r18, r26
     412:	3b 07       	cpc	r19, r27
     414:	90 f4       	brcc	.+36     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     416:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     41a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     41e:	29 3e       	cpi	r18, 0xE9	; 233
     420:	3d 4f       	sbci	r19, 0xFD	; 253
     422:	70 f3       	brcs	.-36     	; 0x400 <__LOCK_REGION_LENGTH__>
     424:	89 3e       	cpi	r24, 0xE9	; 233
     426:	2d ef       	ldi	r18, 0xFD	; 253
     428:	92 07       	cpc	r25, r18
     42a:	a1 05       	cpc	r26, r1
     42c:	b1 05       	cpc	r27, r1
     42e:	40 f3       	brcs	.-48     	; 0x400 <__LOCK_REGION_LENGTH__>
     430:	88 5e       	subi	r24, 0xE8	; 232
     432:	9d 4f       	sbci	r25, 0xFD	; 253
     434:	a1 09       	sbc	r26, r1
     436:	b1 09       	sbc	r27, r1
     438:	df cf       	rjmp	.-66     	; 0x3f8 <delay_sck_cycles+0x20>
     43a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	08 95       	ret

00000444 <SPI_SendByte.part.0>:
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	18 2f       	mov	r17, r24
     44c:	2f 98       	cbi	0x05, 7	; 5
     44e:	d8 e0       	ldi	r29, 0x08	; 8
     450:	c0 e0       	ldi	r28, 0x00	; 0
     452:	17 ff       	sbrs	r17, 7
     454:	02 c0       	rjmp	.+4      	; 0x45a <SPI_SendByte.part.0+0x16>
     456:	2d 9a       	sbi	0x05, 5	; 5
     458:	01 c0       	rjmp	.+2      	; 0x45c <SPI_SendByte.part.0+0x18>
     45a:	2d 98       	cbi	0x05, 5	; 5
     45c:	64 ef       	ldi	r22, 0xF4	; 244
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
     468:	2e 9a       	sbi	0x05, 6	; 5
     46a:	64 ef       	ldi	r22, 0xF4	; 244
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
     476:	cc 0f       	add	r28, r28
     478:	1c 99       	sbic	0x03, 4	; 3
     47a:	c1 60       	ori	r28, 0x01	; 1
     47c:	2e 98       	cbi	0x05, 6	; 5
     47e:	11 0f       	add	r17, r17
     480:	d1 50       	subi	r29, 0x01	; 1
     482:	39 f7       	brne	.-50     	; 0x452 <SPI_SendByte.part.0+0xe>
     484:	2f 9a       	sbi	0x05, 7	; 5
     486:	8c 2f       	mov	r24, r28
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <ADS1299_SDATAC>:
     490:	81 e1       	ldi	r24, 0x11	; 17
     492:	0e 94 22 02 	call	0x444	; 0x444 <SPI_SendByte.part.0>
     496:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <_ADS1299_MODE>
     49a:	08 95       	ret

0000049c <SPI_SendByte>:
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	d8 2f       	mov	r29, r24
     4a4:	61 11       	cpse	r22, r1
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <SPI_SendByte+0x16>
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0c 94 22 02 	jmp	0x444	; 0x444 <SPI_SendByte.part.0>
     4b2:	18 e0       	ldi	r17, 0x08	; 8
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
     4b6:	d7 ff       	sbrs	r29, 7
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <SPI_SendByte+0x22>
     4ba:	2d 9a       	sbi	0x05, 5	; 5
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <SPI_SendByte+0x24>
     4be:	2d 98       	cbi	0x05, 5	; 5
     4c0:	64 ef       	ldi	r22, 0xF4	; 244
     4c2:	71 e0       	ldi	r23, 0x01	; 1
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
     4cc:	2e 9a       	sbi	0x05, 6	; 5
     4ce:	64 ef       	ldi	r22, 0xF4	; 244
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
     4da:	cc 0f       	add	r28, r28
     4dc:	1c 99       	sbic	0x03, 4	; 3
     4de:	c1 60       	ori	r28, 0x01	; 1
     4e0:	2e 98       	cbi	0x05, 6	; 5
     4e2:	dd 0f       	add	r29, r29
     4e4:	11 50       	subi	r17, 0x01	; 1
     4e6:	39 f7       	brne	.-50     	; 0x4b6 <SPI_SendByte+0x1a>
     4e8:	8c 2f       	mov	r24, r28
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	08 95       	ret

000004f2 <ADS1299_WREG>:
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	f6 2e       	mov	r15, r22
     4fe:	07 2f       	mov	r16, r23
     500:	14 2f       	mov	r17, r20
     502:	2f 98       	cbi	0x05, 7	; 5
     504:	8f 71       	andi	r24, 0x1F	; 31
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	80 64       	ori	r24, 0x40	; 64
     50a:	0e 94 4e 02 	call	0x49c	; 0x49c <SPI_SendByte>
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	81 0f       	add	r24, r17
     514:	0e 94 4e 02 	call	0x49c	; 0x49c <SPI_SendByte>
     518:	cf 2d       	mov	r28, r15
     51a:	d0 2f       	mov	r29, r16
     51c:	ce 01       	movw	r24, r28
     51e:	81 0f       	add	r24, r17
     520:	91 1d       	adc	r25, r1
     522:	8c 01       	movw	r16, r24
     524:	c0 17       	cp	r28, r16
     526:	d1 07       	cpc	r29, r17
     528:	29 f0       	breq	.+10     	; 0x534 <ADS1299_WREG+0x42>
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	89 91       	ld	r24, Y+
     52e:	0e 94 4e 02 	call	0x49c	; 0x49c <SPI_SendByte>
     532:	f8 cf       	rjmp	.-16     	; 0x524 <ADS1299_WREG+0x32>
     534:	2f 9a       	sbi	0x05, 7	; 5
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	08 95       	ret

00000542 <lightUp>:
}

// This function handles LED debugging based on device mode
// Time in milliseconds
// Number of cycles here is based on ATMEGA16U2 clock
bool lightUp(uint8_t num, uint8_t GPIO_pin, float time) {
     542:	2f 92       	push	r2
     544:	3f 92       	push	r3
     546:	4f 92       	push	r4
     548:	5f 92       	push	r5
     54a:	6f 92       	push	r6
     54c:	7f 92       	push	r7
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	08 2f       	mov	r16, r24
     568:	c6 2f       	mov	r28, r22
     56a:	ca 01       	movw	r24, r20
     56c:	b9 01       	movw	r22, r18
	uint32_t cycles = (uint32_t)(F_CPU * (time/1000) / num); // Convert time into cycles, divide by number of times to blink in a second
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	4a e7       	ldi	r20, 0x7A	; 122
     576:	54 e4       	ldi	r21, 0x44	; 68
     578:	0e 94 b8 03 	call	0x770	; 0x770 <__divsf3>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	34 e2       	ldi	r19, 0x24	; 36
     580:	44 e7       	ldi	r20, 0x74	; 116
     582:	5b e4       	ldi	r21, 0x4B	; 75
     584:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__mulsf3>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24
     58c:	b8 01       	movw	r22, r16
     58e:	01 2e       	mov	r0, r17
     590:	00 0c       	add	r0, r0
     592:	88 0b       	sbc	r24, r24
     594:	99 0b       	sbc	r25, r25
     596:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatsisf>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 b8 03 	call	0x770	; 0x770 <__divsf3>
     5a6:	0e 94 2a 04 	call	0x854	; 0x854 <__fixunssfsi>
     5aa:	2b 01       	movw	r4, r22
     5ac:	3c 01       	movw	r6, r24
	for (int i = 0; i < num; i++) {
		port_GPIO |= (1 << GPIO_pin);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <lightUp+0x74>
     5b4:	88 0f       	add	r24, r24
     5b6:	ca 95       	dec	r28
     5b8:	ea f7       	brpl	.-6      	; 0x5b4 <lightUp+0x72>
     5ba:	38 2e       	mov	r3, r24
		delay_sck_cycles(cycles/(2*num));
     5bc:	68 01       	movw	r12, r16
     5be:	cc 0c       	add	r12, r12
     5c0:	dd 1c       	adc	r13, r13
     5c2:	e1 2c       	mov	r14, r1
     5c4:	f1 2c       	mov	r15, r1
		port_GPIO &= ~(1 << GPIO_pin);
     5c6:	28 2e       	mov	r2, r24
     5c8:	20 94       	com	r2
// This function handles LED debugging based on device mode
// Time in milliseconds
// Number of cycles here is based on ATMEGA16U2 clock
bool lightUp(uint8_t num, uint8_t GPIO_pin, float time) {
	uint32_t cycles = (uint32_t)(F_CPU * (time/1000) / num); // Convert time into cycles, divide by number of times to blink in a second
	for (int i = 0; i < num; i++) {
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	d0 e0       	ldi	r29, 0x00	; 0
     5ce:	c0 17       	cp	r28, r16
     5d0:	d1 07       	cpc	r29, r17
     5d2:	c4 f4       	brge	.+48     	; 0x604 <lightUp+0xc2>
		port_GPIO |= (1 << GPIO_pin);
     5d4:	8b b1       	in	r24, 0x0b	; 11
     5d6:	83 29       	or	r24, r3
     5d8:	8b b9       	out	0x0b, r24	; 11
		delay_sck_cycles(cycles/(2*num));
     5da:	c3 01       	movw	r24, r6
     5dc:	b2 01       	movw	r22, r4
     5de:	a7 01       	movw	r20, r14
     5e0:	96 01       	movw	r18, r12
     5e2:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
     5e6:	49 01       	movw	r8, r18
     5e8:	5a 01       	movw	r10, r20
     5ea:	ca 01       	movw	r24, r20
     5ec:	b9 01       	movw	r22, r18
     5ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
		port_GPIO &= ~(1 << GPIO_pin);
     5f2:	8b b1       	in	r24, 0x0b	; 11
     5f4:	82 21       	and	r24, r2
     5f6:	8b b9       	out	0x0b, r24	; 11
		delay_sck_cycles(cycles/(2*num));
     5f8:	c5 01       	movw	r24, r10
     5fa:	b4 01       	movw	r22, r8
     5fc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
// This function handles LED debugging based on device mode
// Time in milliseconds
// Number of cycles here is based on ATMEGA16U2 clock
bool lightUp(uint8_t num, uint8_t GPIO_pin, float time) {
	uint32_t cycles = (uint32_t)(F_CPU * (time/1000) / num); // Convert time into cycles, divide by number of times to blink in a second
	for (int i = 0; i < num; i++) {
     600:	21 96       	adiw	r28, 0x01	; 1
     602:	e5 cf       	rjmp	.-54     	; 0x5ce <lightUp+0x8c>
		port_GPIO &= ~(1 << GPIO_pin);
		delay_sck_cycles(cycles/(2*num));
	}

	return true;
}
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	bf 90       	pop	r11
     618:	af 90       	pop	r10
     61a:	9f 90       	pop	r9
     61c:	8f 90       	pop	r8
     61e:	7f 90       	pop	r7
     620:	6f 90       	pop	r6
     622:	5f 90       	pop	r5
     624:	4f 90       	pop	r4
     626:	3f 90       	pop	r3
     628:	2f 90       	pop	r2
     62a:	08 95       	ret

0000062c <ADS1299_SETUP>:

	TCCR1B = 0;
}

// This function sets up the ADS1299
void ADS1299_SETUP(void) {
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	00 d0       	rcall	.+0      	; 0x638 <ADS1299_SETUP+0xc>
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
	}

	// This function sets the CLK SEL pin HIGH or LOW
	static inline void SET_CLK_SEL(const bool input) {
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
     63c:	5c 9a       	sbi	0x0b, 4	; 11
	SET_CLK_SEL(true);
	long long int a = 1;
	delay_sck_cycles(a<<20);  // Changed 2^20 to 1 << 20 for proper bit shifting
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	80 e1       	ldi	r24, 0x10	; 16
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
		input ? (port_SPI |= (1 << pin_SS)) : (port_SPI &= ~(1 << pin_SS));
	}

	// This function will set the PWR_DWN pin HIGH or LOW (following boolean input)
	static inline void SET_PWR_DWN(const bool input) {
		input ? (port_GPIO |= (1 << pin_PWR_DWN)) : (port_GPIO &= ~(1 << pin_PWR_DWN));
     64a:	58 98       	cbi	0x0b, 0	; 11
	}

	// This function will set RST pin HIGHs or LOW (following boolean input)
	static inline void SET_RST(const bool input) {
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
     64c:	5c 98       	cbi	0x0b, 4	; 11
	SET_PWR_DWN(false);
	SET_RST(false);
	delay_sck_cycles(a<<20);
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	80 e1       	ldi	r24, 0x10	; 16
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
		input ? (port_SPI |= (1 << pin_SS)) : (port_SPI &= ~(1 << pin_SS));
	}

	// This function will set the PWR_DWN pin HIGH or LOW (following boolean input)
	static inline void SET_PWR_DWN(const bool input) {
		input ? (port_GPIO |= (1 << pin_PWR_DWN)) : (port_GPIO &= ~(1 << pin_PWR_DWN));
     65a:	58 9a       	sbi	0x0b, 0	; 11
	}

	// This function will set RST pin HIGHs or LOW (following boolean input)
	static inline void SET_RST(const bool input) {
		input ? (port_GPIO |= (1 << pin_CLK_SEL)) : (port_GPIO &= ~(1 << pin_CLK_SEL));
     65c:	5c 9a       	sbi	0x0b, 4	; 11
	SET_PWR_DWN(true);
	SET_RST(true);
	delay_sck_cycles(a<<20);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e1       	ldi	r24, 0x10	; 16
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
	ADS1299_SDATAC();
     66a:	0e 94 48 02 	call	0x490	; 0x490 <ADS1299_SDATAC>
	uint8_t refbuf[] = {0b11100000};
     66e:	80 ee       	ldi	r24, 0xE0	; 224
     670:	8a 83       	std	Y+2, r24	; 0x02
	ADS1299_WREG(0x3, refbuf, 1);
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	be 01       	movw	r22, r28
     676:	6e 5f       	subi	r22, 0xFE	; 254
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADS1299_WREG>
	delay_sck_cycles(a<<20);
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	80 e1       	ldi	r24, 0x10	; 16
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
     68c:	08 e0       	ldi	r16, 0x08	; 8
     68e:	11 e0       	ldi	r17, 0x01	; 1
     690:	ff 24       	eor	r15, r15
     692:	f3 94       	inc	r15

	uint8_t i = 0;
	while (i < size_reg_ls) {
		const regVal_pair temp = ADS1299_REGISTER_LS[i];  // Initialize struct directly
     694:	f8 01       	movw	r30, r16
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
		if (temp.add == -2) {  // Use dot notation instead of arrow operator
     69a:	8e 3f       	cpi	r24, 0xFE	; 254
     69c:	ff ef       	ldi	r31, 0xFF	; 255
     69e:	9f 07       	cpc	r25, r31
     6a0:	79 f0       	breq	.+30     	; 0x6c0 <ADS1299_SETUP+0x94>
			i++;
			continue;
		}
		uint8_t value[] = {(uint8_t)temp.reg_val};  // Use dot notation
     6a2:	f8 01       	movw	r30, r16
     6a4:	92 81       	ldd	r25, Z+2	; 0x02
     6a6:	99 83       	std	Y+1, r25	; 0x01
		ADS1299_WREG(temp.add, value, 1);  // Use dot notation
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADS1299_WREG>
		delay_sck_cycles(10);
     6b4:	6a e0       	ldi	r22, 0x0A	; 10
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
     6c0:	0c 5f       	subi	r16, 0xFC	; 252
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	f3 94       	inc	r15
	uint8_t refbuf[] = {0b11100000};
	ADS1299_WREG(0x3, refbuf, 1);
	delay_sck_cycles(a<<20);

	uint8_t i = 0;
	while (i < size_reg_ls) {
     6c6:	f7 e1       	ldi	r31, 0x17	; 23
     6c8:	ff 12       	cpse	r15, r31
     6ca:	e4 cf       	rjmp	.-56     	; 0x694 <ADS1299_SETUP+0x68>
		uint8_t value[] = {(uint8_t)temp.reg_val};  // Use dot notation
		ADS1299_WREG(temp.add, value, 1);  // Use dot notation
		delay_sck_cycles(10);
		i++;
	}
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	08 95       	ret

000006dc <SetupHardware>:

/** Configures the board hardware and chip peripherals . */
void SetupHardware(void) {
	#if (ARCH == ARCH_AVR8)
		/* Disable watchdog if enabled by bootloader/fuses */
		MCUSR &= ~(1 << WDRF);
     6dc:	84 b7       	in	r24, 0x34	; 52
     6de:	87 7f       	andi	r24, 0xF7	; 247
     6e0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	a8 95       	wdr
     6e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     6ec:	88 61       	ori	r24, 0x18	; 24
     6ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     6f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     6f6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     704:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     708:	0f be       	out	0x3f, r0	; 63
	/* Hardware Initialization */
	//LEDs_Init();
	//Buttons_Init();
	//ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	//ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     70a:	0e 94 cb 00 	call	0x196	; 0x196 <USB_Init>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);   // Enable USART transmitter and receiver
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Set frame format: 8 data, 1 stop bit
	UBRR0 = F_CPU / 16 / 9600 - 1;          // Set baud rate to 9600*/


	_ADS1299_MODE = ADS1299_MODE_WAKEUP;
     70e:	8a e0       	ldi	r24, 0x0A	; 10
     710:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_ADS1299_MODE>
	static inline void SET_SPI_SS(const bool input) __attribute__((always_inline));
	static inline void SET_RST(const bool input) __attribute__((always_inline));

	// This function will set the SS pin HIGH or LOW (Following boolean input)
	static inline void SET_SPI_SS(const bool input) {
		input ? (port_SPI |= (1 << pin_SS)) : (port_SPI &= ~(1 << pin_SS));
     714:	2f 98       	cbi	0x05, 7	; 5
	SET_SPI_SS(false);
	port_SPI &= ~(1 << pin_SCK);
     716:	2e 98       	cbi	0x05, 6	; 5
	
	// SPI Configuration (ddr_SPI = DDRB)
	ddr_SPI |= (1 << pin_MOSI) | (1 << pin_SCK) | (1 << pin_SS); //MOSI, SCK, SS are outputs
     718:	84 b1       	in	r24, 0x04	; 4
     71a:	80 6e       	ori	r24, 0xE0	; 224
     71c:	84 b9       	out	0x04, r24	; 4
	ddr_SPI &= ~(1 << pin_MISO);
     71e:	24 98       	cbi	0x04, 4	; 4

	// Setting Clock rate to fck/16 and enabling SPI as master.
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPI2X) | (1 << SPR1) | (0 << SPR0) | (0 << CPOL) | (0 << CPHA);
     720:	83 e5       	ldi	r24, 0x53	; 83
     722:	8c bd       	out	0x2c, r24	; 44

	lightUp(10, pin_LED_DEBUG, 1.0);
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e8       	ldi	r20, 0x80	; 128
     72a:	5f e3       	ldi	r21, 0x3F	; 63
     72c:	67 e0       	ldi	r22, 0x07	; 7
     72e:	8a e0       	ldi	r24, 0x0A	; 10
     730:	0e 94 a1 02 	call	0x542	; 0x542 <lightUp>
	delay_sck_cycles(2^18);
     734:	60 e1       	ldi	r22, 0x10	; 16
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay_sck_cycles>
	//lightUp(10, pin_LED_DEBUG, 2.0);
	port_GPIO |= (1 << pin_LED_DEBUG);
     740:	5f 9a       	sbi	0x0b, 7	; 11

	ADS1299_SETUP();
     742:	0e 94 16 03 	call	0x62c	; 0x62c <ADS1299_SETUP>
	
	delay_sck_cycles(2^15);
     746:	6d e0       	ldi	r22, 0x0D	; 13
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <delay_sck_cycles>

00000752 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void) {
	SetupHardware();
     752:	0e 94 6e 03 	call	0x6dc	; 0x6dc <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     756:	78 94       	sei
	#ifdef TEST_USB
		#include "Tests/test_USB.c"
		test_usb();
	#endif*/

	DDRD |=  (1 << pin_LED_DEBUG);
     758:	57 9a       	sbi	0x0a, 7	; 10
	//port_GPIO |= (1 << pin_LED_DEBUG);

	// just blink please
	for (;;) {
		port_GPIO |= (1 << pin_LED_DEBUG);
     75a:	5f 9a       	sbi	0x0b, 7	; 11
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a0 e1       	ldi	r26, 0x10	; 16
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	a1 09       	sbc	r26, r1
     768:	b1 09       	sbc	r27, r1
		for (uint32_t i = 0; i < (1ULL << 20); i++);
     76a:	e1 f7       	brne	.-8      	; 0x764 <main+0x12>
		//delay_sck_cycles(1 << 20);
		port_GPIO &= ~(1 << pin_LED_DEBUG);
     76c:	5f 98       	cbi	0x0b, 7	; 11
     76e:	f5 cf       	rjmp	.-22     	; 0x75a <main+0x8>

00000770 <__divsf3>:
     770:	0e 94 cc 03 	call	0x798	; 0x798 <__divsf3x>
     774:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_round>
     778:	0e 94 a6 04 	call	0x94c	; 0x94c <__fp_pscB>
     77c:	58 f0       	brcs	.+22     	; 0x794 <__divsf3+0x24>
     77e:	0e 94 9f 04 	call	0x93e	; 0x93e <__fp_pscA>
     782:	40 f0       	brcs	.+16     	; 0x794 <__divsf3+0x24>
     784:	29 f4       	brne	.+10     	; 0x790 <__divsf3+0x20>
     786:	5f 3f       	cpi	r21, 0xFF	; 255
     788:	29 f0       	breq	.+10     	; 0x794 <__divsf3+0x24>
     78a:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_inf>
     78e:	51 11       	cpse	r21, r1
     790:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_szero>
     794:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_nan>

00000798 <__divsf3x>:
     798:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_split3>
     79c:	68 f3       	brcs	.-38     	; 0x778 <__divsf3+0x8>

0000079e <__divsf3_pse>:
     79e:	99 23       	and	r25, r25
     7a0:	b1 f3       	breq	.-20     	; 0x78e <__divsf3+0x1e>
     7a2:	55 23       	and	r21, r21
     7a4:	91 f3       	breq	.-28     	; 0x78a <__divsf3+0x1a>
     7a6:	95 1b       	sub	r25, r21
     7a8:	55 0b       	sbc	r21, r21
     7aa:	bb 27       	eor	r27, r27
     7ac:	aa 27       	eor	r26, r26
     7ae:	62 17       	cp	r22, r18
     7b0:	73 07       	cpc	r23, r19
     7b2:	84 07       	cpc	r24, r20
     7b4:	38 f0       	brcs	.+14     	; 0x7c4 <__divsf3_pse+0x26>
     7b6:	9f 5f       	subi	r25, 0xFF	; 255
     7b8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	44 1f       	adc	r20, r20
     7c0:	aa 1f       	adc	r26, r26
     7c2:	a9 f3       	breq	.-22     	; 0x7ae <__divsf3_pse+0x10>
     7c4:	35 d0       	rcall	.+106    	; 0x830 <__divsf3_pse+0x92>
     7c6:	0e 2e       	mov	r0, r30
     7c8:	3a f0       	brmi	.+14     	; 0x7d8 <__divsf3_pse+0x3a>
     7ca:	e0 e8       	ldi	r30, 0x80	; 128
     7cc:	32 d0       	rcall	.+100    	; 0x832 <__divsf3_pse+0x94>
     7ce:	91 50       	subi	r25, 0x01	; 1
     7d0:	50 40       	sbci	r21, 0x00	; 0
     7d2:	e6 95       	lsr	r30
     7d4:	00 1c       	adc	r0, r0
     7d6:	ca f7       	brpl	.-14     	; 0x7ca <__divsf3_pse+0x2c>
     7d8:	2b d0       	rcall	.+86     	; 0x830 <__divsf3_pse+0x92>
     7da:	fe 2f       	mov	r31, r30
     7dc:	29 d0       	rcall	.+82     	; 0x830 <__divsf3_pse+0x92>
     7de:	66 0f       	add	r22, r22
     7e0:	77 1f       	adc	r23, r23
     7e2:	88 1f       	adc	r24, r24
     7e4:	bb 1f       	adc	r27, r27
     7e6:	26 17       	cp	r18, r22
     7e8:	37 07       	cpc	r19, r23
     7ea:	48 07       	cpc	r20, r24
     7ec:	ab 07       	cpc	r26, r27
     7ee:	b0 e8       	ldi	r27, 0x80	; 128
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <__divsf3_pse+0x56>
     7f2:	bb 0b       	sbc	r27, r27
     7f4:	80 2d       	mov	r24, r0
     7f6:	bf 01       	movw	r22, r30
     7f8:	ff 27       	eor	r31, r31
     7fa:	93 58       	subi	r25, 0x83	; 131
     7fc:	5f 4f       	sbci	r21, 0xFF	; 255
     7fe:	3a f0       	brmi	.+14     	; 0x80e <__divsf3_pse+0x70>
     800:	9e 3f       	cpi	r25, 0xFE	; 254
     802:	51 05       	cpc	r21, r1
     804:	78 f0       	brcs	.+30     	; 0x824 <__divsf3_pse+0x86>
     806:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_inf>
     80a:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_szero>
     80e:	5f 3f       	cpi	r21, 0xFF	; 255
     810:	e4 f3       	brlt	.-8      	; 0x80a <__divsf3_pse+0x6c>
     812:	98 3e       	cpi	r25, 0xE8	; 232
     814:	d4 f3       	brlt	.-12     	; 0x80a <__divsf3_pse+0x6c>
     816:	86 95       	lsr	r24
     818:	77 95       	ror	r23
     81a:	67 95       	ror	r22
     81c:	b7 95       	ror	r27
     81e:	f7 95       	ror	r31
     820:	9f 5f       	subi	r25, 0xFF	; 255
     822:	c9 f7       	brne	.-14     	; 0x816 <__divsf3_pse+0x78>
     824:	88 0f       	add	r24, r24
     826:	91 1d       	adc	r25, r1
     828:	96 95       	lsr	r25
     82a:	87 95       	ror	r24
     82c:	97 f9       	bld	r25, 7
     82e:	08 95       	ret
     830:	e1 e0       	ldi	r30, 0x01	; 1
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	88 1f       	adc	r24, r24
     838:	bb 1f       	adc	r27, r27
     83a:	62 17       	cp	r22, r18
     83c:	73 07       	cpc	r23, r19
     83e:	84 07       	cpc	r24, r20
     840:	ba 07       	cpc	r27, r26
     842:	20 f0       	brcs	.+8      	; 0x84c <__divsf3_pse+0xae>
     844:	62 1b       	sub	r22, r18
     846:	73 0b       	sbc	r23, r19
     848:	84 0b       	sbc	r24, r20
     84a:	ba 0b       	sbc	r27, r26
     84c:	ee 1f       	adc	r30, r30
     84e:	88 f7       	brcc	.-30     	; 0x832 <__divsf3_pse+0x94>
     850:	e0 95       	com	r30
     852:	08 95       	ret

00000854 <__fixunssfsi>:
     854:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_splitA>
     858:	88 f0       	brcs	.+34     	; 0x87c <__fixunssfsi+0x28>
     85a:	9f 57       	subi	r25, 0x7F	; 127
     85c:	98 f0       	brcs	.+38     	; 0x884 <__fixunssfsi+0x30>
     85e:	b9 2f       	mov	r27, r25
     860:	99 27       	eor	r25, r25
     862:	b7 51       	subi	r27, 0x17	; 23
     864:	b0 f0       	brcs	.+44     	; 0x892 <__fixunssfsi+0x3e>
     866:	e1 f0       	breq	.+56     	; 0x8a0 <__fixunssfsi+0x4c>
     868:	66 0f       	add	r22, r22
     86a:	77 1f       	adc	r23, r23
     86c:	88 1f       	adc	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	1a f0       	brmi	.+6      	; 0x878 <__fixunssfsi+0x24>
     872:	ba 95       	dec	r27
     874:	c9 f7       	brne	.-14     	; 0x868 <__fixunssfsi+0x14>
     876:	14 c0       	rjmp	.+40     	; 0x8a0 <__fixunssfsi+0x4c>
     878:	b1 30       	cpi	r27, 0x01	; 1
     87a:	91 f0       	breq	.+36     	; 0x8a0 <__fixunssfsi+0x4c>
     87c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_zero>
     880:	b1 e0       	ldi	r27, 0x01	; 1
     882:	08 95       	ret
     884:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_zero>
     888:	67 2f       	mov	r22, r23
     88a:	78 2f       	mov	r23, r24
     88c:	88 27       	eor	r24, r24
     88e:	b8 5f       	subi	r27, 0xF8	; 248
     890:	39 f0       	breq	.+14     	; 0x8a0 <__fixunssfsi+0x4c>
     892:	b9 3f       	cpi	r27, 0xF9	; 249
     894:	cc f3       	brlt	.-14     	; 0x888 <__fixunssfsi+0x34>
     896:	86 95       	lsr	r24
     898:	77 95       	ror	r23
     89a:	67 95       	ror	r22
     89c:	b3 95       	inc	r27
     89e:	d9 f7       	brne	.-10     	; 0x896 <__fixunssfsi+0x42>
     8a0:	3e f4       	brtc	.+14     	; 0x8b0 <__fixunssfsi+0x5c>
     8a2:	90 95       	com	r25
     8a4:	80 95       	com	r24
     8a6:	70 95       	com	r23
     8a8:	61 95       	neg	r22
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	8f 4f       	sbci	r24, 0xFF	; 255
     8ae:	9f 4f       	sbci	r25, 0xFF	; 255
     8b0:	08 95       	ret

000008b2 <__floatunsisf>:
     8b2:	e8 94       	clt
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <__floatsisf+0x12>

000008b6 <__floatsisf>:
     8b6:	97 fb       	bst	r25, 7
     8b8:	3e f4       	brtc	.+14     	; 0x8c8 <__floatsisf+0x12>
     8ba:	90 95       	com	r25
     8bc:	80 95       	com	r24
     8be:	70 95       	com	r23
     8c0:	61 95       	neg	r22
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	8f 4f       	sbci	r24, 0xFF	; 255
     8c6:	9f 4f       	sbci	r25, 0xFF	; 255
     8c8:	99 23       	and	r25, r25
     8ca:	a9 f0       	breq	.+42     	; 0x8f6 <__floatsisf+0x40>
     8cc:	f9 2f       	mov	r31, r25
     8ce:	96 e9       	ldi	r25, 0x96	; 150
     8d0:	bb 27       	eor	r27, r27
     8d2:	93 95       	inc	r25
     8d4:	f6 95       	lsr	r31
     8d6:	87 95       	ror	r24
     8d8:	77 95       	ror	r23
     8da:	67 95       	ror	r22
     8dc:	b7 95       	ror	r27
     8de:	f1 11       	cpse	r31, r1
     8e0:	f8 cf       	rjmp	.-16     	; 0x8d2 <__floatsisf+0x1c>
     8e2:	fa f4       	brpl	.+62     	; 0x922 <__floatsisf+0x6c>
     8e4:	bb 0f       	add	r27, r27
     8e6:	11 f4       	brne	.+4      	; 0x8ec <__floatsisf+0x36>
     8e8:	60 ff       	sbrs	r22, 0
     8ea:	1b c0       	rjmp	.+54     	; 0x922 <__floatsisf+0x6c>
     8ec:	6f 5f       	subi	r22, 0xFF	; 255
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	16 c0       	rjmp	.+44     	; 0x922 <__floatsisf+0x6c>
     8f6:	88 23       	and	r24, r24
     8f8:	11 f0       	breq	.+4      	; 0x8fe <__floatsisf+0x48>
     8fa:	96 e9       	ldi	r25, 0x96	; 150
     8fc:	11 c0       	rjmp	.+34     	; 0x920 <__floatsisf+0x6a>
     8fe:	77 23       	and	r23, r23
     900:	21 f0       	breq	.+8      	; 0x90a <__floatsisf+0x54>
     902:	9e e8       	ldi	r25, 0x8E	; 142
     904:	87 2f       	mov	r24, r23
     906:	76 2f       	mov	r23, r22
     908:	05 c0       	rjmp	.+10     	; 0x914 <__floatsisf+0x5e>
     90a:	66 23       	and	r22, r22
     90c:	71 f0       	breq	.+28     	; 0x92a <__floatsisf+0x74>
     90e:	96 e8       	ldi	r25, 0x86	; 134
     910:	86 2f       	mov	r24, r22
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	2a f0       	brmi	.+10     	; 0x922 <__floatsisf+0x6c>
     918:	9a 95       	dec	r25
     91a:	66 0f       	add	r22, r22
     91c:	77 1f       	adc	r23, r23
     91e:	88 1f       	adc	r24, r24
     920:	da f7       	brpl	.-10     	; 0x918 <__floatsisf+0x62>
     922:	88 0f       	add	r24, r24
     924:	96 95       	lsr	r25
     926:	87 95       	ror	r24
     928:	97 f9       	bld	r25, 7
     92a:	08 95       	ret

0000092c <__fp_inf>:
     92c:	97 f9       	bld	r25, 7
     92e:	9f 67       	ori	r25, 0x7F	; 127
     930:	80 e8       	ldi	r24, 0x80	; 128
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	08 95       	ret

00000938 <__fp_nan>:
     938:	9f ef       	ldi	r25, 0xFF	; 255
     93a:	80 ec       	ldi	r24, 0xC0	; 192
     93c:	08 95       	ret

0000093e <__fp_pscA>:
     93e:	00 24       	eor	r0, r0
     940:	0a 94       	dec	r0
     942:	16 16       	cp	r1, r22
     944:	17 06       	cpc	r1, r23
     946:	18 06       	cpc	r1, r24
     948:	09 06       	cpc	r0, r25
     94a:	08 95       	ret

0000094c <__fp_pscB>:
     94c:	00 24       	eor	r0, r0
     94e:	0a 94       	dec	r0
     950:	12 16       	cp	r1, r18
     952:	13 06       	cpc	r1, r19
     954:	14 06       	cpc	r1, r20
     956:	05 06       	cpc	r0, r21
     958:	08 95       	ret

0000095a <__fp_round>:
     95a:	09 2e       	mov	r0, r25
     95c:	03 94       	inc	r0
     95e:	00 0c       	add	r0, r0
     960:	11 f4       	brne	.+4      	; 0x966 <__fp_round+0xc>
     962:	88 23       	and	r24, r24
     964:	52 f0       	brmi	.+20     	; 0x97a <__fp_round+0x20>
     966:	bb 0f       	add	r27, r27
     968:	40 f4       	brcc	.+16     	; 0x97a <__fp_round+0x20>
     96a:	bf 2b       	or	r27, r31
     96c:	11 f4       	brne	.+4      	; 0x972 <__fp_round+0x18>
     96e:	60 ff       	sbrs	r22, 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__fp_round+0x20>
     972:	6f 5f       	subi	r22, 0xFF	; 255
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	8f 4f       	sbci	r24, 0xFF	; 255
     978:	9f 4f       	sbci	r25, 0xFF	; 255
     97a:	08 95       	ret

0000097c <__fp_split3>:
     97c:	57 fd       	sbrc	r21, 7
     97e:	90 58       	subi	r25, 0x80	; 128
     980:	44 0f       	add	r20, r20
     982:	55 1f       	adc	r21, r21
     984:	59 f0       	breq	.+22     	; 0x99c <__fp_splitA+0x10>
     986:	5f 3f       	cpi	r21, 0xFF	; 255
     988:	71 f0       	breq	.+28     	; 0x9a6 <__fp_splitA+0x1a>
     98a:	47 95       	ror	r20

0000098c <__fp_splitA>:
     98c:	88 0f       	add	r24, r24
     98e:	97 fb       	bst	r25, 7
     990:	99 1f       	adc	r25, r25
     992:	61 f0       	breq	.+24     	; 0x9ac <__fp_splitA+0x20>
     994:	9f 3f       	cpi	r25, 0xFF	; 255
     996:	79 f0       	breq	.+30     	; 0x9b6 <__fp_splitA+0x2a>
     998:	87 95       	ror	r24
     99a:	08 95       	ret
     99c:	12 16       	cp	r1, r18
     99e:	13 06       	cpc	r1, r19
     9a0:	14 06       	cpc	r1, r20
     9a2:	55 1f       	adc	r21, r21
     9a4:	f2 cf       	rjmp	.-28     	; 0x98a <__fp_split3+0xe>
     9a6:	46 95       	lsr	r20
     9a8:	f1 df       	rcall	.-30     	; 0x98c <__fp_splitA>
     9aa:	08 c0       	rjmp	.+16     	; 0x9bc <__fp_splitA+0x30>
     9ac:	16 16       	cp	r1, r22
     9ae:	17 06       	cpc	r1, r23
     9b0:	18 06       	cpc	r1, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	f1 cf       	rjmp	.-30     	; 0x998 <__fp_splitA+0xc>
     9b6:	86 95       	lsr	r24
     9b8:	71 05       	cpc	r23, r1
     9ba:	61 05       	cpc	r22, r1
     9bc:	08 94       	sec
     9be:	08 95       	ret

000009c0 <__fp_zero>:
     9c0:	e8 94       	clt

000009c2 <__fp_szero>:
     9c2:	bb 27       	eor	r27, r27
     9c4:	66 27       	eor	r22, r22
     9c6:	77 27       	eor	r23, r23
     9c8:	cb 01       	movw	r24, r22
     9ca:	97 f9       	bld	r25, 7
     9cc:	08 95       	ret

000009ce <__mulsf3>:
     9ce:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3x>
     9d2:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_round>
     9d6:	0e 94 9f 04 	call	0x93e	; 0x93e <__fp_pscA>
     9da:	38 f0       	brcs	.+14     	; 0x9ea <__mulsf3+0x1c>
     9dc:	0e 94 a6 04 	call	0x94c	; 0x94c <__fp_pscB>
     9e0:	20 f0       	brcs	.+8      	; 0x9ea <__mulsf3+0x1c>
     9e2:	95 23       	and	r25, r21
     9e4:	11 f0       	breq	.+4      	; 0x9ea <__mulsf3+0x1c>
     9e6:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_inf>
     9ea:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_nan>
     9ee:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_szero>

000009f2 <__mulsf3x>:
     9f2:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_split3>
     9f6:	78 f3       	brcs	.-34     	; 0x9d6 <__mulsf3+0x8>

000009f8 <__mulsf3_pse>:
     9f8:	99 23       	and	r25, r25
     9fa:	c9 f3       	breq	.-14     	; 0x9ee <__mulsf3+0x20>
     9fc:	55 23       	and	r21, r21
     9fe:	b9 f3       	breq	.-18     	; 0x9ee <__mulsf3+0x20>
     a00:	95 0f       	add	r25, r21
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	55 1f       	adc	r21, r21
     a06:	aa 27       	eor	r26, r26
     a08:	ee 27       	eor	r30, r30
     a0a:	ff 27       	eor	r31, r31
     a0c:	bb 27       	eor	r27, r27
     a0e:	00 24       	eor	r0, r0
     a10:	08 94       	sec
     a12:	67 95       	ror	r22
     a14:	20 f4       	brcc	.+8      	; 0xa1e <__mulsf3_pse+0x26>
     a16:	e2 0f       	add	r30, r18
     a18:	f3 1f       	adc	r31, r19
     a1a:	b4 1f       	adc	r27, r20
     a1c:	0a 1e       	adc	r0, r26
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	44 1f       	adc	r20, r20
     a24:	aa 1f       	adc	r26, r26
     a26:	66 95       	lsr	r22
     a28:	a9 f7       	brne	.-22     	; 0xa14 <__mulsf3_pse+0x1c>
     a2a:	77 95       	ror	r23
     a2c:	30 f4       	brcc	.+12     	; 0xa3a <__mulsf3_pse+0x42>
     a2e:	f3 0f       	add	r31, r19
     a30:	b4 1f       	adc	r27, r20
     a32:	0a 1e       	adc	r0, r26
     a34:	12 1e       	adc	r1, r18
     a36:	08 f4       	brcc	.+2      	; 0xa3a <__mulsf3_pse+0x42>
     a38:	63 95       	inc	r22
     a3a:	33 0f       	add	r19, r19
     a3c:	44 1f       	adc	r20, r20
     a3e:	aa 1f       	adc	r26, r26
     a40:	22 1f       	adc	r18, r18
     a42:	76 95       	lsr	r23
     a44:	99 f7       	brne	.-26     	; 0xa2c <__mulsf3_pse+0x34>
     a46:	87 95       	ror	r24
     a48:	20 f4       	brcc	.+8      	; 0xa52 <__mulsf3_pse+0x5a>
     a4a:	b4 0f       	add	r27, r20
     a4c:	0a 1e       	adc	r0, r26
     a4e:	12 1e       	adc	r1, r18
     a50:	63 1f       	adc	r22, r19
     a52:	44 0f       	add	r20, r20
     a54:	aa 1f       	adc	r26, r26
     a56:	22 1f       	adc	r18, r18
     a58:	33 1f       	adc	r19, r19
     a5a:	86 95       	lsr	r24
     a5c:	a9 f7       	brne	.-22     	; 0xa48 <__mulsf3_pse+0x50>
     a5e:	86 2f       	mov	r24, r22
     a60:	71 2d       	mov	r23, r1
     a62:	60 2d       	mov	r22, r0
     a64:	11 24       	eor	r1, r1
     a66:	9f 57       	subi	r25, 0x7F	; 127
     a68:	50 40       	sbci	r21, 0x00	; 0
     a6a:	9a f0       	brmi	.+38     	; 0xa92 <__mulsf3_pse+0x9a>
     a6c:	f1 f0       	breq	.+60     	; 0xaaa <__mulsf3_pse+0xb2>
     a6e:	88 23       	and	r24, r24
     a70:	4a f0       	brmi	.+18     	; 0xa84 <__mulsf3_pse+0x8c>
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	bb 1f       	adc	r27, r27
     a78:	66 1f       	adc	r22, r22
     a7a:	77 1f       	adc	r23, r23
     a7c:	88 1f       	adc	r24, r24
     a7e:	91 50       	subi	r25, 0x01	; 1
     a80:	50 40       	sbci	r21, 0x00	; 0
     a82:	a9 f7       	brne	.-22     	; 0xa6e <__mulsf3_pse+0x76>
     a84:	9e 3f       	cpi	r25, 0xFE	; 254
     a86:	51 05       	cpc	r21, r1
     a88:	80 f0       	brcs	.+32     	; 0xaaa <__mulsf3_pse+0xb2>
     a8a:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_inf>
     a8e:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_szero>
     a92:	5f 3f       	cpi	r21, 0xFF	; 255
     a94:	e4 f3       	brlt	.-8      	; 0xa8e <__mulsf3_pse+0x96>
     a96:	98 3e       	cpi	r25, 0xE8	; 232
     a98:	d4 f3       	brlt	.-12     	; 0xa8e <__mulsf3_pse+0x96>
     a9a:	86 95       	lsr	r24
     a9c:	77 95       	ror	r23
     a9e:	67 95       	ror	r22
     aa0:	b7 95       	ror	r27
     aa2:	f7 95       	ror	r31
     aa4:	e7 95       	ror	r30
     aa6:	9f 5f       	subi	r25, 0xFF	; 255
     aa8:	c1 f7       	brne	.-16     	; 0xa9a <__mulsf3_pse+0xa2>
     aaa:	fe 2b       	or	r31, r30
     aac:	88 0f       	add	r24, r24
     aae:	91 1d       	adc	r25, r1
     ab0:	96 95       	lsr	r25
     ab2:	87 95       	ror	r24
     ab4:	97 f9       	bld	r25, 7
     ab6:	08 95       	ret

00000ab8 <__udivmodsi4>:
     ab8:	a1 e2       	ldi	r26, 0x21	; 33
     aba:	1a 2e       	mov	r1, r26
     abc:	aa 1b       	sub	r26, r26
     abe:	bb 1b       	sub	r27, r27
     ac0:	fd 01       	movw	r30, r26
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__udivmodsi4_ep>

00000ac4 <__udivmodsi4_loop>:
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	ee 1f       	adc	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	a2 17       	cp	r26, r18
     ace:	b3 07       	cpc	r27, r19
     ad0:	e4 07       	cpc	r30, r20
     ad2:	f5 07       	cpc	r31, r21
     ad4:	20 f0       	brcs	.+8      	; 0xade <__udivmodsi4_ep>
     ad6:	a2 1b       	sub	r26, r18
     ad8:	b3 0b       	sbc	r27, r19
     ada:	e4 0b       	sbc	r30, r20
     adc:	f5 0b       	sbc	r31, r21

00000ade <__udivmodsi4_ep>:
     ade:	66 1f       	adc	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	88 1f       	adc	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	1a 94       	dec	r1
     ae8:	69 f7       	brne	.-38     	; 0xac4 <__udivmodsi4_loop>
     aea:	60 95       	com	r22
     aec:	70 95       	com	r23
     aee:	80 95       	com	r24
     af0:	90 95       	com	r25
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	bd 01       	movw	r22, r26
     af8:	cf 01       	movw	r24, r30
     afa:	08 95       	ret

00000afc <do_rand>:
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	68 81       	ld	r22, Y
     b14:	79 81       	ldd	r23, Y+1	; 0x01
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	9b 81       	ldd	r25, Y+3	; 0x03
     b1a:	61 15       	cp	r22, r1
     b1c:	71 05       	cpc	r23, r1
     b1e:	81 05       	cpc	r24, r1
     b20:	91 05       	cpc	r25, r1
     b22:	21 f4       	brne	.+8      	; 0xb2c <do_rand+0x30>
     b24:	64 e2       	ldi	r22, 0x24	; 36
     b26:	79 ed       	ldi	r23, 0xD9	; 217
     b28:	8b e5       	ldi	r24, 0x5B	; 91
     b2a:	97 e0       	ldi	r25, 0x07	; 7
     b2c:	2d e1       	ldi	r18, 0x1D	; 29
     b2e:	33 ef       	ldi	r19, 0xF3	; 243
     b30:	41 e0       	ldi	r20, 0x01	; 1
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	0e 94 94 08 	call	0x1128	; 0x1128 <__divmodsi4>
     b38:	49 01       	movw	r8, r18
     b3a:	5a 01       	movw	r10, r20
     b3c:	27 ea       	ldi	r18, 0xA7	; 167
     b3e:	31 e4       	ldi	r19, 0x41	; 65
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__mulsi3>
     b48:	6b 01       	movw	r12, r22
     b4a:	7c 01       	movw	r14, r24
     b4c:	2c ee       	ldi	r18, 0xEC	; 236
     b4e:	34 ef       	ldi	r19, 0xF4	; 244
     b50:	4f ef       	ldi	r20, 0xFF	; 255
     b52:	5f ef       	ldi	r21, 0xFF	; 255
     b54:	c5 01       	movw	r24, r10
     b56:	b4 01       	movw	r22, r8
     b58:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__mulsi3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	8c 0d       	add	r24, r12
     b62:	9d 1d       	adc	r25, r13
     b64:	ae 1d       	adc	r26, r14
     b66:	bf 1d       	adc	r27, r15
     b68:	b7 ff       	sbrs	r27, 7
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <do_rand+0x76>
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	a1 09       	sbc	r26, r1
     b70:	b0 48       	sbci	r27, 0x80	; 128
     b72:	88 83       	st	Y, r24
     b74:	99 83       	std	Y+1, r25	; 0x01
     b76:	aa 83       	std	Y+2, r26	; 0x02
     b78:	bb 83       	std	Y+3, r27	; 0x03
     b7a:	9f 77       	andi	r25, 0x7F	; 127
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	8f 90       	pop	r8
     b90:	08 95       	ret

00000b92 <rand_r>:
     b92:	0e 94 7e 05 	call	0xafc	; 0xafc <do_rand>
     b96:	08 95       	ret

00000b98 <rand>:
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 7e 05 	call	0xafc	; 0xafc <do_rand>
     ba0:	08 95       	ret

00000ba2 <srand>:
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     baa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     bb2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     bb6:	08 95       	ret

00000bb8 <vfprintf>:
     bb8:	ab e0       	ldi	r26, 0x0B	; 11
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e2 ee       	ldi	r30, 0xE2	; 226
     bbe:	f5 e0       	ldi	r31, 0x05	; 5
     bc0:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__prologue_saves__>
     bc4:	6c 01       	movw	r12, r24
     bc6:	7b 01       	movw	r14, r22
     bc8:	8a 01       	movw	r16, r20
     bca:	fc 01       	movw	r30, r24
     bcc:	17 82       	std	Z+7, r1	; 0x07
     bce:	16 82       	std	Z+6, r1	; 0x06
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	81 ff       	sbrs	r24, 1
     bd4:	cf c1       	rjmp	.+926    	; 0xf74 <vfprintf+0x3bc>
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	3c 01       	movw	r6, r24
     bdc:	f6 01       	movw	r30, r12
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	f7 01       	movw	r30, r14
     be2:	93 fd       	sbrc	r25, 3
     be4:	85 91       	lpm	r24, Z+
     be6:	93 ff       	sbrs	r25, 3
     be8:	81 91       	ld	r24, Z+
     bea:	7f 01       	movw	r14, r30
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <vfprintf+0x3a>
     bf0:	bd c1       	rjmp	.+890    	; 0xf6c <vfprintf+0x3b4>
     bf2:	85 32       	cpi	r24, 0x25	; 37
     bf4:	39 f4       	brne	.+14     	; 0xc04 <vfprintf+0x4c>
     bf6:	93 fd       	sbrc	r25, 3
     bf8:	85 91       	lpm	r24, Z+
     bfa:	93 ff       	sbrs	r25, 3
     bfc:	81 91       	ld	r24, Z+
     bfe:	7f 01       	movw	r14, r30
     c00:	85 32       	cpi	r24, 0x25	; 37
     c02:	29 f4       	brne	.+10     	; 0xc0e <vfprintf+0x56>
     c04:	b6 01       	movw	r22, r12
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     c0c:	e7 cf       	rjmp	.-50     	; 0xbdc <vfprintf+0x24>
     c0e:	91 2c       	mov	r9, r1
     c10:	21 2c       	mov	r2, r1
     c12:	31 2c       	mov	r3, r1
     c14:	ff e1       	ldi	r31, 0x1F	; 31
     c16:	f3 15       	cp	r31, r3
     c18:	e0 f0       	brcs	.+56     	; 0xc52 <vfprintf+0x9a>
     c1a:	8b 32       	cpi	r24, 0x2B	; 43
     c1c:	79 f0       	breq	.+30     	; 0xc3c <vfprintf+0x84>
     c1e:	38 f4       	brcc	.+14     	; 0xc2e <vfprintf+0x76>
     c20:	80 32       	cpi	r24, 0x20	; 32
     c22:	79 f0       	breq	.+30     	; 0xc42 <vfprintf+0x8a>
     c24:	83 32       	cpi	r24, 0x23	; 35
     c26:	a9 f4       	brne	.+42     	; 0xc52 <vfprintf+0x9a>
     c28:	23 2d       	mov	r18, r3
     c2a:	20 61       	ori	r18, 0x10	; 16
     c2c:	10 c0       	rjmp	.+32     	; 0xc4e <vfprintf+0x96>
     c2e:	8d 32       	cpi	r24, 0x2D	; 45
     c30:	59 f0       	breq	.+22     	; 0xc48 <vfprintf+0x90>
     c32:	80 33       	cpi	r24, 0x30	; 48
     c34:	71 f4       	brne	.+28     	; 0xc52 <vfprintf+0x9a>
     c36:	23 2d       	mov	r18, r3
     c38:	21 60       	ori	r18, 0x01	; 1
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <vfprintf+0x96>
     c3c:	83 2d       	mov	r24, r3
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	38 2e       	mov	r3, r24
     c42:	e3 2d       	mov	r30, r3
     c44:	e4 60       	ori	r30, 0x04	; 4
     c46:	24 c0       	rjmp	.+72     	; 0xc90 <vfprintf+0xd8>
     c48:	f3 2d       	mov	r31, r3
     c4a:	f8 60       	ori	r31, 0x08	; 8
     c4c:	27 c0       	rjmp	.+78     	; 0xc9c <vfprintf+0xe4>
     c4e:	32 2e       	mov	r3, r18
     c50:	29 c0       	rjmp	.+82     	; 0xca4 <vfprintf+0xec>
     c52:	37 fc       	sbrc	r3, 7
     c54:	2f c0       	rjmp	.+94     	; 0xcb4 <vfprintf+0xfc>
     c56:	20 ed       	ldi	r18, 0xD0	; 208
     c58:	28 0f       	add	r18, r24
     c5a:	2a 30       	cpi	r18, 0x0A	; 10
     c5c:	98 f4       	brcc	.+38     	; 0xc84 <vfprintf+0xcc>
     c5e:	36 fe       	sbrs	r3, 6
     c60:	07 c0       	rjmp	.+14     	; 0xc70 <vfprintf+0xb8>
     c62:	89 2d       	mov	r24, r9
     c64:	6a e0       	ldi	r22, 0x0A	; 10
     c66:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__mulqi3>
     c6a:	92 2e       	mov	r9, r18
     c6c:	98 0e       	add	r9, r24
     c6e:	1a c0       	rjmp	.+52     	; 0xca4 <vfprintf+0xec>
     c70:	82 2d       	mov	r24, r2
     c72:	6a e0       	ldi	r22, 0x0A	; 10
     c74:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__mulqi3>
     c78:	22 2e       	mov	r2, r18
     c7a:	28 0e       	add	r2, r24
     c7c:	83 2d       	mov	r24, r3
     c7e:	80 62       	ori	r24, 0x20	; 32
     c80:	38 2e       	mov	r3, r24
     c82:	10 c0       	rjmp	.+32     	; 0xca4 <vfprintf+0xec>
     c84:	8e 32       	cpi	r24, 0x2E	; 46
     c86:	31 f4       	brne	.+12     	; 0xc94 <vfprintf+0xdc>
     c88:	36 fc       	sbrc	r3, 6
     c8a:	70 c1       	rjmp	.+736    	; 0xf6c <vfprintf+0x3b4>
     c8c:	e3 2d       	mov	r30, r3
     c8e:	e0 64       	ori	r30, 0x40	; 64
     c90:	3e 2e       	mov	r3, r30
     c92:	08 c0       	rjmp	.+16     	; 0xca4 <vfprintf+0xec>
     c94:	8c 36       	cpi	r24, 0x6C	; 108
     c96:	21 f4       	brne	.+8      	; 0xca0 <vfprintf+0xe8>
     c98:	f3 2d       	mov	r31, r3
     c9a:	f0 68       	ori	r31, 0x80	; 128
     c9c:	3f 2e       	mov	r3, r31
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <vfprintf+0xec>
     ca0:	88 36       	cpi	r24, 0x68	; 104
     ca2:	41 f4       	brne	.+16     	; 0xcb4 <vfprintf+0xfc>
     ca4:	f7 01       	movw	r30, r14
     ca6:	93 fd       	sbrc	r25, 3
     ca8:	85 91       	lpm	r24, Z+
     caa:	93 ff       	sbrs	r25, 3
     cac:	81 91       	ld	r24, Z+
     cae:	7f 01       	movw	r14, r30
     cb0:	81 11       	cpse	r24, r1
     cb2:	b0 cf       	rjmp	.-160    	; 0xc14 <vfprintf+0x5c>
     cb4:	98 2f       	mov	r25, r24
     cb6:	9f 7d       	andi	r25, 0xDF	; 223
     cb8:	95 54       	subi	r25, 0x45	; 69
     cba:	93 30       	cpi	r25, 0x03	; 3
     cbc:	28 f4       	brcc	.+10     	; 0xcc8 <vfprintf+0x110>
     cbe:	0c 5f       	subi	r16, 0xFC	; 252
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	2f e3       	ldi	r18, 0x3F	; 63
     cc4:	29 83       	std	Y+1, r18	; 0x01
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <vfprintf+0x12a>
     cc8:	83 36       	cpi	r24, 0x63	; 99
     cca:	31 f0       	breq	.+12     	; 0xcd8 <vfprintf+0x120>
     ccc:	83 37       	cpi	r24, 0x73	; 115
     cce:	71 f0       	breq	.+28     	; 0xcec <vfprintf+0x134>
     cd0:	83 35       	cpi	r24, 0x53	; 83
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <vfprintf+0x11e>
     cd4:	59 c0       	rjmp	.+178    	; 0xd88 <vfprintf+0x1d0>
     cd6:	21 c0       	rjmp	.+66     	; 0xd1a <vfprintf+0x162>
     cd8:	f8 01       	movw	r30, r16
     cda:	80 81       	ld	r24, Z
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	0e 5f       	subi	r16, 0xFE	; 254
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
     ce2:	88 24       	eor	r8, r8
     ce4:	83 94       	inc	r8
     ce6:	91 2c       	mov	r9, r1
     ce8:	53 01       	movw	r10, r6
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <vfprintf+0x15a>
     cec:	28 01       	movw	r4, r16
     cee:	f2 e0       	ldi	r31, 0x02	; 2
     cf0:	4f 0e       	add	r4, r31
     cf2:	51 1c       	adc	r5, r1
     cf4:	f8 01       	movw	r30, r16
     cf6:	a0 80       	ld	r10, Z
     cf8:	b1 80       	ldd	r11, Z+1	; 0x01
     cfa:	36 fe       	sbrs	r3, 6
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <vfprintf+0x14c>
     cfe:	69 2d       	mov	r22, r9
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <vfprintf+0x150>
     d04:	6f ef       	ldi	r22, 0xFF	; 255
     d06:	7f ef       	ldi	r23, 0xFF	; 255
     d08:	c5 01       	movw	r24, r10
     d0a:	0e 94 cb 07 	call	0xf96	; 0xf96 <strnlen>
     d0e:	4c 01       	movw	r8, r24
     d10:	82 01       	movw	r16, r4
     d12:	f3 2d       	mov	r31, r3
     d14:	ff 77       	andi	r31, 0x7F	; 127
     d16:	3f 2e       	mov	r3, r31
     d18:	16 c0       	rjmp	.+44     	; 0xd46 <vfprintf+0x18e>
     d1a:	28 01       	movw	r4, r16
     d1c:	22 e0       	ldi	r18, 0x02	; 2
     d1e:	42 0e       	add	r4, r18
     d20:	51 1c       	adc	r5, r1
     d22:	f8 01       	movw	r30, r16
     d24:	a0 80       	ld	r10, Z
     d26:	b1 80       	ldd	r11, Z+1	; 0x01
     d28:	36 fe       	sbrs	r3, 6
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <vfprintf+0x17a>
     d2c:	69 2d       	mov	r22, r9
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <vfprintf+0x17e>
     d32:	6f ef       	ldi	r22, 0xFF	; 255
     d34:	7f ef       	ldi	r23, 0xFF	; 255
     d36:	c5 01       	movw	r24, r10
     d38:	0e 94 c0 07 	call	0xf80	; 0xf80 <strnlen_P>
     d3c:	4c 01       	movw	r8, r24
     d3e:	f3 2d       	mov	r31, r3
     d40:	f0 68       	ori	r31, 0x80	; 128
     d42:	3f 2e       	mov	r3, r31
     d44:	82 01       	movw	r16, r4
     d46:	33 fc       	sbrc	r3, 3
     d48:	1b c0       	rjmp	.+54     	; 0xd80 <vfprintf+0x1c8>
     d4a:	82 2d       	mov	r24, r2
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 16       	cp	r8, r24
     d50:	99 06       	cpc	r9, r25
     d52:	b0 f4       	brcc	.+44     	; 0xd80 <vfprintf+0x1c8>
     d54:	b6 01       	movw	r22, r12
     d56:	80 e2       	ldi	r24, 0x20	; 32
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     d5e:	2a 94       	dec	r2
     d60:	f4 cf       	rjmp	.-24     	; 0xd4a <vfprintf+0x192>
     d62:	f5 01       	movw	r30, r10
     d64:	37 fc       	sbrc	r3, 7
     d66:	85 91       	lpm	r24, Z+
     d68:	37 fe       	sbrs	r3, 7
     d6a:	81 91       	ld	r24, Z+
     d6c:	5f 01       	movw	r10, r30
     d6e:	b6 01       	movw	r22, r12
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     d76:	21 10       	cpse	r2, r1
     d78:	2a 94       	dec	r2
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	82 1a       	sub	r8, r18
     d7e:	91 08       	sbc	r9, r1
     d80:	81 14       	cp	r8, r1
     d82:	91 04       	cpc	r9, r1
     d84:	71 f7       	brne	.-36     	; 0xd62 <vfprintf+0x1aa>
     d86:	e8 c0       	rjmp	.+464    	; 0xf58 <vfprintf+0x3a0>
     d88:	84 36       	cpi	r24, 0x64	; 100
     d8a:	11 f0       	breq	.+4      	; 0xd90 <vfprintf+0x1d8>
     d8c:	89 36       	cpi	r24, 0x69	; 105
     d8e:	41 f5       	brne	.+80     	; 0xde0 <vfprintf+0x228>
     d90:	f8 01       	movw	r30, r16
     d92:	37 fe       	sbrs	r3, 7
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <vfprintf+0x1ec>
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	0c 5f       	subi	r16, 0xFC	; 252
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <vfprintf+0x1fc>
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	07 2e       	mov	r0, r23
     daa:	00 0c       	add	r0, r0
     dac:	88 0b       	sbc	r24, r24
     dae:	99 0b       	sbc	r25, r25
     db0:	0e 5f       	subi	r16, 0xFE	; 254
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	f3 2d       	mov	r31, r3
     db6:	ff 76       	andi	r31, 0x6F	; 111
     db8:	3f 2e       	mov	r3, r31
     dba:	97 ff       	sbrs	r25, 7
     dbc:	09 c0       	rjmp	.+18     	; 0xdd0 <vfprintf+0x218>
     dbe:	90 95       	com	r25
     dc0:	80 95       	com	r24
     dc2:	70 95       	com	r23
     dc4:	61 95       	neg	r22
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	8f 4f       	sbci	r24, 0xFF	; 255
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	f0 68       	ori	r31, 0x80	; 128
     dce:	3f 2e       	mov	r3, r31
     dd0:	2a e0       	ldi	r18, 0x0A	; 10
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	a3 01       	movw	r20, r6
     dd6:	0e 94 12 08 	call	0x1024	; 0x1024 <__ultoa_invert>
     dda:	88 2e       	mov	r8, r24
     ddc:	86 18       	sub	r8, r6
     dde:	45 c0       	rjmp	.+138    	; 0xe6a <vfprintf+0x2b2>
     de0:	85 37       	cpi	r24, 0x75	; 117
     de2:	31 f4       	brne	.+12     	; 0xdf0 <vfprintf+0x238>
     de4:	23 2d       	mov	r18, r3
     de6:	2f 7e       	andi	r18, 0xEF	; 239
     de8:	b2 2e       	mov	r11, r18
     dea:	2a e0       	ldi	r18, 0x0A	; 10
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	25 c0       	rjmp	.+74     	; 0xe3a <vfprintf+0x282>
     df0:	93 2d       	mov	r25, r3
     df2:	99 7f       	andi	r25, 0xF9	; 249
     df4:	b9 2e       	mov	r11, r25
     df6:	8f 36       	cpi	r24, 0x6F	; 111
     df8:	c1 f0       	breq	.+48     	; 0xe2a <vfprintf+0x272>
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x24a>
     dfc:	88 35       	cpi	r24, 0x58	; 88
     dfe:	79 f0       	breq	.+30     	; 0xe1e <vfprintf+0x266>
     e00:	b5 c0       	rjmp	.+362    	; 0xf6c <vfprintf+0x3b4>
     e02:	80 37       	cpi	r24, 0x70	; 112
     e04:	19 f0       	breq	.+6      	; 0xe0c <vfprintf+0x254>
     e06:	88 37       	cpi	r24, 0x78	; 120
     e08:	21 f0       	breq	.+8      	; 0xe12 <vfprintf+0x25a>
     e0a:	b0 c0       	rjmp	.+352    	; 0xf6c <vfprintf+0x3b4>
     e0c:	e9 2f       	mov	r30, r25
     e0e:	e0 61       	ori	r30, 0x10	; 16
     e10:	be 2e       	mov	r11, r30
     e12:	b4 fe       	sbrs	r11, 4
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x278>
     e16:	fb 2d       	mov	r31, r11
     e18:	f4 60       	ori	r31, 0x04	; 4
     e1a:	bf 2e       	mov	r11, r31
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x278>
     e1e:	34 fe       	sbrs	r3, 4
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <vfprintf+0x27e>
     e22:	29 2f       	mov	r18, r25
     e24:	26 60       	ori	r18, 0x06	; 6
     e26:	b2 2e       	mov	r11, r18
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x27e>
     e2a:	28 e0       	ldi	r18, 0x08	; 8
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x282>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x282>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	32 e0       	ldi	r19, 0x02	; 2
     e3a:	f8 01       	movw	r30, r16
     e3c:	b7 fe       	sbrs	r11, 7
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <vfprintf+0x296>
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	82 81       	ldd	r24, Z+2	; 0x02
     e46:	93 81       	ldd	r25, Z+3	; 0x03
     e48:	0c 5f       	subi	r16, 0xFC	; 252
     e4a:	1f 4f       	sbci	r17, 0xFF	; 255
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <vfprintf+0x2a2>
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 5f       	subi	r16, 0xFE	; 254
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	a3 01       	movw	r20, r6
     e5c:	0e 94 12 08 	call	0x1024	; 0x1024 <__ultoa_invert>
     e60:	88 2e       	mov	r8, r24
     e62:	86 18       	sub	r8, r6
     e64:	fb 2d       	mov	r31, r11
     e66:	ff 77       	andi	r31, 0x7F	; 127
     e68:	3f 2e       	mov	r3, r31
     e6a:	36 fe       	sbrs	r3, 6
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <vfprintf+0x2d0>
     e6e:	23 2d       	mov	r18, r3
     e70:	2e 7f       	andi	r18, 0xFE	; 254
     e72:	a2 2e       	mov	r10, r18
     e74:	89 14       	cp	r8, r9
     e76:	58 f4       	brcc	.+22     	; 0xe8e <vfprintf+0x2d6>
     e78:	34 fe       	sbrs	r3, 4
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <vfprintf+0x2da>
     e7c:	32 fc       	sbrc	r3, 2
     e7e:	09 c0       	rjmp	.+18     	; 0xe92 <vfprintf+0x2da>
     e80:	83 2d       	mov	r24, r3
     e82:	8e 7e       	andi	r24, 0xEE	; 238
     e84:	a8 2e       	mov	r10, r24
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <vfprintf+0x2da>
     e88:	b8 2c       	mov	r11, r8
     e8a:	a3 2c       	mov	r10, r3
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <vfprintf+0x2dc>
     e8e:	b8 2c       	mov	r11, r8
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <vfprintf+0x2dc>
     e92:	b9 2c       	mov	r11, r9
     e94:	a4 fe       	sbrs	r10, 4
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <vfprintf+0x2fe>
     e98:	fe 01       	movw	r30, r28
     e9a:	e8 0d       	add	r30, r8
     e9c:	f1 1d       	adc	r31, r1
     e9e:	80 81       	ld	r24, Z
     ea0:	80 33       	cpi	r24, 0x30	; 48
     ea2:	21 f4       	brne	.+8      	; 0xeac <vfprintf+0x2f4>
     ea4:	9a 2d       	mov	r25, r10
     ea6:	99 7e       	andi	r25, 0xE9	; 233
     ea8:	a9 2e       	mov	r10, r25
     eaa:	09 c0       	rjmp	.+18     	; 0xebe <vfprintf+0x306>
     eac:	a2 fe       	sbrs	r10, 2
     eae:	06 c0       	rjmp	.+12     	; 0xebc <vfprintf+0x304>
     eb0:	b3 94       	inc	r11
     eb2:	b3 94       	inc	r11
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <vfprintf+0x306>
     eb6:	8a 2d       	mov	r24, r10
     eb8:	86 78       	andi	r24, 0x86	; 134
     eba:	09 f0       	breq	.+2      	; 0xebe <vfprintf+0x306>
     ebc:	b3 94       	inc	r11
     ebe:	a3 fc       	sbrc	r10, 3
     ec0:	11 c0       	rjmp	.+34     	; 0xee4 <vfprintf+0x32c>
     ec2:	a0 fe       	sbrs	r10, 0
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <vfprintf+0x31a>
     ec6:	b2 14       	cp	r11, r2
     ec8:	88 f4       	brcc	.+34     	; 0xeec <vfprintf+0x334>
     eca:	28 0c       	add	r2, r8
     ecc:	92 2c       	mov	r9, r2
     ece:	9b 18       	sub	r9, r11
     ed0:	0e c0       	rjmp	.+28     	; 0xeee <vfprintf+0x336>
     ed2:	b2 14       	cp	r11, r2
     ed4:	60 f4       	brcc	.+24     	; 0xeee <vfprintf+0x336>
     ed6:	b6 01       	movw	r22, r12
     ed8:	80 e2       	ldi	r24, 0x20	; 32
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     ee0:	b3 94       	inc	r11
     ee2:	f7 cf       	rjmp	.-18     	; 0xed2 <vfprintf+0x31a>
     ee4:	b2 14       	cp	r11, r2
     ee6:	18 f4       	brcc	.+6      	; 0xeee <vfprintf+0x336>
     ee8:	2b 18       	sub	r2, r11
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x338>
     eec:	98 2c       	mov	r9, r8
     eee:	21 2c       	mov	r2, r1
     ef0:	a4 fe       	sbrs	r10, 4
     ef2:	10 c0       	rjmp	.+32     	; 0xf14 <vfprintf+0x35c>
     ef4:	b6 01       	movw	r22, r12
     ef6:	80 e3       	ldi	r24, 0x30	; 48
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     efe:	a2 fe       	sbrs	r10, 2
     f00:	17 c0       	rjmp	.+46     	; 0xf30 <vfprintf+0x378>
     f02:	a1 fc       	sbrc	r10, 1
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <vfprintf+0x354>
     f06:	88 e7       	ldi	r24, 0x78	; 120
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <vfprintf+0x358>
     f0c:	88 e5       	ldi	r24, 0x58	; 88
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	b6 01       	movw	r22, r12
     f12:	0c c0       	rjmp	.+24     	; 0xf2c <vfprintf+0x374>
     f14:	8a 2d       	mov	r24, r10
     f16:	86 78       	andi	r24, 0x86	; 134
     f18:	59 f0       	breq	.+22     	; 0xf30 <vfprintf+0x378>
     f1a:	a1 fe       	sbrs	r10, 1
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <vfprintf+0x36a>
     f1e:	8b e2       	ldi	r24, 0x2B	; 43
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <vfprintf+0x36c>
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	a7 fc       	sbrc	r10, 7
     f26:	8d e2       	ldi	r24, 0x2D	; 45
     f28:	b6 01       	movw	r22, r12
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     f30:	89 14       	cp	r8, r9
     f32:	38 f4       	brcc	.+14     	; 0xf42 <vfprintf+0x38a>
     f34:	b6 01       	movw	r22, r12
     f36:	80 e3       	ldi	r24, 0x30	; 48
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     f3e:	9a 94       	dec	r9
     f40:	f7 cf       	rjmp	.-18     	; 0xf30 <vfprintf+0x378>
     f42:	8a 94       	dec	r8
     f44:	f3 01       	movw	r30, r6
     f46:	e8 0d       	add	r30, r8
     f48:	f1 1d       	adc	r31, r1
     f4a:	80 81       	ld	r24, Z
     f4c:	b6 01       	movw	r22, r12
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     f54:	81 10       	cpse	r8, r1
     f56:	f5 cf       	rjmp	.-22     	; 0xf42 <vfprintf+0x38a>
     f58:	22 20       	and	r2, r2
     f5a:	09 f4       	brne	.+2      	; 0xf5e <vfprintf+0x3a6>
     f5c:	3f ce       	rjmp	.-898    	; 0xbdc <vfprintf+0x24>
     f5e:	b6 01       	movw	r22, r12
     f60:	80 e2       	ldi	r24, 0x20	; 32
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 d6 07 	call	0xfac	; 0xfac <fputc>
     f68:	2a 94       	dec	r2
     f6a:	f6 cf       	rjmp	.-20     	; 0xf58 <vfprintf+0x3a0>
     f6c:	f6 01       	movw	r30, r12
     f6e:	86 81       	ldd	r24, Z+6	; 0x06
     f70:	97 81       	ldd	r25, Z+7	; 0x07
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x3c0>
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	2b 96       	adiw	r28, 0x0b	; 11
     f7a:	e2 e1       	ldi	r30, 0x12	; 18
     f7c:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__epilogue_restores__>

00000f80 <strnlen_P>:
     f80:	fc 01       	movw	r30, r24
     f82:	05 90       	lpm	r0, Z+
     f84:	61 50       	subi	r22, 0x01	; 1
     f86:	70 40       	sbci	r23, 0x00	; 0
     f88:	01 10       	cpse	r0, r1
     f8a:	d8 f7       	brcc	.-10     	; 0xf82 <strnlen_P+0x2>
     f8c:	80 95       	com	r24
     f8e:	90 95       	com	r25
     f90:	8e 0f       	add	r24, r30
     f92:	9f 1f       	adc	r25, r31
     f94:	08 95       	ret

00000f96 <strnlen>:
     f96:	fc 01       	movw	r30, r24
     f98:	61 50       	subi	r22, 0x01	; 1
     f9a:	70 40       	sbci	r23, 0x00	; 0
     f9c:	01 90       	ld	r0, Z+
     f9e:	01 10       	cpse	r0, r1
     fa0:	d8 f7       	brcc	.-10     	; 0xf98 <strnlen+0x2>
     fa2:	80 95       	com	r24
     fa4:	90 95       	com	r25
     fa6:	8e 0f       	add	r24, r30
     fa8:	9f 1f       	adc	r25, r31
     faa:	08 95       	ret

00000fac <fputc>:
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	fb 01       	movw	r30, r22
     fb6:	23 81       	ldd	r18, Z+3	; 0x03
     fb8:	21 fd       	sbrc	r18, 1
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <fputc+0x16>
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
     fc0:	2c c0       	rjmp	.+88     	; 0x101a <fputc+0x6e>
     fc2:	22 ff       	sbrs	r18, 2
     fc4:	16 c0       	rjmp	.+44     	; 0xff2 <fputc+0x46>
     fc6:	46 81       	ldd	r20, Z+6	; 0x06
     fc8:	57 81       	ldd	r21, Z+7	; 0x07
     fca:	24 81       	ldd	r18, Z+4	; 0x04
     fcc:	35 81       	ldd	r19, Z+5	; 0x05
     fce:	42 17       	cp	r20, r18
     fd0:	53 07       	cpc	r21, r19
     fd2:	44 f4       	brge	.+16     	; 0xfe4 <fputc+0x38>
     fd4:	a0 81       	ld	r26, Z
     fd6:	b1 81       	ldd	r27, Z+1	; 0x01
     fd8:	9d 01       	movw	r18, r26
     fda:	2f 5f       	subi	r18, 0xFF	; 255
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	31 83       	std	Z+1, r19	; 0x01
     fe0:	20 83       	st	Z, r18
     fe2:	8c 93       	st	X, r24
     fe4:	26 81       	ldd	r18, Z+6	; 0x06
     fe6:	37 81       	ldd	r19, Z+7	; 0x07
     fe8:	2f 5f       	subi	r18, 0xFF	; 255
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	37 83       	std	Z+7, r19	; 0x07
     fee:	26 83       	std	Z+6, r18	; 0x06
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <fputc+0x6e>
     ff2:	8b 01       	movw	r16, r22
     ff4:	ec 01       	movw	r28, r24
     ff6:	fb 01       	movw	r30, r22
     ff8:	00 84       	ldd	r0, Z+8	; 0x08
     ffa:	f1 85       	ldd	r31, Z+9	; 0x09
     ffc:	e0 2d       	mov	r30, r0
     ffe:	09 95       	icall
    1000:	89 2b       	or	r24, r25
    1002:	e1 f6       	brne	.-72     	; 0xfbc <fputc+0x10>
    1004:	d8 01       	movw	r26, r16
    1006:	16 96       	adiw	r26, 0x06	; 6
    1008:	8d 91       	ld	r24, X+
    100a:	9c 91       	ld	r25, X
    100c:	17 97       	sbiw	r26, 0x07	; 7
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	17 96       	adiw	r26, 0x07	; 7
    1012:	9c 93       	st	X, r25
    1014:	8e 93       	st	-X, r24
    1016:	16 97       	sbiw	r26, 0x06	; 6
    1018:	ce 01       	movw	r24, r28
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <__ultoa_invert>:
    1024:	fa 01       	movw	r30, r20
    1026:	aa 27       	eor	r26, r26
    1028:	28 30       	cpi	r18, 0x08	; 8
    102a:	61 f1       	breq	.+88     	; 0x1084 <__ultoa_invert+0x60>
    102c:	20 31       	cpi	r18, 0x10	; 16
    102e:	91 f1       	breq	.+100    	; 0x1094 <__ultoa_invert+0x70>
    1030:	e8 94       	clt
    1032:	6f 93       	push	r22
    1034:	6e 7f       	andi	r22, 0xFE	; 254
    1036:	6e 5f       	subi	r22, 0xFE	; 254
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	af 4f       	sbci	r26, 0xFF	; 255
    1040:	b1 e0       	ldi	r27, 0x01	; 1
    1042:	40 d0       	rcall	.+128    	; 0x10c4 <__ultoa_invert+0xa0>
    1044:	b4 e0       	ldi	r27, 0x04	; 4
    1046:	3e d0       	rcall	.+124    	; 0x10c4 <__ultoa_invert+0xa0>
    1048:	67 0f       	add	r22, r23
    104a:	78 1f       	adc	r23, r24
    104c:	89 1f       	adc	r24, r25
    104e:	9a 1f       	adc	r25, r26
    1050:	a1 1d       	adc	r26, r1
    1052:	68 0f       	add	r22, r24
    1054:	79 1f       	adc	r23, r25
    1056:	8a 1f       	adc	r24, r26
    1058:	91 1d       	adc	r25, r1
    105a:	a1 1d       	adc	r26, r1
    105c:	6a 0f       	add	r22, r26
    105e:	71 1d       	adc	r23, r1
    1060:	81 1d       	adc	r24, r1
    1062:	91 1d       	adc	r25, r1
    1064:	a1 1d       	adc	r26, r1
    1066:	22 d0       	rcall	.+68     	; 0x10ac <__ultoa_invert+0x88>
    1068:	09 f4       	brne	.+2      	; 0x106c <__ultoa_invert+0x48>
    106a:	68 94       	set
    106c:	3f 91       	pop	r19
    106e:	06 2e       	mov	r0, r22
    1070:	00 0c       	add	r0, r0
    1072:	30 19       	sub	r19, r0
    1074:	00 0c       	add	r0, r0
    1076:	00 0c       	add	r0, r0
    1078:	30 19       	sub	r19, r0
    107a:	30 5d       	subi	r19, 0xD0	; 208
    107c:	31 93       	st	Z+, r19
    107e:	ce f6       	brtc	.-78     	; 0x1032 <__ultoa_invert+0xe>
    1080:	cf 01       	movw	r24, r30
    1082:	08 95       	ret
    1084:	46 2f       	mov	r20, r22
    1086:	47 70       	andi	r20, 0x07	; 7
    1088:	40 5d       	subi	r20, 0xD0	; 208
    108a:	41 93       	st	Z+, r20
    108c:	b3 e0       	ldi	r27, 0x03	; 3
    108e:	0f d0       	rcall	.+30     	; 0x10ae <__ultoa_invert+0x8a>
    1090:	c9 f7       	brne	.-14     	; 0x1084 <__ultoa_invert+0x60>
    1092:	f6 cf       	rjmp	.-20     	; 0x1080 <__ultoa_invert+0x5c>
    1094:	46 2f       	mov	r20, r22
    1096:	4f 70       	andi	r20, 0x0F	; 15
    1098:	40 5d       	subi	r20, 0xD0	; 208
    109a:	4a 33       	cpi	r20, 0x3A	; 58
    109c:	18 f0       	brcs	.+6      	; 0x10a4 <__ultoa_invert+0x80>
    109e:	49 5d       	subi	r20, 0xD9	; 217
    10a0:	31 fd       	sbrc	r19, 1
    10a2:	40 52       	subi	r20, 0x20	; 32
    10a4:	41 93       	st	Z+, r20
    10a6:	02 d0       	rcall	.+4      	; 0x10ac <__ultoa_invert+0x88>
    10a8:	a9 f7       	brne	.-22     	; 0x1094 <__ultoa_invert+0x70>
    10aa:	ea cf       	rjmp	.-44     	; 0x1080 <__ultoa_invert+0x5c>
    10ac:	b4 e0       	ldi	r27, 0x04	; 4
    10ae:	a6 95       	lsr	r26
    10b0:	97 95       	ror	r25
    10b2:	87 95       	ror	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	ba 95       	dec	r27
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <__ultoa_invert+0x8a>
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	61 05       	cpc	r22, r1
    10c0:	71 05       	cpc	r23, r1
    10c2:	08 95       	ret
    10c4:	9b 01       	movw	r18, r22
    10c6:	ac 01       	movw	r20, r24
    10c8:	0a 2e       	mov	r0, r26
    10ca:	06 94       	lsr	r0
    10cc:	57 95       	ror	r21
    10ce:	47 95       	ror	r20
    10d0:	37 95       	ror	r19
    10d2:	27 95       	ror	r18
    10d4:	ba 95       	dec	r27
    10d6:	c9 f7       	brne	.-14     	; 0x10ca <__ultoa_invert+0xa6>
    10d8:	62 0f       	add	r22, r18
    10da:	73 1f       	adc	r23, r19
    10dc:	84 1f       	adc	r24, r20
    10de:	95 1f       	adc	r25, r21
    10e0:	a0 1d       	adc	r26, r0
    10e2:	08 95       	ret

000010e4 <__mulqi3>:
    10e4:	00 24       	eor	r0, r0

000010e6 <__mulqi3_loop>:
    10e6:	80 fd       	sbrc	r24, 0
    10e8:	06 0e       	add	r0, r22
    10ea:	66 0f       	add	r22, r22
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <__mulqi3_exit>
    10ee:	86 95       	lsr	r24
    10f0:	d1 f7       	brne	.-12     	; 0x10e6 <__mulqi3_loop>

000010f2 <__mulqi3_exit>:
    10f2:	80 2d       	mov	r24, r0
    10f4:	08 95       	ret

000010f6 <__mulsi3>:
    10f6:	ee 27       	eor	r30, r30
    10f8:	ff 27       	eor	r31, r31

000010fa <__mulsi3_helper>:
    10fa:	aa 27       	eor	r26, r26
    10fc:	bb 27       	eor	r27, r27
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <__mulsi3_helper+0x16>
    1100:	a2 0f       	add	r26, r18
    1102:	b3 1f       	adc	r27, r19
    1104:	e4 1f       	adc	r30, r20
    1106:	f5 1f       	adc	r31, r21
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	44 1f       	adc	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	96 95       	lsr	r25
    1112:	87 95       	ror	r24
    1114:	77 95       	ror	r23
    1116:	67 95       	ror	r22
    1118:	98 f3       	brcs	.-26     	; 0x1100 <__mulsi3_helper+0x6>
    111a:	70 40       	sbci	r23, 0x00	; 0
    111c:	a9 f7       	brne	.-22     	; 0x1108 <__mulsi3_helper+0xe>
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	99 f7       	brne	.-26     	; 0x1108 <__mulsi3_helper+0xe>
    1122:	bd 01       	movw	r22, r26
    1124:	cf 01       	movw	r24, r30
    1126:	08 95       	ret

00001128 <__divmodsi4>:
    1128:	05 2e       	mov	r0, r21
    112a:	97 fb       	bst	r25, 7
    112c:	1e f4       	brtc	.+6      	; 0x1134 <__divmodsi4+0xc>
    112e:	00 94       	com	r0
    1130:	0e 94 ab 08 	call	0x1156	; 0x1156 <__negsi2>
    1134:	57 fd       	sbrc	r21, 7
    1136:	07 d0       	rcall	.+14     	; 0x1146 <__divmodsi4_neg2>
    1138:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
    113c:	07 fc       	sbrc	r0, 7
    113e:	03 d0       	rcall	.+6      	; 0x1146 <__divmodsi4_neg2>
    1140:	4e f4       	brtc	.+18     	; 0x1154 <__divmodsi4_exit>
    1142:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__negsi2>

00001146 <__divmodsi4_neg2>:
    1146:	50 95       	com	r21
    1148:	40 95       	com	r20
    114a:	30 95       	com	r19
    114c:	21 95       	neg	r18
    114e:	3f 4f       	sbci	r19, 0xFF	; 255
    1150:	4f 4f       	sbci	r20, 0xFF	; 255
    1152:	5f 4f       	sbci	r21, 0xFF	; 255

00001154 <__divmodsi4_exit>:
    1154:	08 95       	ret

00001156 <__negsi2>:
    1156:	90 95       	com	r25
    1158:	80 95       	com	r24
    115a:	70 95       	com	r23
    115c:	61 95       	neg	r22
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	08 95       	ret

00001166 <__prologue_saves__>:
    1166:	2f 92       	push	r2
    1168:	3f 92       	push	r3
    116a:	4f 92       	push	r4
    116c:	5f 92       	push	r5
    116e:	6f 92       	push	r6
    1170:	7f 92       	push	r7
    1172:	8f 92       	push	r8
    1174:	9f 92       	push	r9
    1176:	af 92       	push	r10
    1178:	bf 92       	push	r11
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	ca 1b       	sub	r28, r26
    1190:	db 0b       	sbc	r29, r27
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	09 94       	ijmp

0000119e <__epilogue_restores__>:
    119e:	2a 88       	ldd	r2, Y+18	; 0x12
    11a0:	39 88       	ldd	r3, Y+17	; 0x11
    11a2:	48 88       	ldd	r4, Y+16	; 0x10
    11a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    11a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    11a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    11aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    11ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    11ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    11b0:	b9 84       	ldd	r11, Y+9	; 0x09
    11b2:	c8 84       	ldd	r12, Y+8	; 0x08
    11b4:	df 80       	ldd	r13, Y+7	; 0x07
    11b6:	ee 80       	ldd	r14, Y+6	; 0x06
    11b8:	fd 80       	ldd	r15, Y+5	; 0x05
    11ba:	0c 81       	ldd	r16, Y+4	; 0x04
    11bc:	1b 81       	ldd	r17, Y+3	; 0x03
    11be:	aa 81       	ldd	r26, Y+2	; 0x02
    11c0:	b9 81       	ldd	r27, Y+1	; 0x01
    11c2:	ce 0f       	add	r28, r30
    11c4:	d1 1d       	adc	r29, r1
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	ed 01       	movw	r28, r26
    11d2:	08 95       	ret

000011d4 <_exit>:
    11d4:	f8 94       	cli

000011d6 <__stop_program>:
    11d6:	ff cf       	rjmp	.-2      	; 0x11d6 <__stop_program>
