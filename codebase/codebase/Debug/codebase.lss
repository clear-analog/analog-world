
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000886  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075b  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  000011d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  58:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  5c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  60:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  68:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  6c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  70:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <SPI_INIT2>:
	SPDR = data;                         // Load data into the SPI data register
	while (!(SPSR & (1 << SPIF))) {      // Wait for transmission complete
		// Do nothing
	}
	return SPDR;                         // Return received data
}
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	87 60       	ori	r24, 0x07	; 7
  90:	84 b9       	out	0x04, r24	; 4
  92:	84 b1       	in	r24, 0x04	; 4
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	84 b9       	out	0x04, r24	; 4
  98:	88 e5       	ldi	r24, 0x58	; 88
  9a:	8c bd       	out	0x2c, r24	; 44
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8d bd       	out	0x2d, r24	; 45
  a0:	08 95       	ret

000000a2 <SPI_transmit2>:
  a2:	8e bd       	out	0x2e, r24	; 46
  a4:	0d b4       	in	r0, 0x2d	; 45
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <SPI_transmit2+0x2>
  aa:	8e b5       	in	r24, 0x2e	; 46
  ac:	08 95       	ret

000000ae <SPI_select>:

// SPI Select/Deselect Slave Functions
void SPI_select(void) {
	PORTB &= ~(1 << PB3);                // Pull SS low to select the slave
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	08 95       	ret

000000b6 <SPI_deselect>:
}

void SPI_deselect(void) {
	PORTB |= (1 << PB3);                 // Pull SS high to deselect the slave
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	08 95       	ret

000000be <main>:
}

int main(void) {
	SPI_INIT2();                          // Initialize SPI
  be:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_INIT2>

	while (1) {
		SPI_select();                    // Select the SPI slave
  c2:	0e 94 57 00 	call	0xae	; 0xae <SPI_select>
		uint8_t received = SPI_transmit2(0x55); // Transmit a byte and receive data
  c6:	85 e5       	ldi	r24, 0x55	; 85
  c8:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_transmit2>
		SPI_deselect();                  // Deselect the SPI slave */
  cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <SPI_deselect>
  d0:	f8 cf       	rjmp	.-16     	; 0xc2 <main+0x4>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
