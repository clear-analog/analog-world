
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000012f0  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800108  00800108  0000138c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000530b  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017b7  00000000  00000000  0000697b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000310d  00000000  00000000  00008132  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  0000b240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002466  00000000  00000000  0000b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c30  00000000  00000000  0000dd62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  00010992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_11>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      4c:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__vector_19>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      74:	22 01       	movw	r4, r4
      76:	49 01       	movw	r8, r18
      78:	41 02       	muls	r20, r17
      7a:	49 01       	movw	r8, r18
      7c:	41 02       	muls	r20, r17
      7e:	95 01       	movw	r18, r10
      80:	b8 01       	movw	r22, r16
      82:	41 02       	muls	r20, r17
      84:	0f 02       	muls	r16, r31
      86:	1e 02       	muls	r17, r30

00000088 <ProductString>:
      88:	22 03 53 00 63 00 68 00 6c 00 6f 00 6e 00 67 00     ".S.c.h.l.o.n.g.
      98:	20 00 47 00 61 00 6e 00 67 00 20 00 4d 00 69 00      .G.a.n.g. .M.i.
      a8:	63 00 00 00                                         c...

000000ac <ManufacturerString>:
      ac:	20 03 53 00 63 00 68 00 6c 00 6f 00 6e 00 67 00      .S.c.h.l.o.n.g.
      bc:	20 00 4b 00 69 00 6e 00 67 00 64 00 6f 00 6d 00      .K.i.n.g.d.o.m.
	...

000000ce <LanguageString>:
      ce:	04 03 09 04                                         ....

000000d2 <ConfigurationDescriptor>:
      d2:	09 02 70 00 02 01 00 c0 c8 09 04 00 00 00 01 01     ..p.............
      e2:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
      f2:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
     102:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
     112:	00 00 07 24 01 02 01 01 00 17 24 02 01 01 02 10     ...$......$.....
     122:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
     132:	09 05 81 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

00000142 <DeviceDescriptor>:
     142:	12 01 10 01 00 00 00 08 d8 04 2d e5 02 00 01 02     ..........-.....
     152:	00 01                                               ..

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d2 e0       	ldi	r29, 0x02	; 2
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
     160:	11 e0       	ldi	r17, 0x01	; 1
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	e0 ef       	ldi	r30, 0xF0	; 240
     168:	f2 e1       	ldi	r31, 0x12	; 18
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
     16c:	05 90       	lpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a8 30       	cpi	r26, 0x08	; 8
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	a8 e0       	ldi	r26, 0x08	; 8
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a6 31       	cpi	r26, 0x16	; 22
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	0e 94 cc 04 	call	0x998	; 0x998 <main>
     18a:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     192:	29 2f       	mov	r18, r25
     194:	33 27       	eor	r19, r19
     196:	22 30       	cpi	r18, 0x02	; 2
     198:	31 05       	cpc	r19, r1
     19a:	59 f0       	breq	.+22     	; 0x1b2 <CALLBACK_USB_GetDescriptor+0x20>
     19c:	23 30       	cpi	r18, 0x03	; 3
     19e:	31 05       	cpc	r19, r1
     1a0:	69 f0       	breq	.+26     	; 0x1bc <CALLBACK_USB_GetDescriptor+0x2a>
     1a2:	21 30       	cpi	r18, 0x01	; 1
     1a4:	31 05       	cpc	r19, r1
     1a6:	e9 f4       	brne	.+58     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1a8:	82 e1       	ldi	r24, 0x12	; 18
     1aa:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1ac:	22 e4       	ldi	r18, 0x42	; 66
     1ae:	31 e0       	ldi	r19, 0x01	; 1
     1b0:	1c c0       	rjmp	.+56     	; 0x1ea <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1b2:	80 e7       	ldi	r24, 0x70	; 112
     1b4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1b6:	22 ed       	ldi	r18, 0xD2	; 210
     1b8:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1ba:	17 c0       	rjmp	.+46     	; 0x1ea <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     1bc:	99 27       	eor	r25, r25
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	91 05       	cpc	r25, r1
     1c2:	49 f0       	breq	.+18     	; 0x1d6 <CALLBACK_USB_GetDescriptor+0x44>
     1c4:	28 f0       	brcs	.+10     	; 0x1d0 <CALLBACK_USB_GetDescriptor+0x3e>
     1c6:	02 97       	sbiw	r24, 0x02	; 2
     1c8:	61 f4       	brne	.+24     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1ca:	e8 e8       	ldi	r30, 0x88	; 136
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	05 c0       	rjmp	.+10     	; 0x1da <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1d0:	ee ec       	ldi	r30, 0xCE	; 206
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1d6:	ec ea       	ldi	r30, 0xAC	; 172
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1da:	84 91       	lpm	r24, Z
     1dc:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1de:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1e0:	04 c0       	rjmp	.+8      	; 0x1ea <CALLBACK_USB_GetDescriptor+0x58>
                                    const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1ea:	fa 01       	movw	r30, r20
     1ec:	31 83       	std	Z+1, r19	; 0x01
     1ee:	20 83       	st	Z, r18
	return Size;
     1f0:	08 95       	ret

000001f2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	aa 97       	sbiw	r28, 0x2a	; 42
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	ee e0       	ldi	r30, 0x0E	; 14
     20a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     20c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     210:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	e6 31       	cpi	r30, 0x16	; 22
     216:	f2 07       	cpc	r31, r18
     218:	c9 f7       	brne	.-14     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     21a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     21e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
     222:	83 ff       	sbrs	r24, 3
     224:	2e c1       	rjmp	.+604    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     226:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     22a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <USB_ControlRequest+0x1>
     22e:	49 2f       	mov	r20, r25
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	4a 30       	cpi	r20, 0x0A	; 10
     234:	51 05       	cpc	r21, r1
     236:	08 f0       	brcs	.+2      	; 0x23a <__DATA_REGION_LENGTH__+0x3a>
     238:	24 c1       	rjmp	.+584    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     23a:	fa 01       	movw	r30, r20
     23c:	e6 5c       	subi	r30, 0xC6	; 198
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     244:	80 38       	cpi	r24, 0x80	; 128
     246:	21 f0       	breq	.+8      	; 0x250 <__DATA_REGION_LENGTH__+0x50>
     248:	82 38       	cpi	r24, 0x82	; 130
     24a:	09 f0       	breq	.+2      	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
     24c:	1a c1       	rjmp	.+564    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     24e:	08 c0       	rjmp	.+16     	; 0x260 <__DATA_REGION_LENGTH__+0x60>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     250:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     254:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <USB_Device_RemoteWakeupEnabled>
     258:	99 23       	and	r25, r25
     25a:	89 f0       	breq	.+34     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     25c:	82 60       	ori	r24, 0x02	; 2
     25e:	0f c0       	rjmp	.+30     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     260:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     264:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     266:	85 30       	cpi	r24, 0x05	; 5
     268:	08 f0       	brcs	.+2      	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
     26a:	0b c1       	rjmp	.+534    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     26c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     270:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     274:	85 fb       	bst	r24, 5
     276:	88 27       	eor	r24, r24
     278:	80 f9       	bld	r24, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     27a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     27e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     282:	97 7f       	andi	r25, 0xF7	; 247
     284:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     288:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     28c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     290:	d1 c0       	rjmp	.+418    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     292:	28 2f       	mov	r18, r24
     294:	2d 7f       	andi	r18, 0xFD	; 253
     296:	09 f0       	breq	.+2      	; 0x29a <__DATA_REGION_LENGTH__+0x9a>
     298:	f4 c0       	rjmp	.+488    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     29a:	88 23       	and	r24, r24
     29c:	19 f0       	breq	.+6      	; 0x2a4 <__DATA_REGION_LENGTH__+0xa4>
     29e:	82 30       	cpi	r24, 0x02	; 2
     2a0:	61 f0       	breq	.+24     	; 0x2ba <__DATA_REGION_LENGTH__+0xba>
     2a2:	ef c0       	rjmp	.+478    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     2a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <__DATA_REGION_LENGTH__+0xae>
     2ac:	ea c0       	rjmp	.+468    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     2ae:	93 30       	cpi	r25, 0x03	; 3
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <__DATA_REGION_LENGTH__+0xb4>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_Device_RemoteWakeupEnabled>
     2b8:	2e c0       	rjmp	.+92     	; 0x316 <__stack+0x17>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     2ba:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     2be:	81 11       	cpse	r24, r1
     2c0:	2a c0       	rjmp	.+84     	; 0x316 <__stack+0x17>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     2c2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     2c6:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	28 0f       	add	r18, r24
     2cc:	24 30       	cpi	r18, 0x04	; 4
     2ce:	08 f0       	brcs	.+2      	; 0x2d2 <__DATA_REGION_LENGTH__+0xd2>
     2d0:	d8 c0       	rjmp	.+432    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     2d6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     2da:	20 ff       	sbrs	r18, 0
     2dc:	1c c0       	rjmp	.+56     	; 0x316 <__stack+0x17>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     2de:	93 30       	cpi	r25, 0x03	; 3
     2e0:	21 f4       	brne	.+8      	; 0x2ea <__DATA_REGION_LENGTH__+0xea>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2e2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     2e6:	80 62       	ori	r24, 0x20	; 32
     2e8:	14 c0       	rjmp	.+40     	; 0x312 <__stack+0x13>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     2ea:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     2ee:	90 61       	ori	r25, 0x10	; 16
     2f0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	a9 01       	movw	r20, r18
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <__stack+0x1>
     2fc:	44 0f       	add	r20, r20
     2fe:	55 1f       	adc	r21, r21
     300:	8a 95       	dec	r24
     302:	e2 f7       	brpl	.-8      	; 0x2fc <__DATA_REGION_LENGTH__+0xfc>
     304:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
     308:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     30c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     310:	88 60       	ori	r24, 0x08	; 8
     312:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     316:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     31a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     31e:	87 7f       	andi	r24, 0xF7	; 247
     320:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     324:	0e 94 83 03 	call	0x706	; 0x706 <Endpoint_ClearStatusStage>
     328:	ac c0       	rjmp	.+344    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     32a:	81 11       	cpse	r24, r1
     32c:	aa c0       	rjmp	.+340    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     32e:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     332:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     334:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     338:	80 78       	andi	r24, 0x80	; 128
     33a:	81 2b       	or	r24, r17
     33c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     340:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     344:	87 7f       	andi	r24, 0xF7	; 247
     346:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     34a:	0e 94 83 03 	call	0x706	; 0x706 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     34e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
     352:	80 ff       	sbrs	r24, 0
     354:	fc cf       	rjmp	.-8      	; 0x34e <__stack+0x4f>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     356:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     35a:	80 68       	ori	r24, 0x80	; 128
     35c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     360:	11 11       	cpse	r17, r1
     362:	02 c0       	rjmp	.+4      	; 0x368 <__stack+0x69>
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	01 c0       	rjmp	.+2      	; 0x36a <__stack+0x6b>
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
     36e:	89 c0       	rjmp	.+274    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     370:	80 58       	subi	r24, 0x80	; 128
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	08 f0       	brcs	.+2      	; 0x378 <__stack+0x79>
     376:	85 c0       	rjmp	.+266    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     378:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     37c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     380:	8c 3d       	cpi	r24, 0xDC	; 220
     382:	53 e0       	ldi	r21, 0x03	; 3
     384:	95 07       	cpc	r25, r21
     386:	79 f5       	brne	.+94     	; 0x3e6 <__stack+0xe7>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     38c:	8a e2       	ldi	r24, 0x2A	; 42
     38e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     390:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     392:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     394:	de 01       	movw	r26, r28
     396:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     398:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     39a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     39c:	51 e2       	ldi	r21, 0x21	; 33
     39e:	e3 2f       	mov	r30, r19
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
     3a6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     3a8:	20 ff       	sbrs	r18, 0
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <__stack+0xb3>
					{
						SerialByte >>= 4;
     3ac:	e2 95       	swap	r30
     3ae:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     3b0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     3b2:	ef 70       	andi	r30, 0x0F	; 15
     3b4:	8e 2f       	mov	r24, r30
     3b6:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     3b8:	ea 30       	cpi	r30, 0x0A	; 10
     3ba:	10 f0       	brcs	.+4      	; 0x3c0 <__stack+0xc1>
     3bc:	c7 96       	adiw	r24, 0x37	; 55
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <__stack+0xc3>
     3c0:	c0 96       	adiw	r24, 0x30	; 48
     3c2:	8d 93       	st	X+, r24
     3c4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     3c6:	2f 5f       	subi	r18, 0xFF	; 255
     3c8:	24 31       	cpi	r18, 0x14	; 20
     3ca:	49 f7       	brne	.-46     	; 0x39e <__stack+0x9f>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3cc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     3d2:	87 7f       	andi	r24, 0xF7	; 247
     3d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     3d8:	6a e2       	ldi	r22, 0x2A	; 42
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Endpoint_Write_Control_Stream_LE>
     3e4:	16 c0       	rjmp	.+44     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     3e6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     3ea:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <USB_ControlRequest+0x5>
     3ee:	ae 01       	movw	r20, r28
     3f0:	4f 5f       	subi	r20, 0xFF	; 255
     3f2:	5f 4f       	sbci	r21, 0xFF	; 255
     3f4:	0e 94 c9 00 	call	0x192	; 0x192 <CALLBACK_USB_GetDescriptor>
     3f8:	bc 01       	movw	r22, r24
     3fa:	89 2b       	or	r24, r25
     3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	41 c0       	rjmp	.+130    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     400:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     404:	97 7f       	andi	r25, 0xF7	; 247
     406:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Endpoint_Write_Control_PStream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     416:	8b 77       	andi	r24, 0x7B	; 123
     418:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     41c:	32 c0       	rjmp	.+100    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     41e:	80 38       	cpi	r24, 0x80	; 128
     420:	81 f5       	brne	.+96     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     422:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     426:	87 7f       	andi	r24, 0xF7	; 247
     428:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     42c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     430:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     434:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     438:	8e 77       	andi	r24, 0x7E	; 126
     43a:	72 cf       	rjmp	.-284    	; 0x320 <__stack+0x21>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     43c:	81 11       	cpse	r24, r1
     43e:	21 c0       	rjmp	.+66     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     440:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     444:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     448:	99 27       	eor	r25, r25
     44a:	02 97       	sbiw	r24, 0x02	; 2
     44c:	d4 f4       	brge	.+52     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     44e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     452:	87 7f       	andi	r24, 0xF7	; 247
     454:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     458:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     45c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     460:	0e 94 83 03 	call	0x706	; 0x706 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     464:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
     468:	81 11       	cpse	r24, r1
     46a:	06 c0       	rjmp	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     46c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     470:	87 fd       	sbrc	r24, 7
     472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	01 c0       	rjmp	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	84 e0       	ldi	r24, 0x04	; 4
     47a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     47e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     482:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     486:	83 ff       	sbrs	r24, 3
     488:	0a c0       	rjmp	.+20     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     48a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     48e:	87 7f       	andi	r24, 0xF7	; 247
     490:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     494:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     498:	80 62       	ori	r24, 0x20	; 32
     49a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     49e:	aa 96       	adiw	r28, 0x2a	; 42
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	08 95       	ret

000004b2 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4b2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_ControlRequest+0x6>
     4b6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <USB_ControlRequest+0x7>
     4ba:	26 17       	cp	r18, r22
     4bc:	37 07       	cpc	r19, r23
     4be:	48 f0       	brcs	.+18     	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x20>
     4c0:	61 15       	cp	r22, r1
     4c2:	71 05       	cpc	r23, r1
     4c4:	39 f4       	brne	.+14     	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0x22>
     4c6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4ca:	2e 77       	andi	r18, 0x7E	; 126
     4cc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0x22>
     4d2:	b9 01       	movw	r22, r18
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	61 15       	cp	r22, r1
     4da:	71 05       	cpc	r23, r1
     4dc:	61 f1       	breq	.+88     	; 0x536 <Endpoint_Write_Control_Stream_LE+0x84>
     4de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     4e2:	88 23       	and	r24, r24
     4e4:	d9 f1       	breq	.+118    	; 0x55c <Endpoint_Write_Control_Stream_LE+0xaa>
     4e6:	85 30       	cpi	r24, 0x05	; 5
     4e8:	d9 f1       	breq	.+118    	; 0x560 <Endpoint_Write_Control_Stream_LE+0xae>
     4ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4ee:	83 fd       	sbrc	r24, 3
     4f0:	39 c0       	rjmp	.+114    	; 0x564 <Endpoint_Write_Control_Stream_LE+0xb2>
     4f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4f6:	82 fd       	sbrc	r24, 2
     4f8:	2b c0       	rjmp	.+86     	; 0x550 <Endpoint_Write_Control_Stream_LE+0x9e>
     4fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4fe:	80 ff       	sbrs	r24, 0
     500:	eb cf       	rjmp	.-42     	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0x26>
     502:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	61 15       	cp	r22, r1
     50a:	71 05       	cpc	r23, r1
     50c:	51 f0       	breq	.+20     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x70>
     50e:	88 30       	cpi	r24, 0x08	; 8
     510:	91 05       	cpc	r25, r1
     512:	38 f4       	brcc	.+14     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x70>
     514:	21 91       	ld	r18, Z+
     516:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     51a:	61 50       	subi	r22, 0x01	; 1
     51c:	71 09       	sbc	r23, r1
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	f3 cf       	rjmp	.-26     	; 0x508 <Endpoint_Write_Control_Stream_LE+0x56>
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	08 97       	sbiw	r24, 0x08	; 8
     526:	09 f0       	breq	.+2      	; 0x52a <Endpoint_Write_Control_Stream_LE+0x78>
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     52e:	8e 77       	andi	r24, 0x7E	; 126
     530:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     534:	d1 cf       	rjmp	.-94     	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0x26>
     536:	21 11       	cpse	r18, r1
     538:	d2 cf       	rjmp	.-92     	; 0x4de <Endpoint_Write_Control_Stream_LE+0x2c>
     53a:	0a c0       	rjmp	.+20     	; 0x550 <Endpoint_Write_Control_Stream_LE+0x9e>
     53c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     540:	88 23       	and	r24, r24
     542:	61 f0       	breq	.+24     	; 0x55c <Endpoint_Write_Control_Stream_LE+0xaa>
     544:	85 30       	cpi	r24, 0x05	; 5
     546:	61 f0       	breq	.+24     	; 0x560 <Endpoint_Write_Control_Stream_LE+0xae>
     548:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     54c:	83 fd       	sbrc	r24, 3
     54e:	0a c0       	rjmp	.+20     	; 0x564 <Endpoint_Write_Control_Stream_LE+0xb2>
     550:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     554:	82 ff       	sbrs	r24, 2
     556:	f2 cf       	rjmp	.-28     	; 0x53c <Endpoint_Write_Control_Stream_LE+0x8a>
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	08 95       	ret
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	08 95       	ret
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	08 95       	ret
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	08 95       	ret

00000568 <Endpoint_Read_Control_Stream_LE>:
     568:	61 15       	cp	r22, r1
     56a:	71 05       	cpc	r23, r1
     56c:	29 f4       	brne	.+10     	; 0x578 <Endpoint_Read_Control_Stream_LE+0x10>
     56e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     572:	2b 77       	andi	r18, 0x7B	; 123
     574:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     578:	fc 01       	movw	r30, r24
     57a:	61 15       	cp	r22, r1
     57c:	71 05       	cpc	r23, r1
     57e:	21 f1       	breq	.+72     	; 0x5c8 <Endpoint_Read_Control_Stream_LE+0x60>
     580:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     584:	88 23       	and	r24, r24
     586:	41 f1       	breq	.+80     	; 0x5d8 <Endpoint_Read_Control_Stream_LE+0x70>
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	41 f1       	breq	.+80     	; 0x5dc <Endpoint_Read_Control_Stream_LE+0x74>
     58c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     590:	83 fd       	sbrc	r24, 3
     592:	20 c0       	rjmp	.+64     	; 0x5d4 <Endpoint_Read_Control_Stream_LE+0x6c>
     594:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     598:	82 ff       	sbrs	r24, 2
     59a:	ef cf       	rjmp	.-34     	; 0x57a <Endpoint_Read_Control_Stream_LE+0x12>
     59c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     5a0:	88 23       	and	r24, r24
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x48>
     5a4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     5a8:	81 93       	st	Z+, r24
     5aa:	61 50       	subi	r22, 0x01	; 1
     5ac:	71 09       	sbc	r23, r1
     5ae:	b1 f7       	brne	.-20     	; 0x59c <Endpoint_Read_Control_Stream_LE+0x34>
     5b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5b4:	8b 77       	andi	r24, 0x7B	; 123
     5b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5ba:	df cf       	rjmp	.-66     	; 0x57a <Endpoint_Read_Control_Stream_LE+0x12>
     5bc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     5c0:	88 23       	and	r24, r24
     5c2:	51 f0       	breq	.+20     	; 0x5d8 <Endpoint_Read_Control_Stream_LE+0x70>
     5c4:	85 30       	cpi	r24, 0x05	; 5
     5c6:	51 f0       	breq	.+20     	; 0x5dc <Endpoint_Read_Control_Stream_LE+0x74>
     5c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5cc:	80 ff       	sbrs	r24, 0
     5ce:	f6 cf       	rjmp	.-20     	; 0x5bc <Endpoint_Read_Control_Stream_LE+0x54>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	08 95       	ret
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	08 95       	ret
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	08 95       	ret
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	08 95       	ret

000005e0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5e0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_ControlRequest+0x6>
     5e4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <USB_ControlRequest+0x7>
     5e8:	26 17       	cp	r18, r22
     5ea:	37 07       	cpc	r19, r23
     5ec:	48 f0       	brcs	.+18     	; 0x600 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5ee:	61 15       	cp	r22, r1
     5f0:	71 05       	cpc	r23, r1
     5f2:	39 f4       	brne	.+14     	; 0x602 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5f8:	2e 77       	andi	r18, 0x7E	; 126
     5fa:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <Endpoint_Write_Control_PStream_LE+0x22>
     600:	b9 01       	movw	r22, r18
     602:	fc 01       	movw	r30, r24
     604:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     606:	61 15       	cp	r22, r1
     608:	71 05       	cpc	r23, r1
     60a:	79 f1       	breq	.+94     	; 0x66a <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     60c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     610:	88 23       	and	r24, r24
     612:	09 f4       	brne	.+2      	; 0x616 <Endpoint_Write_Control_PStream_LE+0x36>
     614:	3d c0       	rjmp	.+122    	; 0x690 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     616:	85 30       	cpi	r24, 0x05	; 5
     618:	09 f4       	brne	.+2      	; 0x61c <Endpoint_Write_Control_PStream_LE+0x3c>
     61a:	3c c0       	rjmp	.+120    	; 0x694 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     61c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     620:	83 fd       	sbrc	r24, 3
     622:	3a c0       	rjmp	.+116    	; 0x698 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     624:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     628:	82 fd       	sbrc	r24, 2
     62a:	2c c0       	rjmp	.+88     	; 0x684 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     62c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
     630:	80 ff       	sbrs	r24, 0
     632:	e9 cf       	rjmp	.-46     	; 0x606 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     634:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     638:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     63a:	61 15       	cp	r22, r1
     63c:	71 05       	cpc	r23, r1
     63e:	59 f0       	breq	.+22     	; 0x656 <Endpoint_Write_Control_PStream_LE+0x76>
     640:	88 30       	cpi	r24, 0x08	; 8
     642:	91 05       	cpc	r25, r1
     644:	40 f4       	brcc	.+16     	; 0x656 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     646:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     648:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     64c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     64e:	61 50       	subi	r22, 0x01	; 1
     650:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	f2 cf       	rjmp	.-28     	; 0x63a <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	08 97       	sbiw	r24, 0x08	; 8
     65a:	09 f0       	breq	.+2      	; 0x65e <Endpoint_Write_Control_PStream_LE+0x7e>
     65c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     65e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     662:	8e 77       	andi	r24, 0x7E	; 126
     664:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     668:	ce cf       	rjmp	.-100    	; 0x606 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     66a:	21 11       	cpse	r18, r1
     66c:	cf cf       	rjmp	.-98     	; 0x60c <Endpoint_Write_Control_PStream_LE+0x2c>
     66e:	0a c0       	rjmp	.+20     	; 0x684 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     670:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     674:	88 23       	and	r24, r24
     676:	61 f0       	breq	.+24     	; 0x690 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     678:	85 30       	cpi	r24, 0x05	; 5
     67a:	61 f0       	breq	.+24     	; 0x694 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     67c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     680:	83 fd       	sbrc	r24, 3
     682:	0a c0       	rjmp	.+20     	; 0x698 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     684:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     688:	82 ff       	sbrs	r24, 2
     68a:	f2 cf       	rjmp	.-28     	; 0x670 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     698:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     69a:	08 95       	ret

0000069c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     69c:	98 2f       	mov	r25, r24
     69e:	95 30       	cpi	r25, 0x05	; 5
     6a0:	68 f5       	brcc	.+90     	; 0x6fc <Endpoint_ConfigureEndpoint_Prv+0x60>
     6a2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     6a6:	98 17       	cp	r25, r24
     6a8:	39 f0       	breq	.+14     	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     6aa:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     6ae:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6b2:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <Endpoint_ConfigureEndpoint_Prv+0x22>
     6b8:	24 2f       	mov	r18, r20
     6ba:	76 2f       	mov	r23, r22
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	21 fd       	sbrc	r18, 1
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     6c2:	9f 5f       	subi	r25, 0xFF	; 255
     6c4:	ec cf       	rjmp	.-40     	; 0x69e <Endpoint_ConfigureEndpoint_Prv+0x2>
     6c6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6ca:	3e 7f       	andi	r19, 0xFE	; 254
     6cc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6d0:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6d4:	3d 7f       	andi	r19, 0xFD	; 253
     6d6:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6da:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6de:	31 60       	ori	r19, 0x01	; 1
     6e0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6e4:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     6e8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6ec:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     6f0:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     6f4:	27 fd       	sbrc	r18, 7
     6f6:	e5 cf       	rjmp	.-54     	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv+0x26>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	08 95       	ret
     6fc:	8f 70       	andi	r24, 0x0F	; 15
     6fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	08 95       	ret

00000706 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     706:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     70a:	87 ff       	sbrs	r24, 7
     70c:	11 c0       	rjmp	.+34     	; 0x730 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     70e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     712:	82 fd       	sbrc	r24, 2
     714:	05 c0       	rjmp	.+10     	; 0x720 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     716:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     71a:	81 11       	cpse	r24, r1
     71c:	f8 cf       	rjmp	.-16     	; 0x70e <Endpoint_ClearStatusStage+0x8>
     71e:	11 c0       	rjmp	.+34     	; 0x742 <Endpoint_ClearStatusStage+0x3c>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     720:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     724:	8b 77       	andi	r24, 0x7B	; 123
     726:	0b c0       	rjmp	.+22     	; 0x73e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     728:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     72c:	88 23       	and	r24, r24
     72e:	49 f0       	breq	.+18     	; 0x742 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     730:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     734:	80 ff       	sbrs	r24, 0
     736:	f8 cf       	rjmp	.-16     	; 0x728 <Endpoint_ClearStatusStage+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     738:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     73c:	8e 77       	andi	r24, 0x7E	; 126
     73e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     742:	08 95       	ret

00000744 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     744:	08 95       	ret

00000746 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     746:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     74a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <USB_INT_ClearAllInterrupts>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     74e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     752:	8f 77       	andi	r24, 0x7F	; 127
     754:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
     758:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     762:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     766:	8f 7d       	andi	r24, 0xDF	; 223
     768:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     774:	09 b4       	in	r0, 0x29	; 41
     776:	00 fe       	sbrs	r0, 0
     778:	fd cf       	rjmp	.-6      	; 0x774 <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     77a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     77e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     782:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     786:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     78a:	42 e0       	ldi	r20, 0x02	; 2
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 4e 03 	call	0x69c	; 0x69c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     794:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     798:	8e 7f       	andi	r24, 0xFE	; 254
     79a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     79e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     7a2:	81 60       	ori	r24, 0x01	; 1
     7a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     7ac:	88 60       	ori	r24, 0x08	; 8
     7ae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7b2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     7b6:	8e 7f       	andi	r24, 0xFE	; 254
     7b8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     7bc:	08 95       	ret

000007be <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     7be:	e3 e6       	ldi	r30, 0x63	; 99
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	8e 7f       	andi	r24, 0xFE	; 254
     7c6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_IsInitialized>

	USB_ResetInterface();
     7ce:	0c 94 a3 03 	jmp	0x746	; 0x746 <USB_ResetInterface>

000007d2 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7d2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     7d6:	08 95       	ret

000007d8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7d8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     7dc:	08 95       	ret

000007de <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	2f 93       	push	r18
     7ea:	3f 93       	push	r19
     7ec:	4f 93       	push	r20
     7ee:	5f 93       	push	r21
     7f0:	6f 93       	push	r22
     7f2:	7f 93       	push	r23
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	af 93       	push	r26
     7fa:	bf 93       	push	r27
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     800:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     804:	82 ff       	sbrs	r24, 2
     806:	0b c0       	rjmp	.+22     	; 0x81e <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     808:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     80c:	82 ff       	sbrs	r24, 2
     80e:	07 c0       	rjmp	.+14     	; 0x81e <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     810:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     814:	8b 7f       	andi	r24, 0xFB	; 251
     816:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     81a:	0e 94 a2 03 	call	0x744	; 0x744 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     81e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     822:	80 ff       	sbrs	r24, 0
     824:	18 c0       	rjmp	.+48     	; 0x856 <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     826:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     82a:	80 ff       	sbrs	r24, 0
     82c:	14 c0       	rjmp	.+40     	; 0x856 <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     82e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     832:	8e 7f       	andi	r24, 0xFE	; 254
     834:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     838:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     83c:	80 61       	ori	r24, 0x10	; 16
     83e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     842:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     846:	80 62       	ori	r24, 0x20	; 32
     848:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     84c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     84e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     852:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     856:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     85a:	84 ff       	sbrs	r24, 4
     85c:	30 c0       	rjmp	.+96     	; 0x8be <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     85e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     862:	84 ff       	sbrs	r24, 4
     864:	2c c0       	rjmp	.+88     	; 0x8be <__vector_11+0xe0>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     86a:	86 e0       	ldi	r24, 0x06	; 6
     86c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     86e:	09 b4       	in	r0, 0x29	; 41
     870:	00 fe       	sbrs	r0, 0
     872:	fd cf       	rjmp	.-6      	; 0x86e <__vector_11+0x90>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     874:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     878:	8f 7d       	andi	r24, 0xDF	; 223
     87a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     87e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     882:	8f 7e       	andi	r24, 0xEF	; 239
     884:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     888:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     88c:	8f 7e       	andi	r24, 0xEF	; 239
     88e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     892:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     896:	81 60       	ori	r24, 0x01	; 1
     898:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     89c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
     8a0:	88 23       	and	r24, r24
     8a2:	11 f0       	breq	.+4      	; 0x8a8 <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
     8a4:	84 e0       	ldi	r24, 0x04	; 4
     8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <__vector_11+0xd8>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8a8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     8ac:	87 fd       	sbrc	r24, 7
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__vector_11+0xd6>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__vector_11+0xd8>
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     8ba:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     8be:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8c2:	83 ff       	sbrs	r24, 3
     8c4:	24 c0       	rjmp	.+72     	; 0x90e <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     8c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8ca:	83 ff       	sbrs	r24, 3
     8cc:	20 c0       	rjmp	.+64     	; 0x90e <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     8ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     8d2:	87 7f       	andi	r24, 0xF7	; 247
     8d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     8de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     8e6:	8e 7f       	andi	r24, 0xFE	; 254
     8e8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8f0:	8e 7f       	andi	r24, 0xFE	; 254
     8f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8fa:	80 61       	ori	r24, 0x10	; 16
     8fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     900:	42 e0       	ldi	r20, 0x02	; 2
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 4e 03 	call	0x69c	; 0x69c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     90a:	0e 94 a2 03 	call	0x744	; 0x744 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     930:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     932:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     936:	88 23       	and	r24, r24
     938:	a1 f0       	breq	.+40     	; 0x962 <USB_USBTask+0x32>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     93a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     93e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     940:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     944:	89 2f       	mov	r24, r25
     946:	81 70       	andi	r24, 0x01	; 1
     948:	90 fd       	sbrc	r25, 0
     94a:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     94c:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     94e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     952:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     956:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     958:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     95c:	cf 70       	andi	r28, 0x0F	; 15
     95e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     966:	84 b7       	in	r24, 0x34	; 52
     968:	87 7f       	andi	r24, 0xF7	; 247
     96a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	a8 95       	wdr
     972:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     976:	88 61       	ori	r24, 0x18	; 24
     978:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     97c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     980:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     98e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     992:	0f be       	out	0x3f, r0	; 63
	/* Hardware Initialization */
	//LEDs_Init();
	//Buttons_Init();
	//ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	//ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     994:	0c 94 df 03 	jmp	0x7be	; 0x7be <USB_Init>

00000998 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     998:	0e 94 b3 04 	call	0x966	; 0x966 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     99c:	78 94       	sei
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     99e:	0e 94 98 04 	call	0x930	; 0x930 <USB_USBTask>
     9a2:	fd cf       	rjmp	.-6      	; 0x99e <main+0x6>

000009a4 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs, and
 *  configures the sample update and PWM timers.
 */
void EVENT_USB_Device_Connect(void)
{
     9a4:	cf 93       	push	r28
	/* Indicate USB enumerating */
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     9a6:	c2 e0       	ldi	r28, 0x02	; 2
     9a8:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     9ac:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
     9b0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     9b4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     9b8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <CurrentAudioSampleFrequency+0x3>
     9bc:	60 e8       	ldi	r22, 0x80	; 128
     9be:	74 e8       	ldi	r23, 0x84	; 132
     9c0:	8e e1       	ldi	r24, 0x1E	; 30
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__udivmodsi4>
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	27 bd       	out	0x27, r18	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     9cc:	c4 bd       	out	0x24, r28	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     9ce:	c5 bd       	out	0x25, r28	; 37
}
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the sample reload timer */
	TCCR0B = 0;
     9d4:	15 bc       	out	0x25, r1	; 37

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
     9d6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     9da:	08 95       	ret

000009dc <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9dc:	46 e5       	ldi	r20, 0x56	; 86
     9de:	61 e4       	ldi	r22, 0x41	; 65
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	0c 94 4e 03 	jmp	0x69c	; 0x69c <Endpoint_ConfigureEndpoint_Prv>

000009e6 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <EVENT_USB_Device_ControlRequest+0x6>
     9ec:	1f 92       	push	r1
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
     9f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x1>
     9f6:	8b 30       	cpi	r24, 0x0B	; 11
     9f8:	51 f0       	breq	.+20     	; 0xa0e <EVENT_USB_Device_ControlRequest+0x28>
     9fa:	18 f4       	brcc	.+6      	; 0xa02 <EVENT_USB_Device_ControlRequest+0x1c>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	61 f1       	breq	.+88     	; 0xa58 <EVENT_USB_Device_ControlRequest+0x72>
     a00:	8f c0       	rjmp	.+286    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
     a02:	81 38       	cpi	r24, 0x81	; 129
     a04:	09 f4       	brne	.+2      	; 0xa08 <EVENT_USB_Device_ControlRequest+0x22>
     a06:	67 c0       	rjmp	.+206    	; 0xad6 <EVENT_USB_Device_ControlRequest+0xf0>
     a08:	8f 3f       	cpi	r24, 0xFF	; 255
     a0a:	c1 f0       	breq	.+48     	; 0xa3c <EVENT_USB_Device_ControlRequest+0x56>
     a0c:	89 c0       	rjmp	.+274    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
     a0e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	09 f0       	breq	.+2      	; 0xa18 <EVENT_USB_Device_ControlRequest+0x32>
     a16:	84 c0       	rjmp	.+264    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a1c:	87 7f       	andi	r24, 0xF7	; 247
     a1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a22:	0e 94 83 03 	call	0x706	; 0x706 <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     a2c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     a30:	23 2b       	or	r18, r19
     a32:	09 f4       	brne	.+2      	; 0xa36 <EVENT_USB_Device_ControlRequest+0x50>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     a3a:	72 c0       	rjmp	.+228    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>

			break;
		case AUDIO_REQ_GetStatus:
			/* Get Status request can be directed at either the interface or endpoint, neither is currently used
			 * according to the latest USB Audio 1.0 standard, but must be ACKed with no data when requested */
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
     a3c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     a40:	81 52       	subi	r24, 0x21	; 33
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	08 f0       	brcs	.+2      	; 0xa48 <EVENT_USB_Device_ControlRequest+0x62>
     a46:	6c c0       	rjmp	.+216    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
     a48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a52:	0e 94 83 03 	call	0x706	; 0x706 <Endpoint_ClearStatusStage>
     a56:	64 c0       	rjmp	.+200    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
			}

			break;
		case AUDIO_REQ_SetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
     a58:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     a5c:	82 32       	cpi	r24, 0x22	; 34
     a5e:	09 f0       	breq	.+2      	; 0xa62 <EVENT_USB_Device_ControlRequest+0x7c>
     a60:	5f c0       	rjmp	.+190    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
				/* Extract out the relevant request information to get the target Endpoint address and control being set */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);

				/* Only handle SET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
     a62:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     a66:	81 38       	cpi	r24, 0x81	; 129
     a68:	09 f0       	breq	.+2      	; 0xa6c <EVENT_USB_Device_ControlRequest+0x86>
     a6a:	5a c0       	rjmp	.+180    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
     a6c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	09 f0       	breq	.+2      	; 0xa76 <EVENT_USB_Device_ControlRequest+0x90>
     a74:	55 c0       	rjmp	.+170    	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
     a76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a7a:	87 7f       	andi	r24, 0xF7	; 247
     a7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				{
					uint8_t SampleRate[3];

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(SampleRate, sizeof(SampleRate));
     a80:	63 e0       	ldi	r22, 0x03	; 3
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 b4 02 	call	0x568	; 0x568 <Endpoint_Read_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a90:	8e 77       	andi	r24, 0x7E	; 126
     a92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
					Endpoint_ClearIN();

					/* Set the new sampling frequency to the value given by the host */
					CurrentAudioSampleFrequency = (((uint32_t)SampleRate[2] << 16) | ((uint32_t)SampleRate[1] << 8) | (uint32_t)SampleRate[0]);
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	2a 81       	ldd	r18, Y+2	; 0x02
     a9a:	42 2f       	mov	r20, r18
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	76 2f       	mov	r23, r22
     aa4:	65 2f       	mov	r22, r21
     aa6:	54 2f       	mov	r21, r20
     aa8:	44 27       	eor	r20, r20
     aaa:	68 2b       	or	r22, r24
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	9a 01       	movw	r18, r20
     ab0:	ab 01       	movw	r20, r22
     ab2:	28 2b       	or	r18, r24
     ab4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <CurrentAudioSampleFrequency>
     ab8:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     abc:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     ac0:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <CurrentAudioSampleFrequency+0x3>

					/* Adjust sample reload timer to the new frequency */
					OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     ac4:	60 e8       	ldi	r22, 0x80	; 128
     ac6:	74 e8       	ldi	r23, 0x84	; 132
     ac8:	8e e1       	ldi	r24, 0x1E	; 30
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__udivmodsi4>
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	27 bd       	out	0x27, r18	; 39
     ad4:	25 c0       	rjmp	.+74     	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
				}
			}

			break;
		case AUDIO_REQ_GetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     ad6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     ada:	82 3a       	cpi	r24, 0xA2	; 162
     adc:	09 f5       	brne	.+66     	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
				/* Extract out the relevant request information to get the target Endpoint address and control being retrieved */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);

				/* Only handle GET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
     ade:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     ae2:	81 38       	cpi	r24, 0x81	; 129
     ae4:	e9 f4       	brne	.+58     	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
     ae6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	c9 f4       	brne	.+50     	; 0xb20 <EVENT_USB_Device_ControlRequest+0x13a>
				{
					uint8_t SampleRate[3];

					/* Convert the sampling rate value into the 24-bit format the host expects for the property */
					SampleRate[2] = (CurrentAudioSampleFrequency >> 16);
     aee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
     af2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     af6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     afa:	2b 83       	std	Y+3, r18	; 0x03
					SampleRate[1] = (CurrentAudioSampleFrequency >> 8);
     afc:	9a 83       	std	Y+2, r25	; 0x02
					SampleRate[0] = (CurrentAudioSampleFrequency &  0xFF);
     afe:	89 83       	std	Y+1, r24	; 0x01
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b04:	87 7f       	andi	r24, 0xF7	; 247
     b06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(SampleRate, sizeof(SampleRate));
     b0a:	63 e0       	ldi	r22, 0x03	; 3
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Endpoint_Write_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b1a:	8b 77       	andi	r24, 0x7B	; 123
     b1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				}
			}

			break;
	}
}
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <__vector_19>:

/** ISR to handle the reloading of the data endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	cf 93       	push	r28
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b50:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     b54:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b56:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b5a:	89 2f       	mov	r24, r25
     b5c:	81 70       	andi	r24, 0x01	; 1
     b5e:	90 fd       	sbrc	r25, 0
     b60:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b62:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPADDR);

	/* Check if the current endpoint can be written to and that the audio interface is enabled */
	if (Endpoint_IsINReady() && StreamingAudioInterfaceSelected)
     b6e:	80 ff       	sbrs	r24, 0
     b70:	14 c0       	rjmp	.+40     	; 0xb9a <__vector_19+0x6e>
     b72:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     b76:	88 23       	and	r24, r24
     b78:	81 f0       	breq	.+32     	; 0xb9a <__vector_19+0x6e>
	{
		int16_t AudioSample;

		/* Generate random sample between -32768 and 32767 */
		AudioSample = (rand() % 65536) - 32768;
     b7a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <rand>
     b7e:	90 58       	subi	r25, 0x80	; 128
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b80:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     b84:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *          on its direction.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		/* Write the sample to the buffer */
		Endpoint_Write_16_LE(AudioSample);

		/* Check to see if the bank is now full */
		if (!(Endpoint_IsReadWriteAllowed()))
     b8c:	85 fd       	sbrc	r24, 5
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <__vector_19+0x6e>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b94:	8e 77       	andi	r24, 0x7E	; 126
     b96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b9a:	cf 70       	andi	r28, 0x0F	; 15
     b9c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			Endpoint_ClearIN();
		}
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
     ba0:	ff 91       	pop	r31
     ba2:	ef 91       	pop	r30
     ba4:	cf 91       	pop	r28
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__udivmodsi4>:
     bc4:	a1 e2       	ldi	r26, 0x21	; 33
     bc6:	1a 2e       	mov	r1, r26
     bc8:	aa 1b       	sub	r26, r26
     bca:	bb 1b       	sub	r27, r27
     bcc:	fd 01       	movw	r30, r26
     bce:	0d c0       	rjmp	.+26     	; 0xbea <__udivmodsi4_ep>

00000bd0 <__udivmodsi4_loop>:
     bd0:	aa 1f       	adc	r26, r26
     bd2:	bb 1f       	adc	r27, r27
     bd4:	ee 1f       	adc	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	a2 17       	cp	r26, r18
     bda:	b3 07       	cpc	r27, r19
     bdc:	e4 07       	cpc	r30, r20
     bde:	f5 07       	cpc	r31, r21
     be0:	20 f0       	brcs	.+8      	; 0xbea <__udivmodsi4_ep>
     be2:	a2 1b       	sub	r26, r18
     be4:	b3 0b       	sbc	r27, r19
     be6:	e4 0b       	sbc	r30, r20
     be8:	f5 0b       	sbc	r31, r21

00000bea <__udivmodsi4_ep>:
     bea:	66 1f       	adc	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	88 1f       	adc	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	1a 94       	dec	r1
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <__udivmodsi4_loop>
     bf6:	60 95       	com	r22
     bf8:	70 95       	com	r23
     bfa:	80 95       	com	r24
     bfc:	90 95       	com	r25
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	bd 01       	movw	r22, r26
     c04:	cf 01       	movw	r24, r30
     c06:	08 95       	ret

00000c08 <__tablejump2__>:
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	05 90       	lpm	r0, Z+
     c0e:	f4 91       	lpm	r31, Z
     c10:	e0 2d       	mov	r30, r0
     c12:	09 94       	ijmp

00000c14 <do_rand>:
     c14:	8f 92       	push	r8
     c16:	9f 92       	push	r9
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
     c2a:	68 81       	ld	r22, Y
     c2c:	79 81       	ldd	r23, Y+1	; 0x01
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	61 15       	cp	r22, r1
     c34:	71 05       	cpc	r23, r1
     c36:	81 05       	cpc	r24, r1
     c38:	91 05       	cpc	r25, r1
     c3a:	21 f4       	brne	.+8      	; 0xc44 <do_rand+0x30>
     c3c:	64 e2       	ldi	r22, 0x24	; 36
     c3e:	79 ed       	ldi	r23, 0xD9	; 217
     c40:	8b e5       	ldi	r24, 0x5B	; 91
     c42:	97 e0       	ldi	r25, 0x07	; 7
     c44:	2d e1       	ldi	r18, 0x1D	; 29
     c46:	33 ef       	ldi	r19, 0xF3	; 243
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodsi4>
     c50:	49 01       	movw	r8, r18
     c52:	5a 01       	movw	r10, r20
     c54:	27 ea       	ldi	r18, 0xA7	; 167
     c56:	31 e4       	ldi	r19, 0x41	; 65
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	0e 94 07 09 	call	0x120e	; 0x120e <__mulsi3>
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
     c64:	2c ee       	ldi	r18, 0xEC	; 236
     c66:	34 ef       	ldi	r19, 0xF4	; 244
     c68:	4f ef       	ldi	r20, 0xFF	; 255
     c6a:	5f ef       	ldi	r21, 0xFF	; 255
     c6c:	c5 01       	movw	r24, r10
     c6e:	b4 01       	movw	r22, r8
     c70:	0e 94 07 09 	call	0x120e	; 0x120e <__mulsi3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	8c 0d       	add	r24, r12
     c7a:	9d 1d       	adc	r25, r13
     c7c:	ae 1d       	adc	r26, r14
     c7e:	bf 1d       	adc	r27, r15
     c80:	b7 ff       	sbrs	r27, 7
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <do_rand+0x76>
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	a1 09       	sbc	r26, r1
     c88:	b0 48       	sbci	r27, 0x80	; 128
     c8a:	88 83       	st	Y, r24
     c8c:	99 83       	std	Y+1, r25	; 0x01
     c8e:	aa 83       	std	Y+2, r26	; 0x02
     c90:	bb 83       	std	Y+3, r27	; 0x03
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	08 95       	ret

00000caa <rand_r>:
     caa:	0e 94 0a 06 	call	0xc14	; 0xc14 <do_rand>
     cae:	08 95       	ret

00000cb0 <rand>:
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 0a 06 	call	0xc14	; 0xc14 <do_rand>
     cb8:	08 95       	ret

00000cba <srand>:
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     cc2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cc6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     cca:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     cce:	08 95       	ret

00000cd0 <vfprintf>:
     cd0:	ab e0       	ldi	r26, 0x0B	; 11
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e6       	ldi	r30, 0x6E	; 110
     cd6:	f6 e0       	ldi	r31, 0x06	; 6
     cd8:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__prologue_saves__>
     cdc:	6c 01       	movw	r12, r24
     cde:	7b 01       	movw	r14, r22
     ce0:	8a 01       	movw	r16, r20
     ce2:	fc 01       	movw	r30, r24
     ce4:	17 82       	std	Z+7, r1	; 0x07
     ce6:	16 82       	std	Z+6, r1	; 0x06
     ce8:	83 81       	ldd	r24, Z+3	; 0x03
     cea:	81 ff       	sbrs	r24, 1
     cec:	cf c1       	rjmp	.+926    	; 0x108c <vfprintf+0x3bc>
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	3c 01       	movw	r6, r24
     cf4:	f6 01       	movw	r30, r12
     cf6:	93 81       	ldd	r25, Z+3	; 0x03
     cf8:	f7 01       	movw	r30, r14
     cfa:	93 fd       	sbrc	r25, 3
     cfc:	85 91       	lpm	r24, Z+
     cfe:	93 ff       	sbrs	r25, 3
     d00:	81 91       	ld	r24, Z+
     d02:	7f 01       	movw	r14, r30
     d04:	88 23       	and	r24, r24
     d06:	09 f4       	brne	.+2      	; 0xd0a <vfprintf+0x3a>
     d08:	bd c1       	rjmp	.+890    	; 0x1084 <vfprintf+0x3b4>
     d0a:	85 32       	cpi	r24, 0x25	; 37
     d0c:	39 f4       	brne	.+14     	; 0xd1c <vfprintf+0x4c>
     d0e:	93 fd       	sbrc	r25, 3
     d10:	85 91       	lpm	r24, Z+
     d12:	93 ff       	sbrs	r25, 3
     d14:	81 91       	ld	r24, Z+
     d16:	7f 01       	movw	r14, r30
     d18:	85 32       	cpi	r24, 0x25	; 37
     d1a:	29 f4       	brne	.+10     	; 0xd26 <vfprintf+0x56>
     d1c:	b6 01       	movw	r22, r12
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     d24:	e7 cf       	rjmp	.-50     	; 0xcf4 <vfprintf+0x24>
     d26:	91 2c       	mov	r9, r1
     d28:	21 2c       	mov	r2, r1
     d2a:	31 2c       	mov	r3, r1
     d2c:	ff e1       	ldi	r31, 0x1F	; 31
     d2e:	f3 15       	cp	r31, r3
     d30:	e0 f0       	brcs	.+56     	; 0xd6a <vfprintf+0x9a>
     d32:	8b 32       	cpi	r24, 0x2B	; 43
     d34:	79 f0       	breq	.+30     	; 0xd54 <vfprintf+0x84>
     d36:	38 f4       	brcc	.+14     	; 0xd46 <vfprintf+0x76>
     d38:	80 32       	cpi	r24, 0x20	; 32
     d3a:	79 f0       	breq	.+30     	; 0xd5a <vfprintf+0x8a>
     d3c:	83 32       	cpi	r24, 0x23	; 35
     d3e:	a9 f4       	brne	.+42     	; 0xd6a <vfprintf+0x9a>
     d40:	23 2d       	mov	r18, r3
     d42:	20 61       	ori	r18, 0x10	; 16
     d44:	10 c0       	rjmp	.+32     	; 0xd66 <vfprintf+0x96>
     d46:	8d 32       	cpi	r24, 0x2D	; 45
     d48:	59 f0       	breq	.+22     	; 0xd60 <vfprintf+0x90>
     d4a:	80 33       	cpi	r24, 0x30	; 48
     d4c:	71 f4       	brne	.+28     	; 0xd6a <vfprintf+0x9a>
     d4e:	23 2d       	mov	r18, r3
     d50:	21 60       	ori	r18, 0x01	; 1
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <vfprintf+0x96>
     d54:	83 2d       	mov	r24, r3
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	38 2e       	mov	r3, r24
     d5a:	e3 2d       	mov	r30, r3
     d5c:	e4 60       	ori	r30, 0x04	; 4
     d5e:	24 c0       	rjmp	.+72     	; 0xda8 <vfprintf+0xd8>
     d60:	f3 2d       	mov	r31, r3
     d62:	f8 60       	ori	r31, 0x08	; 8
     d64:	27 c0       	rjmp	.+78     	; 0xdb4 <vfprintf+0xe4>
     d66:	32 2e       	mov	r3, r18
     d68:	29 c0       	rjmp	.+82     	; 0xdbc <vfprintf+0xec>
     d6a:	37 fc       	sbrc	r3, 7
     d6c:	2f c0       	rjmp	.+94     	; 0xdcc <vfprintf+0xfc>
     d6e:	20 ed       	ldi	r18, 0xD0	; 208
     d70:	28 0f       	add	r18, r24
     d72:	2a 30       	cpi	r18, 0x0A	; 10
     d74:	98 f4       	brcc	.+38     	; 0xd9c <vfprintf+0xcc>
     d76:	36 fe       	sbrs	r3, 6
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <vfprintf+0xb8>
     d7a:	89 2d       	mov	r24, r9
     d7c:	6a e0       	ldi	r22, 0x0A	; 10
     d7e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__mulqi3>
     d82:	92 2e       	mov	r9, r18
     d84:	98 0e       	add	r9, r24
     d86:	1a c0       	rjmp	.+52     	; 0xdbc <vfprintf+0xec>
     d88:	82 2d       	mov	r24, r2
     d8a:	6a e0       	ldi	r22, 0x0A	; 10
     d8c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__mulqi3>
     d90:	22 2e       	mov	r2, r18
     d92:	28 0e       	add	r2, r24
     d94:	83 2d       	mov	r24, r3
     d96:	80 62       	ori	r24, 0x20	; 32
     d98:	38 2e       	mov	r3, r24
     d9a:	10 c0       	rjmp	.+32     	; 0xdbc <vfprintf+0xec>
     d9c:	8e 32       	cpi	r24, 0x2E	; 46
     d9e:	31 f4       	brne	.+12     	; 0xdac <vfprintf+0xdc>
     da0:	36 fc       	sbrc	r3, 6
     da2:	70 c1       	rjmp	.+736    	; 0x1084 <vfprintf+0x3b4>
     da4:	e3 2d       	mov	r30, r3
     da6:	e0 64       	ori	r30, 0x40	; 64
     da8:	3e 2e       	mov	r3, r30
     daa:	08 c0       	rjmp	.+16     	; 0xdbc <vfprintf+0xec>
     dac:	8c 36       	cpi	r24, 0x6C	; 108
     dae:	21 f4       	brne	.+8      	; 0xdb8 <vfprintf+0xe8>
     db0:	f3 2d       	mov	r31, r3
     db2:	f0 68       	ori	r31, 0x80	; 128
     db4:	3f 2e       	mov	r3, r31
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0xec>
     db8:	88 36       	cpi	r24, 0x68	; 104
     dba:	41 f4       	brne	.+16     	; 0xdcc <vfprintf+0xfc>
     dbc:	f7 01       	movw	r30, r14
     dbe:	93 fd       	sbrc	r25, 3
     dc0:	85 91       	lpm	r24, Z+
     dc2:	93 ff       	sbrs	r25, 3
     dc4:	81 91       	ld	r24, Z+
     dc6:	7f 01       	movw	r14, r30
     dc8:	81 11       	cpse	r24, r1
     dca:	b0 cf       	rjmp	.-160    	; 0xd2c <vfprintf+0x5c>
     dcc:	98 2f       	mov	r25, r24
     dce:	9f 7d       	andi	r25, 0xDF	; 223
     dd0:	95 54       	subi	r25, 0x45	; 69
     dd2:	93 30       	cpi	r25, 0x03	; 3
     dd4:	28 f4       	brcc	.+10     	; 0xde0 <vfprintf+0x110>
     dd6:	0c 5f       	subi	r16, 0xFC	; 252
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	2f e3       	ldi	r18, 0x3F	; 63
     ddc:	29 83       	std	Y+1, r18	; 0x01
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x12a>
     de0:	83 36       	cpi	r24, 0x63	; 99
     de2:	31 f0       	breq	.+12     	; 0xdf0 <vfprintf+0x120>
     de4:	83 37       	cpi	r24, 0x73	; 115
     de6:	71 f0       	breq	.+28     	; 0xe04 <vfprintf+0x134>
     de8:	83 35       	cpi	r24, 0x53	; 83
     dea:	09 f0       	breq	.+2      	; 0xdee <vfprintf+0x11e>
     dec:	59 c0       	rjmp	.+178    	; 0xea0 <vfprintf+0x1d0>
     dee:	21 c0       	rjmp	.+66     	; 0xe32 <vfprintf+0x162>
     df0:	f8 01       	movw	r30, r16
     df2:	80 81       	ld	r24, Z
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	0e 5f       	subi	r16, 0xFE	; 254
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	88 24       	eor	r8, r8
     dfc:	83 94       	inc	r8
     dfe:	91 2c       	mov	r9, r1
     e00:	53 01       	movw	r10, r6
     e02:	13 c0       	rjmp	.+38     	; 0xe2a <vfprintf+0x15a>
     e04:	28 01       	movw	r4, r16
     e06:	f2 e0       	ldi	r31, 0x02	; 2
     e08:	4f 0e       	add	r4, r31
     e0a:	51 1c       	adc	r5, r1
     e0c:	f8 01       	movw	r30, r16
     e0e:	a0 80       	ld	r10, Z
     e10:	b1 80       	ldd	r11, Z+1	; 0x01
     e12:	36 fe       	sbrs	r3, 6
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <vfprintf+0x14c>
     e16:	69 2d       	mov	r22, r9
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <vfprintf+0x150>
     e1c:	6f ef       	ldi	r22, 0xFF	; 255
     e1e:	7f ef       	ldi	r23, 0xFF	; 255
     e20:	c5 01       	movw	r24, r10
     e22:	0e 94 57 08 	call	0x10ae	; 0x10ae <strnlen>
     e26:	4c 01       	movw	r8, r24
     e28:	82 01       	movw	r16, r4
     e2a:	f3 2d       	mov	r31, r3
     e2c:	ff 77       	andi	r31, 0x7F	; 127
     e2e:	3f 2e       	mov	r3, r31
     e30:	16 c0       	rjmp	.+44     	; 0xe5e <vfprintf+0x18e>
     e32:	28 01       	movw	r4, r16
     e34:	22 e0       	ldi	r18, 0x02	; 2
     e36:	42 0e       	add	r4, r18
     e38:	51 1c       	adc	r5, r1
     e3a:	f8 01       	movw	r30, r16
     e3c:	a0 80       	ld	r10, Z
     e3e:	b1 80       	ldd	r11, Z+1	; 0x01
     e40:	36 fe       	sbrs	r3, 6
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <vfprintf+0x17a>
     e44:	69 2d       	mov	r22, r9
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <vfprintf+0x17e>
     e4a:	6f ef       	ldi	r22, 0xFF	; 255
     e4c:	7f ef       	ldi	r23, 0xFF	; 255
     e4e:	c5 01       	movw	r24, r10
     e50:	0e 94 4c 08 	call	0x1098	; 0x1098 <strnlen_P>
     e54:	4c 01       	movw	r8, r24
     e56:	f3 2d       	mov	r31, r3
     e58:	f0 68       	ori	r31, 0x80	; 128
     e5a:	3f 2e       	mov	r3, r31
     e5c:	82 01       	movw	r16, r4
     e5e:	33 fc       	sbrc	r3, 3
     e60:	1b c0       	rjmp	.+54     	; 0xe98 <vfprintf+0x1c8>
     e62:	82 2d       	mov	r24, r2
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	88 16       	cp	r8, r24
     e68:	99 06       	cpc	r9, r25
     e6a:	b0 f4       	brcc	.+44     	; 0xe98 <vfprintf+0x1c8>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     e76:	2a 94       	dec	r2
     e78:	f4 cf       	rjmp	.-24     	; 0xe62 <vfprintf+0x192>
     e7a:	f5 01       	movw	r30, r10
     e7c:	37 fc       	sbrc	r3, 7
     e7e:	85 91       	lpm	r24, Z+
     e80:	37 fe       	sbrs	r3, 7
     e82:	81 91       	ld	r24, Z+
     e84:	5f 01       	movw	r10, r30
     e86:	b6 01       	movw	r22, r12
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     e8e:	21 10       	cpse	r2, r1
     e90:	2a 94       	dec	r2
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	82 1a       	sub	r8, r18
     e96:	91 08       	sbc	r9, r1
     e98:	81 14       	cp	r8, r1
     e9a:	91 04       	cpc	r9, r1
     e9c:	71 f7       	brne	.-36     	; 0xe7a <vfprintf+0x1aa>
     e9e:	e8 c0       	rjmp	.+464    	; 0x1070 <vfprintf+0x3a0>
     ea0:	84 36       	cpi	r24, 0x64	; 100
     ea2:	11 f0       	breq	.+4      	; 0xea8 <vfprintf+0x1d8>
     ea4:	89 36       	cpi	r24, 0x69	; 105
     ea6:	41 f5       	brne	.+80     	; 0xef8 <vfprintf+0x228>
     ea8:	f8 01       	movw	r30, r16
     eaa:	37 fe       	sbrs	r3, 7
     eac:	07 c0       	rjmp	.+14     	; 0xebc <vfprintf+0x1ec>
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	0c 5f       	subi	r16, 0xFC	; 252
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	08 c0       	rjmp	.+16     	; 0xecc <vfprintf+0x1fc>
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	07 2e       	mov	r0, r23
     ec2:	00 0c       	add	r0, r0
     ec4:	88 0b       	sbc	r24, r24
     ec6:	99 0b       	sbc	r25, r25
     ec8:	0e 5f       	subi	r16, 0xFE	; 254
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	f3 2d       	mov	r31, r3
     ece:	ff 76       	andi	r31, 0x6F	; 111
     ed0:	3f 2e       	mov	r3, r31
     ed2:	97 ff       	sbrs	r25, 7
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <vfprintf+0x218>
     ed6:	90 95       	com	r25
     ed8:	80 95       	com	r24
     eda:	70 95       	com	r23
     edc:	61 95       	neg	r22
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	f0 68       	ori	r31, 0x80	; 128
     ee6:	3f 2e       	mov	r3, r31
     ee8:	2a e0       	ldi	r18, 0x0A	; 10
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	a3 01       	movw	r20, r6
     eee:	0e 94 9e 08 	call	0x113c	; 0x113c <__ultoa_invert>
     ef2:	88 2e       	mov	r8, r24
     ef4:	86 18       	sub	r8, r6
     ef6:	45 c0       	rjmp	.+138    	; 0xf82 <vfprintf+0x2b2>
     ef8:	85 37       	cpi	r24, 0x75	; 117
     efa:	31 f4       	brne	.+12     	; 0xf08 <vfprintf+0x238>
     efc:	23 2d       	mov	r18, r3
     efe:	2f 7e       	andi	r18, 0xEF	; 239
     f00:	b2 2e       	mov	r11, r18
     f02:	2a e0       	ldi	r18, 0x0A	; 10
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	25 c0       	rjmp	.+74     	; 0xf52 <vfprintf+0x282>
     f08:	93 2d       	mov	r25, r3
     f0a:	99 7f       	andi	r25, 0xF9	; 249
     f0c:	b9 2e       	mov	r11, r25
     f0e:	8f 36       	cpi	r24, 0x6F	; 111
     f10:	c1 f0       	breq	.+48     	; 0xf42 <vfprintf+0x272>
     f12:	18 f4       	brcc	.+6      	; 0xf1a <vfprintf+0x24a>
     f14:	88 35       	cpi	r24, 0x58	; 88
     f16:	79 f0       	breq	.+30     	; 0xf36 <vfprintf+0x266>
     f18:	b5 c0       	rjmp	.+362    	; 0x1084 <vfprintf+0x3b4>
     f1a:	80 37       	cpi	r24, 0x70	; 112
     f1c:	19 f0       	breq	.+6      	; 0xf24 <vfprintf+0x254>
     f1e:	88 37       	cpi	r24, 0x78	; 120
     f20:	21 f0       	breq	.+8      	; 0xf2a <vfprintf+0x25a>
     f22:	b0 c0       	rjmp	.+352    	; 0x1084 <vfprintf+0x3b4>
     f24:	e9 2f       	mov	r30, r25
     f26:	e0 61       	ori	r30, 0x10	; 16
     f28:	be 2e       	mov	r11, r30
     f2a:	b4 fe       	sbrs	r11, 4
     f2c:	0d c0       	rjmp	.+26     	; 0xf48 <vfprintf+0x278>
     f2e:	fb 2d       	mov	r31, r11
     f30:	f4 60       	ori	r31, 0x04	; 4
     f32:	bf 2e       	mov	r11, r31
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <vfprintf+0x278>
     f36:	34 fe       	sbrs	r3, 4
     f38:	0a c0       	rjmp	.+20     	; 0xf4e <vfprintf+0x27e>
     f3a:	29 2f       	mov	r18, r25
     f3c:	26 60       	ori	r18, 0x06	; 6
     f3e:	b2 2e       	mov	r11, r18
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <vfprintf+0x27e>
     f42:	28 e0       	ldi	r18, 0x08	; 8
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <vfprintf+0x282>
     f48:	20 e1       	ldi	r18, 0x10	; 16
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x282>
     f4e:	20 e1       	ldi	r18, 0x10	; 16
     f50:	32 e0       	ldi	r19, 0x02	; 2
     f52:	f8 01       	movw	r30, r16
     f54:	b7 fe       	sbrs	r11, 7
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <vfprintf+0x296>
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	0c 5f       	subi	r16, 0xFC	; 252
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <vfprintf+0x2a2>
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 5f       	subi	r16, 0xFE	; 254
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	a3 01       	movw	r20, r6
     f74:	0e 94 9e 08 	call	0x113c	; 0x113c <__ultoa_invert>
     f78:	88 2e       	mov	r8, r24
     f7a:	86 18       	sub	r8, r6
     f7c:	fb 2d       	mov	r31, r11
     f7e:	ff 77       	andi	r31, 0x7F	; 127
     f80:	3f 2e       	mov	r3, r31
     f82:	36 fe       	sbrs	r3, 6
     f84:	0d c0       	rjmp	.+26     	; 0xfa0 <vfprintf+0x2d0>
     f86:	23 2d       	mov	r18, r3
     f88:	2e 7f       	andi	r18, 0xFE	; 254
     f8a:	a2 2e       	mov	r10, r18
     f8c:	89 14       	cp	r8, r9
     f8e:	58 f4       	brcc	.+22     	; 0xfa6 <vfprintf+0x2d6>
     f90:	34 fe       	sbrs	r3, 4
     f92:	0b c0       	rjmp	.+22     	; 0xfaa <vfprintf+0x2da>
     f94:	32 fc       	sbrc	r3, 2
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <vfprintf+0x2da>
     f98:	83 2d       	mov	r24, r3
     f9a:	8e 7e       	andi	r24, 0xEE	; 238
     f9c:	a8 2e       	mov	r10, r24
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <vfprintf+0x2da>
     fa0:	b8 2c       	mov	r11, r8
     fa2:	a3 2c       	mov	r10, r3
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <vfprintf+0x2dc>
     fa6:	b8 2c       	mov	r11, r8
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <vfprintf+0x2dc>
     faa:	b9 2c       	mov	r11, r9
     fac:	a4 fe       	sbrs	r10, 4
     fae:	0f c0       	rjmp	.+30     	; 0xfce <vfprintf+0x2fe>
     fb0:	fe 01       	movw	r30, r28
     fb2:	e8 0d       	add	r30, r8
     fb4:	f1 1d       	adc	r31, r1
     fb6:	80 81       	ld	r24, Z
     fb8:	80 33       	cpi	r24, 0x30	; 48
     fba:	21 f4       	brne	.+8      	; 0xfc4 <vfprintf+0x2f4>
     fbc:	9a 2d       	mov	r25, r10
     fbe:	99 7e       	andi	r25, 0xE9	; 233
     fc0:	a9 2e       	mov	r10, r25
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <vfprintf+0x306>
     fc4:	a2 fe       	sbrs	r10, 2
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x304>
     fc8:	b3 94       	inc	r11
     fca:	b3 94       	inc	r11
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <vfprintf+0x306>
     fce:	8a 2d       	mov	r24, r10
     fd0:	86 78       	andi	r24, 0x86	; 134
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <vfprintf+0x306>
     fd4:	b3 94       	inc	r11
     fd6:	a3 fc       	sbrc	r10, 3
     fd8:	11 c0       	rjmp	.+34     	; 0xffc <vfprintf+0x32c>
     fda:	a0 fe       	sbrs	r10, 0
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <vfprintf+0x31a>
     fde:	b2 14       	cp	r11, r2
     fe0:	88 f4       	brcc	.+34     	; 0x1004 <vfprintf+0x334>
     fe2:	28 0c       	add	r2, r8
     fe4:	92 2c       	mov	r9, r2
     fe6:	9b 18       	sub	r9, r11
     fe8:	0e c0       	rjmp	.+28     	; 0x1006 <vfprintf+0x336>
     fea:	b2 14       	cp	r11, r2
     fec:	60 f4       	brcc	.+24     	; 0x1006 <vfprintf+0x336>
     fee:	b6 01       	movw	r22, r12
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     ff8:	b3 94       	inc	r11
     ffa:	f7 cf       	rjmp	.-18     	; 0xfea <vfprintf+0x31a>
     ffc:	b2 14       	cp	r11, r2
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <vfprintf+0x336>
    1000:	2b 18       	sub	r2, r11
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfprintf+0x338>
    1004:	98 2c       	mov	r9, r8
    1006:	21 2c       	mov	r2, r1
    1008:	a4 fe       	sbrs	r10, 4
    100a:	10 c0       	rjmp	.+32     	; 0x102c <vfprintf+0x35c>
    100c:	b6 01       	movw	r22, r12
    100e:	80 e3       	ldi	r24, 0x30	; 48
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
    1016:	a2 fe       	sbrs	r10, 2
    1018:	17 c0       	rjmp	.+46     	; 0x1048 <vfprintf+0x378>
    101a:	a1 fc       	sbrc	r10, 1
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <vfprintf+0x354>
    101e:	88 e7       	ldi	r24, 0x78	; 120
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <vfprintf+0x358>
    1024:	88 e5       	ldi	r24, 0x58	; 88
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	b6 01       	movw	r22, r12
    102a:	0c c0       	rjmp	.+24     	; 0x1044 <vfprintf+0x374>
    102c:	8a 2d       	mov	r24, r10
    102e:	86 78       	andi	r24, 0x86	; 134
    1030:	59 f0       	breq	.+22     	; 0x1048 <vfprintf+0x378>
    1032:	a1 fe       	sbrs	r10, 1
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0x36a>
    1036:	8b e2       	ldi	r24, 0x2B	; 43
    1038:	01 c0       	rjmp	.+2      	; 0x103c <vfprintf+0x36c>
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	a7 fc       	sbrc	r10, 7
    103e:	8d e2       	ldi	r24, 0x2D	; 45
    1040:	b6 01       	movw	r22, r12
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
    1048:	89 14       	cp	r8, r9
    104a:	38 f4       	brcc	.+14     	; 0x105a <vfprintf+0x38a>
    104c:	b6 01       	movw	r22, r12
    104e:	80 e3       	ldi	r24, 0x30	; 48
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
    1056:	9a 94       	dec	r9
    1058:	f7 cf       	rjmp	.-18     	; 0x1048 <vfprintf+0x378>
    105a:	8a 94       	dec	r8
    105c:	f3 01       	movw	r30, r6
    105e:	e8 0d       	add	r30, r8
    1060:	f1 1d       	adc	r31, r1
    1062:	80 81       	ld	r24, Z
    1064:	b6 01       	movw	r22, r12
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
    106c:	81 10       	cpse	r8, r1
    106e:	f5 cf       	rjmp	.-22     	; 0x105a <vfprintf+0x38a>
    1070:	22 20       	and	r2, r2
    1072:	09 f4       	brne	.+2      	; 0x1076 <vfprintf+0x3a6>
    1074:	3f ce       	rjmp	.-898    	; 0xcf4 <vfprintf+0x24>
    1076:	b6 01       	movw	r22, r12
    1078:	80 e2       	ldi	r24, 0x20	; 32
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
    1080:	2a 94       	dec	r2
    1082:	f6 cf       	rjmp	.-20     	; 0x1070 <vfprintf+0x3a0>
    1084:	f6 01       	movw	r30, r12
    1086:	86 81       	ldd	r24, Z+6	; 0x06
    1088:	97 81       	ldd	r25, Z+7	; 0x07
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <vfprintf+0x3c0>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	2b 96       	adiw	r28, 0x0b	; 11
    1092:	e2 e1       	ldi	r30, 0x12	; 18
    1094:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__epilogue_restores__>

00001098 <strnlen_P>:
    1098:	fc 01       	movw	r30, r24
    109a:	05 90       	lpm	r0, Z+
    109c:	61 50       	subi	r22, 0x01	; 1
    109e:	70 40       	sbci	r23, 0x00	; 0
    10a0:	01 10       	cpse	r0, r1
    10a2:	d8 f7       	brcc	.-10     	; 0x109a <strnlen_P+0x2>
    10a4:	80 95       	com	r24
    10a6:	90 95       	com	r25
    10a8:	8e 0f       	add	r24, r30
    10aa:	9f 1f       	adc	r25, r31
    10ac:	08 95       	ret

000010ae <strnlen>:
    10ae:	fc 01       	movw	r30, r24
    10b0:	61 50       	subi	r22, 0x01	; 1
    10b2:	70 40       	sbci	r23, 0x00	; 0
    10b4:	01 90       	ld	r0, Z+
    10b6:	01 10       	cpse	r0, r1
    10b8:	d8 f7       	brcc	.-10     	; 0x10b0 <strnlen+0x2>
    10ba:	80 95       	com	r24
    10bc:	90 95       	com	r25
    10be:	8e 0f       	add	r24, r30
    10c0:	9f 1f       	adc	r25, r31
    10c2:	08 95       	ret

000010c4 <fputc>:
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	fb 01       	movw	r30, r22
    10ce:	23 81       	ldd	r18, Z+3	; 0x03
    10d0:	21 fd       	sbrc	r18, 1
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <fputc+0x16>
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	9f ef       	ldi	r25, 0xFF	; 255
    10d8:	2c c0       	rjmp	.+88     	; 0x1132 <fputc+0x6e>
    10da:	22 ff       	sbrs	r18, 2
    10dc:	16 c0       	rjmp	.+44     	; 0x110a <fputc+0x46>
    10de:	46 81       	ldd	r20, Z+6	; 0x06
    10e0:	57 81       	ldd	r21, Z+7	; 0x07
    10e2:	24 81       	ldd	r18, Z+4	; 0x04
    10e4:	35 81       	ldd	r19, Z+5	; 0x05
    10e6:	42 17       	cp	r20, r18
    10e8:	53 07       	cpc	r21, r19
    10ea:	44 f4       	brge	.+16     	; 0x10fc <fputc+0x38>
    10ec:	a0 81       	ld	r26, Z
    10ee:	b1 81       	ldd	r27, Z+1	; 0x01
    10f0:	9d 01       	movw	r18, r26
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	31 83       	std	Z+1, r19	; 0x01
    10f8:	20 83       	st	Z, r18
    10fa:	8c 93       	st	X, r24
    10fc:	26 81       	ldd	r18, Z+6	; 0x06
    10fe:	37 81       	ldd	r19, Z+7	; 0x07
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	37 83       	std	Z+7, r19	; 0x07
    1106:	26 83       	std	Z+6, r18	; 0x06
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <fputc+0x6e>
    110a:	8b 01       	movw	r16, r22
    110c:	ec 01       	movw	r28, r24
    110e:	fb 01       	movw	r30, r22
    1110:	00 84       	ldd	r0, Z+8	; 0x08
    1112:	f1 85       	ldd	r31, Z+9	; 0x09
    1114:	e0 2d       	mov	r30, r0
    1116:	09 95       	icall
    1118:	89 2b       	or	r24, r25
    111a:	e1 f6       	brne	.-72     	; 0x10d4 <fputc+0x10>
    111c:	d8 01       	movw	r26, r16
    111e:	16 96       	adiw	r26, 0x06	; 6
    1120:	8d 91       	ld	r24, X+
    1122:	9c 91       	ld	r25, X
    1124:	17 97       	sbiw	r26, 0x07	; 7
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	17 96       	adiw	r26, 0x07	; 7
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
    112e:	16 97       	sbiw	r26, 0x06	; 6
    1130:	ce 01       	movw	r24, r28
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <__ultoa_invert>:
    113c:	fa 01       	movw	r30, r20
    113e:	aa 27       	eor	r26, r26
    1140:	28 30       	cpi	r18, 0x08	; 8
    1142:	61 f1       	breq	.+88     	; 0x119c <__ultoa_invert+0x60>
    1144:	20 31       	cpi	r18, 0x10	; 16
    1146:	91 f1       	breq	.+100    	; 0x11ac <__ultoa_invert+0x70>
    1148:	e8 94       	clt
    114a:	6f 93       	push	r22
    114c:	6e 7f       	andi	r22, 0xFE	; 254
    114e:	6e 5f       	subi	r22, 0xFE	; 254
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	af 4f       	sbci	r26, 0xFF	; 255
    1158:	b1 e0       	ldi	r27, 0x01	; 1
    115a:	40 d0       	rcall	.+128    	; 0x11dc <__ultoa_invert+0xa0>
    115c:	b4 e0       	ldi	r27, 0x04	; 4
    115e:	3e d0       	rcall	.+124    	; 0x11dc <__ultoa_invert+0xa0>
    1160:	67 0f       	add	r22, r23
    1162:	78 1f       	adc	r23, r24
    1164:	89 1f       	adc	r24, r25
    1166:	9a 1f       	adc	r25, r26
    1168:	a1 1d       	adc	r26, r1
    116a:	68 0f       	add	r22, r24
    116c:	79 1f       	adc	r23, r25
    116e:	8a 1f       	adc	r24, r26
    1170:	91 1d       	adc	r25, r1
    1172:	a1 1d       	adc	r26, r1
    1174:	6a 0f       	add	r22, r26
    1176:	71 1d       	adc	r23, r1
    1178:	81 1d       	adc	r24, r1
    117a:	91 1d       	adc	r25, r1
    117c:	a1 1d       	adc	r26, r1
    117e:	22 d0       	rcall	.+68     	; 0x11c4 <__ultoa_invert+0x88>
    1180:	09 f4       	brne	.+2      	; 0x1184 <__ultoa_invert+0x48>
    1182:	68 94       	set
    1184:	3f 91       	pop	r19
    1186:	06 2e       	mov	r0, r22
    1188:	00 0c       	add	r0, r0
    118a:	30 19       	sub	r19, r0
    118c:	00 0c       	add	r0, r0
    118e:	00 0c       	add	r0, r0
    1190:	30 19       	sub	r19, r0
    1192:	30 5d       	subi	r19, 0xD0	; 208
    1194:	31 93       	st	Z+, r19
    1196:	ce f6       	brtc	.-78     	; 0x114a <__ultoa_invert+0xe>
    1198:	cf 01       	movw	r24, r30
    119a:	08 95       	ret
    119c:	46 2f       	mov	r20, r22
    119e:	47 70       	andi	r20, 0x07	; 7
    11a0:	40 5d       	subi	r20, 0xD0	; 208
    11a2:	41 93       	st	Z+, r20
    11a4:	b3 e0       	ldi	r27, 0x03	; 3
    11a6:	0f d0       	rcall	.+30     	; 0x11c6 <__ultoa_invert+0x8a>
    11a8:	c9 f7       	brne	.-14     	; 0x119c <__ultoa_invert+0x60>
    11aa:	f6 cf       	rjmp	.-20     	; 0x1198 <__ultoa_invert+0x5c>
    11ac:	46 2f       	mov	r20, r22
    11ae:	4f 70       	andi	r20, 0x0F	; 15
    11b0:	40 5d       	subi	r20, 0xD0	; 208
    11b2:	4a 33       	cpi	r20, 0x3A	; 58
    11b4:	18 f0       	brcs	.+6      	; 0x11bc <__ultoa_invert+0x80>
    11b6:	49 5d       	subi	r20, 0xD9	; 217
    11b8:	31 fd       	sbrc	r19, 1
    11ba:	40 52       	subi	r20, 0x20	; 32
    11bc:	41 93       	st	Z+, r20
    11be:	02 d0       	rcall	.+4      	; 0x11c4 <__ultoa_invert+0x88>
    11c0:	a9 f7       	brne	.-22     	; 0x11ac <__ultoa_invert+0x70>
    11c2:	ea cf       	rjmp	.-44     	; 0x1198 <__ultoa_invert+0x5c>
    11c4:	b4 e0       	ldi	r27, 0x04	; 4
    11c6:	a6 95       	lsr	r26
    11c8:	97 95       	ror	r25
    11ca:	87 95       	ror	r24
    11cc:	77 95       	ror	r23
    11ce:	67 95       	ror	r22
    11d0:	ba 95       	dec	r27
    11d2:	c9 f7       	brne	.-14     	; 0x11c6 <__ultoa_invert+0x8a>
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	61 05       	cpc	r22, r1
    11d8:	71 05       	cpc	r23, r1
    11da:	08 95       	ret
    11dc:	9b 01       	movw	r18, r22
    11de:	ac 01       	movw	r20, r24
    11e0:	0a 2e       	mov	r0, r26
    11e2:	06 94       	lsr	r0
    11e4:	57 95       	ror	r21
    11e6:	47 95       	ror	r20
    11e8:	37 95       	ror	r19
    11ea:	27 95       	ror	r18
    11ec:	ba 95       	dec	r27
    11ee:	c9 f7       	brne	.-14     	; 0x11e2 <__ultoa_invert+0xa6>
    11f0:	62 0f       	add	r22, r18
    11f2:	73 1f       	adc	r23, r19
    11f4:	84 1f       	adc	r24, r20
    11f6:	95 1f       	adc	r25, r21
    11f8:	a0 1d       	adc	r26, r0
    11fa:	08 95       	ret

000011fc <__mulqi3>:
    11fc:	00 24       	eor	r0, r0

000011fe <__mulqi3_loop>:
    11fe:	80 fd       	sbrc	r24, 0
    1200:	06 0e       	add	r0, r22
    1202:	66 0f       	add	r22, r22
    1204:	11 f0       	breq	.+4      	; 0x120a <__mulqi3_exit>
    1206:	86 95       	lsr	r24
    1208:	d1 f7       	brne	.-12     	; 0x11fe <__mulqi3_loop>

0000120a <__mulqi3_exit>:
    120a:	80 2d       	mov	r24, r0
    120c:	08 95       	ret

0000120e <__mulsi3>:
    120e:	ee 27       	eor	r30, r30
    1210:	ff 27       	eor	r31, r31

00001212 <__mulsi3_helper>:
    1212:	aa 27       	eor	r26, r26
    1214:	bb 27       	eor	r27, r27
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <__mulsi3_helper+0x16>
    1218:	a2 0f       	add	r26, r18
    121a:	b3 1f       	adc	r27, r19
    121c:	e4 1f       	adc	r30, r20
    121e:	f5 1f       	adc	r31, r21
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	44 1f       	adc	r20, r20
    1226:	55 1f       	adc	r21, r21
    1228:	96 95       	lsr	r25
    122a:	87 95       	ror	r24
    122c:	77 95       	ror	r23
    122e:	67 95       	ror	r22
    1230:	98 f3       	brcs	.-26     	; 0x1218 <__mulsi3_helper+0x6>
    1232:	70 40       	sbci	r23, 0x00	; 0
    1234:	a9 f7       	brne	.-22     	; 0x1220 <__mulsi3_helper+0xe>
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	99 f7       	brne	.-26     	; 0x1220 <__mulsi3_helper+0xe>
    123a:	bd 01       	movw	r22, r26
    123c:	cf 01       	movw	r24, r30
    123e:	08 95       	ret

00001240 <__divmodsi4>:
    1240:	05 2e       	mov	r0, r21
    1242:	97 fb       	bst	r25, 7
    1244:	1e f4       	brtc	.+6      	; 0x124c <__divmodsi4+0xc>
    1246:	00 94       	com	r0
    1248:	0e 94 37 09 	call	0x126e	; 0x126e <__negsi2>
    124c:	57 fd       	sbrc	r21, 7
    124e:	07 d0       	rcall	.+14     	; 0x125e <__divmodsi4_neg2>
    1250:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__udivmodsi4>
    1254:	07 fc       	sbrc	r0, 7
    1256:	03 d0       	rcall	.+6      	; 0x125e <__divmodsi4_neg2>
    1258:	4e f4       	brtc	.+18     	; 0x126c <__divmodsi4_exit>
    125a:	0c 94 37 09 	jmp	0x126e	; 0x126e <__negsi2>

0000125e <__divmodsi4_neg2>:
    125e:	50 95       	com	r21
    1260:	40 95       	com	r20
    1262:	30 95       	com	r19
    1264:	21 95       	neg	r18
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	4f 4f       	sbci	r20, 0xFF	; 255
    126a:	5f 4f       	sbci	r21, 0xFF	; 255

0000126c <__divmodsi4_exit>:
    126c:	08 95       	ret

0000126e <__negsi2>:
    126e:	90 95       	com	r25
    1270:	80 95       	com	r24
    1272:	70 95       	com	r23
    1274:	61 95       	neg	r22
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__prologue_saves__>:
    127e:	2f 92       	push	r2
    1280:	3f 92       	push	r3
    1282:	4f 92       	push	r4
    1284:	5f 92       	push	r5
    1286:	6f 92       	push	r6
    1288:	7f 92       	push	r7
    128a:	8f 92       	push	r8
    128c:	9f 92       	push	r9
    128e:	af 92       	push	r10
    1290:	bf 92       	push	r11
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	ca 1b       	sub	r28, r26
    12a8:	db 0b       	sbc	r29, r27
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	09 94       	ijmp

000012b6 <__epilogue_restores__>:
    12b6:	2a 88       	ldd	r2, Y+18	; 0x12
    12b8:	39 88       	ldd	r3, Y+17	; 0x11
    12ba:	48 88       	ldd	r4, Y+16	; 0x10
    12bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    12be:	6e 84       	ldd	r6, Y+14	; 0x0e
    12c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    12c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    12c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    12c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    12c8:	b9 84       	ldd	r11, Y+9	; 0x09
    12ca:	c8 84       	ldd	r12, Y+8	; 0x08
    12cc:	df 80       	ldd	r13, Y+7	; 0x07
    12ce:	ee 80       	ldd	r14, Y+6	; 0x06
    12d0:	fd 80       	ldd	r15, Y+5	; 0x05
    12d2:	0c 81       	ldd	r16, Y+4	; 0x04
    12d4:	1b 81       	ldd	r17, Y+3	; 0x03
    12d6:	aa 81       	ldd	r26, Y+2	; 0x02
    12d8:	b9 81       	ldd	r27, Y+1	; 0x01
    12da:	ce 0f       	add	r28, r30
    12dc:	d1 1d       	adc	r29, r1
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	ed 01       	movw	r28, r26
    12ea:	08 95       	ret

000012ec <_exit>:
    12ec:	f8 94       	cli

000012ee <__stop_program>:
    12ee:	ff cf       	rjmp	.-2      	; 0x12ee <__stop_program>
