
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000012f8  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800108  00800108  00001394  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000595e  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ff  00000000  00000000  00007026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033b5  00000000  00000000  00008925  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d0  00000000  00000000  0000bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002564  00000000  00000000  0000c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003195  00000000  00000000  0000ea10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  00011ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_11>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_19>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      74:	1c 01       	movw	r2, r24
      76:	43 01       	movw	r8, r6
      78:	3b 02       	muls	r19, r27
      7a:	43 01       	movw	r8, r6
      7c:	3b 02       	muls	r19, r27
      7e:	8f 01       	movw	r16, r30
      80:	b2 01       	movw	r22, r4
      82:	3b 02       	muls	r19, r27
      84:	09 02       	muls	r16, r25
      86:	18 02       	muls	r17, r24

00000088 <ProductString>:
      88:	16 03 43 00 65 00 72 00 65 00 6c 00 6f 00 67 00     ..C.e.r.e.l.o.g.
      98:	20 00 58 00 38 00 00 00                              .X.8...

000000a0 <ManufacturerString>:
      a0:	20 03 53 00 63 00 68 00 6c 00 6f 00 6e 00 67 00      .S.c.h.l.o.n.g.
      b0:	20 00 4b 00 69 00 6e 00 67 00 64 00 6f 00 6d 00      .K.i.n.g.d.o.m.
	...

000000c2 <LanguageString>:
      c2:	04 03 09 04                                         ....

000000c6 <ConfigurationDescriptor>:
      c6:	09 02 70 00 02 01 00 c0 c8 09 04 00 00 00 01 01     ..p.............
      d6:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
      e6:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
      f6:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
     106:	00 00 07 24 01 02 01 01 00 17 24 02 01 01 02 10     ...$......$.....
     116:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
     126:	09 05 81 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

00000136 <DeviceDescriptor>:
     136:	12 01 10 01 00 00 00 08 d8 04 2d e5 02 00 01 02     ..........-.....
     146:	00 01                                               ..

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d2 e0       	ldi	r29, 0x02	; 2
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	11 e0       	ldi	r17, 0x01	; 1
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	e8 ef       	ldi	r30, 0xF8	; 248
     15c:	f2 e1       	ldi	r31, 0x12	; 18
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a8 30       	cpi	r26, 0x08	; 8
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
     16a:	21 e0       	ldi	r18, 0x01	; 1
     16c:	a8 e0       	ldi	r26, 0x08	; 8
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a7 31       	cpi	r26, 0x17	; 23
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <main>
     17e:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     186:	29 2f       	mov	r18, r25
     188:	33 27       	eor	r19, r19
     18a:	22 30       	cpi	r18, 0x02	; 2
     18c:	31 05       	cpc	r19, r1
     18e:	59 f0       	breq	.+22     	; 0x1a6 <CALLBACK_USB_GetDescriptor+0x20>
     190:	23 30       	cpi	r18, 0x03	; 3
     192:	31 05       	cpc	r19, r1
     194:	69 f0       	breq	.+26     	; 0x1b0 <CALLBACK_USB_GetDescriptor+0x2a>
     196:	21 30       	cpi	r18, 0x01	; 1
     198:	31 05       	cpc	r19, r1
     19a:	e9 f4       	brne	.+58     	; 0x1d6 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     19c:	82 e1       	ldi	r24, 0x12	; 18
     19e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1a0:	26 e3       	ldi	r18, 0x36	; 54
     1a2:	31 e0       	ldi	r19, 0x01	; 1
     1a4:	1c c0       	rjmp	.+56     	; 0x1de <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1a6:	80 e7       	ldi	r24, 0x70	; 112
     1a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1aa:	26 ec       	ldi	r18, 0xC6	; 198
     1ac:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1ae:	17 c0       	rjmp	.+46     	; 0x1de <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     1b0:	99 27       	eor	r25, r25
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	91 05       	cpc	r25, r1
     1b6:	49 f0       	breq	.+18     	; 0x1ca <CALLBACK_USB_GetDescriptor+0x44>
     1b8:	28 f0       	brcs	.+10     	; 0x1c4 <CALLBACK_USB_GetDescriptor+0x3e>
     1ba:	02 97       	sbiw	r24, 0x02	; 2
     1bc:	61 f4       	brne	.+24     	; 0x1d6 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1be:	e8 e8       	ldi	r30, 0x88	; 136
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1c4:	e2 ec       	ldi	r30, 0xC2	; 194
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1ca:	e0 ea       	ldi	r30, 0xA0	; 160
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1ce:	84 91       	lpm	r24, Z
     1d0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1d2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1d4:	04 c0       	rjmp	.+8      	; 0x1de <CALLBACK_USB_GetDescriptor+0x58>
                                    const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1de:	fa 01       	movw	r30, r20
     1e0:	31 83       	std	Z+1, r19	; 0x01
     1e2:	20 83       	st	Z, r18
	return Size;
     1e4:	08 95       	ret

000001e6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	aa 97       	sbiw	r28, 0x2a	; 42
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	ee e0       	ldi	r30, 0x0E	; 14
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     200:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     204:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     206:	21 e0       	ldi	r18, 0x01	; 1
     208:	e6 31       	cpi	r30, 0x16	; 22
     20a:	f2 07       	cpc	r31, r18
     20c:	c9 f7       	brne	.-14     	; 0x200 <__DATA_REGION_LENGTH__>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     20e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     212:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	if (Endpoint_IsSETUPReceived())
     216:	83 ff       	sbrs	r24, 3
     218:	2e c1       	rjmp	.+604    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     21a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     21e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <USB_ControlRequest+0x1>
     222:	49 2f       	mov	r20, r25
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	4a 30       	cpi	r20, 0x0A	; 10
     228:	51 05       	cpc	r21, r1
     22a:	08 f0       	brcs	.+2      	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
     22c:	24 c1       	rjmp	.+584    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     22e:	fa 01       	movw	r30, r20
     230:	e6 5c       	subi	r30, 0xC6	; 198
     232:	ff 4f       	sbci	r31, 0xFF	; 255
     234:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     238:	80 38       	cpi	r24, 0x80	; 128
     23a:	21 f0       	breq	.+8      	; 0x244 <__DATA_REGION_LENGTH__+0x44>
     23c:	82 38       	cpi	r24, 0x82	; 130
     23e:	09 f0       	breq	.+2      	; 0x242 <__DATA_REGION_LENGTH__+0x42>
     240:	1a c1       	rjmp	.+564    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     242:	08 c0       	rjmp	.+16     	; 0x254 <__DATA_REGION_LENGTH__+0x54>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     244:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     248:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <USB_Device_RemoteWakeupEnabled>
     24c:	99 23       	and	r25, r25
     24e:	89 f0       	breq	.+34     	; 0x272 <__DATA_REGION_LENGTH__+0x72>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     250:	82 60       	ori	r24, 0x02	; 2
     252:	0f c0       	rjmp	.+30     	; 0x272 <__DATA_REGION_LENGTH__+0x72>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     254:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     258:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     25a:	85 30       	cpi	r24, 0x05	; 5
     25c:	08 f0       	brcs	.+2      	; 0x260 <__DATA_REGION_LENGTH__+0x60>
     25e:	0b c1       	rjmp	.+534    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     260:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     264:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     268:	85 fb       	bst	r24, 5
     26a:	88 27       	eor	r24, r24
     26c:	80 f9       	bld	r24, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     26e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     272:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     276:	97 7f       	andi	r25, 0xF7	; 247
     278:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     27c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     280:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     284:	d1 c0       	rjmp	.+418    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     286:	28 2f       	mov	r18, r24
     288:	2d 7f       	andi	r18, 0xFD	; 253
     28a:	09 f0       	breq	.+2      	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
     28c:	f4 c0       	rjmp	.+488    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     28e:	88 23       	and	r24, r24
     290:	19 f0       	breq	.+6      	; 0x298 <__DATA_REGION_LENGTH__+0x98>
     292:	82 30       	cpi	r24, 0x02	; 2
     294:	61 f0       	breq	.+24     	; 0x2ae <__DATA_REGION_LENGTH__+0xae>
     296:	ef c0       	rjmp	.+478    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     298:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	09 f0       	breq	.+2      	; 0x2a2 <__DATA_REGION_LENGTH__+0xa2>
     2a0:	ea c0       	rjmp	.+468    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     2a2:	93 30       	cpi	r25, 0x03	; 3
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <__DATA_REGION_LENGTH__+0xa8>
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_Device_RemoteWakeupEnabled>
     2ac:	2e c0       	rjmp	.+92     	; 0x30a <__stack+0xb>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     2ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     2b2:	81 11       	cpse	r24, r1
     2b4:	2a c0       	rjmp	.+84     	; 0x30a <__stack+0xb>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     2b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     2ba:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     2bc:	2f ef       	ldi	r18, 0xFF	; 255
     2be:	28 0f       	add	r18, r24
     2c0:	24 30       	cpi	r18, 0x04	; 4
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <__DATA_REGION_LENGTH__+0xc6>
     2c4:	d8 c0       	rjmp	.+432    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2c6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     2ca:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     2ce:	20 ff       	sbrs	r18, 0
     2d0:	1c c0       	rjmp	.+56     	; 0x30a <__stack+0xb>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     2d2:	93 30       	cpi	r25, 0x03	; 3
     2d4:	21 f4       	brne	.+8      	; 0x2de <__DATA_REGION_LENGTH__+0xde>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     2da:	80 62       	ori	r24, 0x20	; 32
     2dc:	14 c0       	rjmp	.+40     	; 0x306 <__stack+0x7>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     2de:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     2e2:	90 61       	ori	r25, 0x10	; 16
     2e4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	a9 01       	movw	r20, r18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__DATA_REGION_LENGTH__+0xf4>
     2f0:	44 0f       	add	r20, r20
     2f2:	55 1f       	adc	r21, r21
     2f4:	8a 95       	dec	r24
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <__DATA_REGION_LENGTH__+0xf0>
     2f8:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>
				UERST = 0;
     2fc:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7fc0ea>

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     300:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     304:	88 60       	ori	r24, 0x08	; 8
     306:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     30a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     30e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     312:	87 7f       	andi	r24, 0xF7	; 247
     314:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     318:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Endpoint_ClearStatusStage>
     31c:	ac c0       	rjmp	.+344    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     31e:	81 11       	cpse	r24, r1
     320:	aa c0       	rjmp	.+340    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     322:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     326:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     328:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     32c:	80 78       	andi	r24, 0x80	; 128
     32e:	81 2b       	or	r24, r17
     330:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     338:	87 7f       	andi	r24, 0xF7	; 247
     33a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     33e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	while (!(Endpoint_IsINReady()));
     346:	80 ff       	sbrs	r24, 0
     348:	fc cf       	rjmp	.-8      	; 0x342 <__stack+0x43>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     34a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
     34e:	80 68       	ori	r24, 0x80	; 128
     350:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     354:	11 11       	cpse	r17, r1
     356:	02 c0       	rjmp	.+4      	; 0x35c <__stack+0x5d>
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	01 c0       	rjmp	.+2      	; 0x35e <__stack+0x5f>
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
     362:	89 c0       	rjmp	.+274    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     364:	80 58       	subi	r24, 0x80	; 128
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	08 f0       	brcs	.+2      	; 0x36c <__stack+0x6d>
     36a:	85 c0       	rjmp	.+266    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     36c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     370:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     374:	8c 3d       	cpi	r24, 0xDC	; 220
     376:	53 e0       	ldi	r21, 0x03	; 3
     378:	95 07       	cpc	r25, r21
     37a:	79 f5       	brne	.+94     	; 0x3da <__stack+0xdb>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     380:	8a e2       	ldi	r24, 0x2A	; 42
     382:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     384:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     386:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     388:	de 01       	movw	r26, r28
     38a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     38c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     38e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     390:	51 e2       	ldi	r21, 0x21	; 33
     392:	e3 2f       	mov	r30, r19
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
     39a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     39c:	20 ff       	sbrs	r18, 0
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <__stack+0xa7>
					{
						SerialByte >>= 4;
     3a0:	e2 95       	swap	r30
     3a2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     3a4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     3a6:	ef 70       	andi	r30, 0x0F	; 15
     3a8:	8e 2f       	mov	r24, r30
     3aa:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     3ac:	ea 30       	cpi	r30, 0x0A	; 10
     3ae:	10 f0       	brcs	.+4      	; 0x3b4 <__stack+0xb5>
     3b0:	c7 96       	adiw	r24, 0x37	; 55
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <__stack+0xb7>
     3b4:	c0 96       	adiw	r24, 0x30	; 48
     3b6:	8d 93       	st	X+, r24
     3b8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     3ba:	2f 5f       	subi	r18, 0xFF	; 255
     3bc:	24 31       	cpi	r18, 0x14	; 20
     3be:	49 f7       	brne	.-46     	; 0x392 <__stack+0x93>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3c0:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     3c6:	87 7f       	andi	r24, 0xF7	; 247
     3c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     3cc:	6a e2       	ldi	r22, 0x2A	; 42
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	ce 01       	movw	r24, r28
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Endpoint_Write_Control_Stream_LE>
     3d8:	16 c0       	rjmp	.+44     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     3da:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     3de:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <USB_ControlRequest+0x5>
     3e2:	ae 01       	movw	r20, r28
     3e4:	4f 5f       	subi	r20, 0xFF	; 255
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 c3 00 	call	0x186	; 0x186 <CALLBACK_USB_GetDescriptor>
     3ec:	bc 01       	movw	r22, r24
     3ee:	89 2b       	or	r24, r25
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <__stack+0xf5>
     3f2:	41 c0       	rjmp	.+130    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3f4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     3f8:	97 7f       	andi	r25, 0xF7	; 247
     3fa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Endpoint_Write_Control_PStream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     406:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     40a:	8b 77       	andi	r24, 0x7B	; 123
     40c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     410:	32 c0       	rjmp	.+100    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     412:	80 38       	cpi	r24, 0x80	; 128
     414:	81 f5       	brne	.+96     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     416:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     41a:	87 7f       	andi	r24, 0xF7	; 247
     41c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     420:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     424:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     42c:	8e 77       	andi	r24, 0x7E	; 126
     42e:	72 cf       	rjmp	.-284    	; 0x314 <__stack+0x15>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     430:	81 11       	cpse	r24, r1
     432:	21 c0       	rjmp	.+66     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     434:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     438:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     43c:	99 27       	eor	r25, r25
     43e:	02 97       	sbiw	r24, 0x02	; 2
     440:	d4 f4       	brge	.+52     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     446:	87 7f       	andi	r24, 0xF7	; 247
     448:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     44c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     450:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     454:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     458:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
     45c:	81 11       	cpse	r24, r1
     45e:	06 c0       	rjmp	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     460:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     464:	87 fd       	sbrc	r24, 7
     466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	01 c0       	rjmp	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46c:	84 e0       	ldi	r24, 0x04	; 4
     46e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     472:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     476:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     47a:	83 ff       	sbrs	r24, 3
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     47e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     482:	87 7f       	andi	r24, 0xF7	; 247
     484:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     488:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     48c:	80 62       	ori	r24, 0x20	; 32
     48e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     492:	aa 96       	adiw	r28, 0x2a	; 42
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	08 95       	ret

000004a6 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4a6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_ControlRequest+0x6>
     4aa:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <USB_ControlRequest+0x7>
     4ae:	26 17       	cp	r18, r22
     4b0:	37 07       	cpc	r19, r23
     4b2:	48 f0       	brcs	.+18     	; 0x4c6 <Endpoint_Write_Control_Stream_LE+0x20>
     4b4:	61 15       	cp	r22, r1
     4b6:	71 05       	cpc	r23, r1
     4b8:	39 f4       	brne	.+14     	; 0x4c8 <Endpoint_Write_Control_Stream_LE+0x22>
     4ba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4be:	2e 77       	andi	r18, 0x7E	; 126
     4c0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <Endpoint_Write_Control_Stream_LE+0x22>
     4c6:	b9 01       	movw	r22, r18
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	61 15       	cp	r22, r1
     4ce:	71 05       	cpc	r23, r1
     4d0:	61 f1       	breq	.+88     	; 0x52a <Endpoint_Write_Control_Stream_LE+0x84>
     4d2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     4d6:	88 23       	and	r24, r24
     4d8:	d9 f1       	breq	.+118    	; 0x550 <Endpoint_Write_Control_Stream_LE+0xaa>
     4da:	85 30       	cpi	r24, 0x05	; 5
     4dc:	d9 f1       	breq	.+118    	; 0x554 <Endpoint_Write_Control_Stream_LE+0xae>
     4de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4e2:	83 fd       	sbrc	r24, 3
     4e4:	39 c0       	rjmp	.+114    	; 0x558 <Endpoint_Write_Control_Stream_LE+0xb2>
     4e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4ea:	82 fd       	sbrc	r24, 2
     4ec:	2b c0       	rjmp	.+86     	; 0x544 <Endpoint_Write_Control_Stream_LE+0x9e>
     4ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     4f2:	80 ff       	sbrs	r24, 0
     4f4:	eb cf       	rjmp	.-42     	; 0x4cc <Endpoint_Write_Control_Stream_LE+0x26>
     4f6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	61 15       	cp	r22, r1
     4fe:	71 05       	cpc	r23, r1
     500:	51 f0       	breq	.+20     	; 0x516 <Endpoint_Write_Control_Stream_LE+0x70>
     502:	88 30       	cpi	r24, 0x08	; 8
     504:	91 05       	cpc	r25, r1
     506:	38 f4       	brcc	.+14     	; 0x516 <Endpoint_Write_Control_Stream_LE+0x70>
     508:	21 91       	ld	r18, Z+
     50a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     50e:	61 50       	subi	r22, 0x01	; 1
     510:	71 09       	sbc	r23, r1
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	f3 cf       	rjmp	.-26     	; 0x4fc <Endpoint_Write_Control_Stream_LE+0x56>
     516:	21 e0       	ldi	r18, 0x01	; 1
     518:	08 97       	sbiw	r24, 0x08	; 8
     51a:	09 f0       	breq	.+2      	; 0x51e <Endpoint_Write_Control_Stream_LE+0x78>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     522:	8e 77       	andi	r24, 0x7E	; 126
     524:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     528:	d1 cf       	rjmp	.-94     	; 0x4cc <Endpoint_Write_Control_Stream_LE+0x26>
     52a:	21 11       	cpse	r18, r1
     52c:	d2 cf       	rjmp	.-92     	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x2c>
     52e:	0a c0       	rjmp	.+20     	; 0x544 <Endpoint_Write_Control_Stream_LE+0x9e>
     530:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     534:	88 23       	and	r24, r24
     536:	61 f0       	breq	.+24     	; 0x550 <Endpoint_Write_Control_Stream_LE+0xaa>
     538:	85 30       	cpi	r24, 0x05	; 5
     53a:	61 f0       	breq	.+24     	; 0x554 <Endpoint_Write_Control_Stream_LE+0xae>
     53c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     540:	83 fd       	sbrc	r24, 3
     542:	0a c0       	rjmp	.+20     	; 0x558 <Endpoint_Write_Control_Stream_LE+0xb2>
     544:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     548:	82 ff       	sbrs	r24, 2
     54a:	f2 cf       	rjmp	.-28     	; 0x530 <Endpoint_Write_Control_Stream_LE+0x8a>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	08 95       	ret
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	08 95       	ret
     554:	83 e0       	ldi	r24, 0x03	; 3
     556:	08 95       	ret
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	08 95       	ret

0000055c <Endpoint_Read_Control_Stream_LE>:
     55c:	61 15       	cp	r22, r1
     55e:	71 05       	cpc	r23, r1
     560:	29 f4       	brne	.+10     	; 0x56c <Endpoint_Read_Control_Stream_LE+0x10>
     562:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     566:	2b 77       	andi	r18, 0x7B	; 123
     568:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     56c:	fc 01       	movw	r30, r24
     56e:	61 15       	cp	r22, r1
     570:	71 05       	cpc	r23, r1
     572:	21 f1       	breq	.+72     	; 0x5bc <Endpoint_Read_Control_Stream_LE+0x60>
     574:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     578:	88 23       	and	r24, r24
     57a:	41 f1       	breq	.+80     	; 0x5cc <Endpoint_Read_Control_Stream_LE+0x70>
     57c:	85 30       	cpi	r24, 0x05	; 5
     57e:	41 f1       	breq	.+80     	; 0x5d0 <Endpoint_Read_Control_Stream_LE+0x74>
     580:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     584:	83 fd       	sbrc	r24, 3
     586:	20 c0       	rjmp	.+64     	; 0x5c8 <Endpoint_Read_Control_Stream_LE+0x6c>
     588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     58c:	82 ff       	sbrs	r24, 2
     58e:	ef cf       	rjmp	.-34     	; 0x56e <Endpoint_Read_Control_Stream_LE+0x12>
     590:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     594:	88 23       	and	r24, r24
     596:	31 f0       	breq	.+12     	; 0x5a4 <Endpoint_Read_Control_Stream_LE+0x48>
     598:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
     59c:	81 93       	st	Z+, r24
     59e:	61 50       	subi	r22, 0x01	; 1
     5a0:	71 09       	sbc	r23, r1
     5a2:	b1 f7       	brne	.-20     	; 0x590 <Endpoint_Read_Control_Stream_LE+0x34>
     5a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5a8:	8b 77       	andi	r24, 0x7B	; 123
     5aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5ae:	df cf       	rjmp	.-66     	; 0x56e <Endpoint_Read_Control_Stream_LE+0x12>
     5b0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     5b4:	88 23       	and	r24, r24
     5b6:	51 f0       	breq	.+20     	; 0x5cc <Endpoint_Read_Control_Stream_LE+0x70>
     5b8:	85 30       	cpi	r24, 0x05	; 5
     5ba:	51 f0       	breq	.+20     	; 0x5d0 <Endpoint_Read_Control_Stream_LE+0x74>
     5bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5c0:	80 ff       	sbrs	r24, 0
     5c2:	f6 cf       	rjmp	.-20     	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x54>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	08 95       	ret
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	08 95       	ret
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	08 95       	ret

000005d4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5d4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <USB_ControlRequest+0x6>
     5d8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <USB_ControlRequest+0x7>
     5dc:	26 17       	cp	r18, r22
     5de:	37 07       	cpc	r19, r23
     5e0:	48 f0       	brcs	.+18     	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5e2:	61 15       	cp	r22, r1
     5e4:	71 05       	cpc	r23, r1
     5e6:	39 f4       	brne	.+14     	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5e8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5ec:	2e 77       	andi	r18, 0x7E	; 126
     5ee:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0x22>
     5f4:	b9 01       	movw	r22, r18
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5fa:	61 15       	cp	r22, r1
     5fc:	71 05       	cpc	r23, r1
     5fe:	79 f1       	breq	.+94     	; 0x65e <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     600:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     604:	88 23       	and	r24, r24
     606:	09 f4       	brne	.+2      	; 0x60a <Endpoint_Write_Control_PStream_LE+0x36>
     608:	3d c0       	rjmp	.+122    	; 0x684 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     60a:	85 30       	cpi	r24, 0x05	; 5
     60c:	09 f4       	brne	.+2      	; 0x610 <Endpoint_Write_Control_PStream_LE+0x3c>
     60e:	3c c0       	rjmp	.+120    	; 0x688 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     610:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     614:	83 fd       	sbrc	r24, 3
     616:	3a c0       	rjmp	.+116    	; 0x68c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     618:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     61c:	82 fd       	sbrc	r24, 2
     61e:	2c c0       	rjmp	.+88     	; 0x678 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     620:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  break;

		if (Endpoint_IsINReady())
     624:	80 ff       	sbrs	r24, 0
     626:	e9 cf       	rjmp	.-46     	; 0x5fa <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     628:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     62c:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     62e:	61 15       	cp	r22, r1
     630:	71 05       	cpc	r23, r1
     632:	59 f0       	breq	.+22     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x76>
     634:	88 30       	cpi	r24, 0x08	; 8
     636:	91 05       	cpc	r25, r1
     638:	40 f4       	brcc	.+16     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     63a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     63c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     640:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     642:	61 50       	subi	r22, 0x01	; 1
     644:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	f2 cf       	rjmp	.-28     	; 0x62e <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	08 97       	sbiw	r24, 0x08	; 8
     64e:	09 f0       	breq	.+2      	; 0x652 <Endpoint_Write_Control_PStream_LE+0x7e>
     650:	20 e0       	ldi	r18, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     652:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     656:	8e 77       	andi	r24, 0x7E	; 126
     658:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     65c:	ce cf       	rjmp	.-100    	; 0x5fa <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     65e:	21 11       	cpse	r18, r1
     660:	cf cf       	rjmp	.-98     	; 0x600 <Endpoint_Write_Control_PStream_LE+0x2c>
     662:	0a c0       	rjmp	.+20     	; 0x678 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     664:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     668:	88 23       	and	r24, r24
     66a:	61 f0       	breq	.+24     	; 0x684 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     66c:	85 30       	cpi	r24, 0x05	; 5
     66e:	61 f0       	breq	.+24     	; 0x688 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     670:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     674:	83 fd       	sbrc	r24, 3
     676:	0a c0       	rjmp	.+20     	; 0x68c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     678:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     67c:	82 ff       	sbrs	r24, 2
     67e:	f2 cf       	rjmp	.-28     	; 0x664 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     688:	83 e0       	ldi	r24, 0x03	; 3
     68a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     68c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     68e:	08 95       	ret

00000690 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     690:	98 2f       	mov	r25, r24
     692:	95 30       	cpi	r25, 0x05	; 5
     694:	68 f5       	brcc	.+90     	; 0x6f0 <Endpoint_ConfigureEndpoint_Prv+0x60>
     696:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     69a:	98 17       	cp	r25, r24
     69c:	39 f0       	breq	.+14     	; 0x6ac <Endpoint_ConfigureEndpoint_Prv+0x1c>
     69e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     6a2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6a6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <Endpoint_ConfigureEndpoint_Prv+0x22>
     6ac:	24 2f       	mov	r18, r20
     6ae:	76 2f       	mov	r23, r22
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	21 fd       	sbrc	r18, 1
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <Endpoint_ConfigureEndpoint_Prv+0x2a>
     6b6:	9f 5f       	subi	r25, 0xFF	; 255
     6b8:	ec cf       	rjmp	.-40     	; 0x692 <Endpoint_ConfigureEndpoint_Prv+0x2>
     6ba:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6be:	3e 7f       	andi	r19, 0xFE	; 254
     6c0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6c4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6c8:	3d 7f       	andi	r19, 0xFD	; 253
     6ca:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6ce:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6d2:	31 60       	ori	r19, 0x01	; 1
     6d4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7fc0eb>
     6d8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     6dc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     6e0:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
     6e4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     6e8:	27 fd       	sbrc	r18, 7
     6ea:	e5 cf       	rjmp	.-54     	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv+0x26>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	08 95       	ret
     6f0:	8f 70       	andi	r24, 0x0F	; 15
     6f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	08 95       	ret

000006fa <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6fa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     6fe:	87 ff       	sbrs	r24, 7
     700:	11 c0       	rjmp	.+34     	; 0x724 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     702:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     706:	82 fd       	sbrc	r24, 2
     708:	05 c0       	rjmp	.+10     	; 0x714 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     70a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     70e:	81 11       	cpse	r24, r1
     710:	f8 cf       	rjmp	.-16     	; 0x702 <Endpoint_ClearStatusStage+0x8>
     712:	11 c0       	rjmp	.+34     	; 0x736 <Endpoint_ClearStatusStage+0x3c>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     714:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     718:	8b 77       	andi	r24, 0x7B	; 123
     71a:	0b c0       	rjmp	.+22     	; 0x732 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     71c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     720:	88 23       	and	r24, r24
     722:	49 f0       	breq	.+18     	; 0x736 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     728:	80 ff       	sbrs	r24, 0
     72a:	f8 cf       	rjmp	.-16     	; 0x71c <Endpoint_ClearStatusStage+0x22>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     72c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     730:	8e 77       	andi	r24, 0x7E	; 126
     732:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     736:	08 95       	ret

00000738 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     738:	08 95       	ret

0000073a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     73a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     73e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <USB_INT_ClearAllInterrupts>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     742:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     746:	8f 77       	andi	r24, 0x7F	; 127
     748:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
				USBCON |=  (1 << USBE);
     74c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     750:	80 68       	ori	r24, 0x80	; 128
     752:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     756:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     75a:	8f 7d       	andi	r24, 0xDF	; 223
     75c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     764:	86 e0       	ldi	r24, 0x06	; 6
     766:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     768:	09 b4       	in	r0, 0x29	; 41
     76a:	00 fe       	sbrs	r0, 0
     76c:	fd cf       	rjmp	.-6      	; 0x768 <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     76e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     772:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     776:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     77a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     77e:	42 e0       	ldi	r20, 0x02	; 2
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 48 03 	call	0x690	; 0x690 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     788:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     78c:	8e 7f       	andi	r24, 0xFE	; 254
     78e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     792:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     796:	81 60       	ori	r24, 0x01	; 1
     798:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     79c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7a6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     7aa:	8e 7f       	andi	r24, 0xFE	; 254
     7ac:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7fc0e0>
     7b0:	08 95       	ret

000007b2 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     7b2:	e3 e6       	ldi	r30, 0x63	; 99
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	8e 7f       	andi	r24, 0xFE	; 254
     7ba:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <USB_IsInitialized>

	USB_ResetInterface();
     7c2:	0c 94 9d 03 	jmp	0x73a	; 0x73a <USB_ResetInterface>

000007c6 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7c6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     7ca:	08 95       	ret

000007cc <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7cc:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     7d0:	08 95       	ret

000007d2 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7d2:	1f 92       	push	r1
     7d4:	0f 92       	push	r0
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	0f 92       	push	r0
     7da:	11 24       	eor	r1, r1
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     7f4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     7f8:	82 ff       	sbrs	r24, 2
     7fa:	0b c0       	rjmp	.+22     	; 0x812 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     7fc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     800:	82 ff       	sbrs	r24, 2
     802:	07 c0       	rjmp	.+14     	; 0x812 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     804:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     808:	8b 7f       	andi	r24, 0xFB	; 251
     80a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     80e:	0e 94 9c 03 	call	0x738	; 0x738 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     812:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     816:	80 ff       	sbrs	r24, 0
     818:	18 c0       	rjmp	.+48     	; 0x84a <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     81a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     81e:	80 ff       	sbrs	r24, 0
     820:	14 c0       	rjmp	.+40     	; 0x84a <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     822:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     826:	8e 7f       	andi	r24, 0xFE	; 254
     828:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     82c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     830:	80 61       	ori	r24, 0x10	; 16
     832:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     836:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     83a:	80 62       	ori	r24, 0x20	; 32
     83c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     840:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     842:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     846:	0e 94 ee 04 	call	0x9dc	; 0x9dc <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     84a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     84e:	84 ff       	sbrs	r24, 4
     850:	30 c0       	rjmp	.+96     	; 0x8b2 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     852:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     856:	84 ff       	sbrs	r24, 4
     858:	2c c0       	rjmp	.+88     	; 0x8b2 <__vector_11+0xe0>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     862:	09 b4       	in	r0, 0x29	; 41
     864:	00 fe       	sbrs	r0, 0
     866:	fd cf       	rjmp	.-6      	; 0x862 <__vector_11+0x90>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     868:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
     86c:	8f 7d       	andi	r24, 0xDF	; 223
     86e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     872:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     876:	8f 7e       	andi	r24, 0xEF	; 239
     878:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     87c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     880:	8f 7e       	andi	r24, 0xEF	; 239
     882:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     886:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     88a:	81 60       	ori	r24, 0x01	; 1
     88c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     890:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_Device_ConfigurationNumber>
     894:	88 23       	and	r24, r24
     896:	11 f0       	breq	.+4      	; 0x89c <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
     898:	84 e0       	ldi	r24, 0x04	; 4
     89a:	07 c0       	rjmp	.+14     	; 0x8aa <__vector_11+0xd8>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     89c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     8a0:	87 fd       	sbrc	r24, 7
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__vector_11+0xd6>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__vector_11+0xd8>
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     8ae:	0e 94 d6 04 	call	0x9ac	; 0x9ac <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     8b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8b6:	83 ff       	sbrs	r24, 3
     8b8:	24 c0       	rjmp	.+72     	; 0x902 <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     8ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8be:	83 ff       	sbrs	r24, 3
     8c0:	20 c0       	rjmp	.+64     	; 0x902 <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     8c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     8c6:	87 7f       	andi	r24, 0xF7	; 247
     8c8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     8d2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
     8da:	8e 7f       	andi	r24, 0xFE	; 254
     8dc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8e4:	8e 7f       	andi	r24, 0xFE	; 254
     8e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
     8ee:	80 61       	ori	r24, 0x10	; 16
     8f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8f4:	42 e0       	ldi	r20, 0x02	; 2
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 48 03 	call	0x690	; 0x690 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     8fe:	0e 94 9c 03 	call	0x738	; 0x738 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	bf 91       	pop	r27
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     924:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     926:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB_DeviceState>
     92a:	88 23       	and	r24, r24
     92c:	a1 f0       	breq	.+40     	; 0x956 <USB_USBTask+0x32>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     92e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     932:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     934:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     938:	89 2f       	mov	r24, r25
     93a:	81 70       	andi	r24, 0x01	; 1
     93c:	90 fd       	sbrc	r25, 0
     93e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     940:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     942:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     946:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     94a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     94c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     950:	cf 70       	andi	r28, 0x0F	; 15
     952:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void) {
	#if (ARCH == ARCH_AVR8)
		/* Disable watchdog if enabled by bootloader/fuses */
		MCUSR &= ~(1 << WDRF);
     95a:	84 b7       	in	r24, 0x34	; 52
     95c:	87 7f       	andi	r24, 0xF7	; 247
     95e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	a8 95       	wdr
     966:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     96a:	88 61       	ori	r24, 0x18	; 24
     96c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     970:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
     974:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     982:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fc061>
     986:	0f be       	out	0x3f, r0	; 63
	/* Hardware Initialization */
	//LEDs_Init();
	//Buttons_Init();
	//ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	//ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     988:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USB_Init>

	/* Start the ADC conversion in free running mode */
	//ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));
	_ADS1299_MODE = ADS1299_MODE_WAKEUP;
     98c:	8a e0       	ldi	r24, 0x0A	; 10
     98e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ADS1299_MODE>
	// SPI Configuration (ddr_SPI = DDRB)
	ddr_SPI |= (1 << pin_MOSI) | (1 << pin_SCK) | (1 << pin_SS); //MOSI, SCK, SS are outputs
     992:	84 b1       	in	r24, 0x04	; 4
     994:	87 60       	ori	r24, 0x07	; 7
     996:	84 b9       	out	0x04, r24	; 4
	ddr_SPI &= ~(1 << pin_MISO);
     998:	23 98       	cbi	0x04, 3	; 4

	// Setting Clock rate to fck/16 and enabling SPI as master.
	SPCR = (1 << SPE) | (1 << MSTR) | (1<<SPI2X) | (1 << SPR0) | (0 << CPOL) | (0 << CPHA);
     99a:	81 e5       	ldi	r24, 0x51	; 81
     99c:	8c bd       	out	0x2c, r24	; 44
     99e:	08 95       	ret

000009a0 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void) {
	SetupHardware();
     9a0:	0e 94 ad 04 	call	0x95a	; 0x95a <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     9a4:	78 94       	sei

	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;) {
		USB_USBTask();
     9a6:	0e 94 92 04 	call	0x924	; 0x924 <USB_USBTask>
     9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <main+0x6>

000009ac <EVENT_USB_Device_Connect>:
}

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs, and
 *  configures the sample update and PWM timers.
 */
void EVENT_USB_Device_Connect(void) {
     9ac:	cf 93       	push	r28
	/* Indicate USB enumerating */
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     9ae:	c2 e0       	ldi	r28, 0x02	; 2
     9b0:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     9b4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
     9b8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     9bc:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     9c0:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <CurrentAudioSampleFrequency+0x3>
     9c4:	60 e8       	ldi	r22, 0x80	; 128
     9c6:	74 e8       	ldi	r23, 0x84	; 132
     9c8:	8e e1       	ldi	r24, 0x1E	; 30
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__udivmodsi4>
     9d0:	21 50       	subi	r18, 0x01	; 1
     9d2:	27 bd       	out	0x27, r18	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     9d4:	c4 bd       	out	0x24, r28	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     9d6:	c5 bd       	out	0x25, r28	; 37
}
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <EVENT_USB_Device_Disconnect>:
/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void) {
	/* Stop the sample reload timer */
	TCCR0B = 0;
     9dc:	15 bc       	out	0x25, r1	; 37

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
     9de:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     9e2:	08 95       	ret

000009e4 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9e4:	46 e5       	ldi	r20, 0x56	; 86
     9e6:	61 e4       	ldi	r22, 0x41	; 65
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	0c 94 48 03 	jmp	0x690	; 0x690 <Endpoint_ConfigureEndpoint_Prv>

000009ee <EVENT_USB_Device_ControlRequest>:

/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <EVENT_USB_Device_ControlRequest+0x6>
     9f4:	1f 92       	push	r1
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
     9fa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_ControlRequest+0x1>
     9fe:	8b 30       	cpi	r24, 0x0B	; 11
     a00:	51 f0       	breq	.+20     	; 0xa16 <EVENT_USB_Device_ControlRequest+0x28>
     a02:	18 f4       	brcc	.+6      	; 0xa0a <EVENT_USB_Device_ControlRequest+0x1c>
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	61 f1       	breq	.+88     	; 0xa60 <EVENT_USB_Device_ControlRequest+0x72>
     a08:	8f c0       	rjmp	.+286    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
     a0a:	81 38       	cpi	r24, 0x81	; 129
     a0c:	09 f4       	brne	.+2      	; 0xa10 <EVENT_USB_Device_ControlRequest+0x22>
     a0e:	67 c0       	rjmp	.+206    	; 0xade <EVENT_USB_Device_ControlRequest+0xf0>
     a10:	8f 3f       	cpi	r24, 0xFF	; 255
     a12:	c1 f0       	breq	.+48     	; 0xa44 <EVENT_USB_Device_ControlRequest+0x56>
     a14:	89 c0       	rjmp	.+274    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
     a16:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <EVENT_USB_Device_ControlRequest+0x32>
     a1e:	84 c0       	rjmp	.+264    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a24:	87 7f       	andi	r24, 0xF7	; 247
     a26:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a2a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <USB_ControlRequest+0x2>
     a34:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     a38:	23 2b       	or	r18, r19
     a3a:	09 f4       	brne	.+2      	; 0xa3e <EVENT_USB_Device_ControlRequest+0x50>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     a42:	72 c0       	rjmp	.+228    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>

			break;
		case AUDIO_REQ_GetStatus:
			/* Get Status request can be directed at either the interface or endpoint, neither is currently used
			 * according to the latest USB Audio 1.0 standard, but must be ACKed with no data when requested */
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
     a44:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     a48:	81 52       	subi	r24, 0x21	; 33
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	08 f0       	brcs	.+2      	; 0xa50 <EVENT_USB_Device_ControlRequest+0x62>
     a4e:	6c c0       	rjmp	.+216    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
     a50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a54:	87 7f       	andi	r24, 0xF7	; 247
     a56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a5a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Endpoint_ClearStatusStage>
     a5e:	64 c0       	rjmp	.+200    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
			}

			break;
		case AUDIO_REQ_SetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
     a60:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     a64:	82 32       	cpi	r24, 0x22	; 34
     a66:	09 f0       	breq	.+2      	; 0xa6a <EVENT_USB_Device_ControlRequest+0x7c>
     a68:	5f c0       	rjmp	.+190    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
				/* Extract out the relevant request information to get the target Endpoint address and control being set */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);

				/* Only handle SET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
     a6a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     a6e:	81 38       	cpi	r24, 0x81	; 129
     a70:	09 f0       	breq	.+2      	; 0xa74 <EVENT_USB_Device_ControlRequest+0x86>
     a72:	5a c0       	rjmp	.+180    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
     a74:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	09 f0       	breq	.+2      	; 0xa7e <EVENT_USB_Device_ControlRequest+0x90>
     a7c:	55 c0       	rjmp	.+170    	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
     a7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a82:	87 7f       	andi	r24, 0xF7	; 247
     a84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				{
					uint8_t SampleRate[3];

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(SampleRate, sizeof(SampleRate));
     a88:	63 e0       	ldi	r22, 0x03	; 3
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 ae 02 	call	0x55c	; 0x55c <Endpoint_Read_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     a98:	8e 77       	andi	r24, 0x7E	; 126
     a9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
					Endpoint_ClearIN();

					/* Set the new sampling frequency to the value given by the host */
					CurrentAudioSampleFrequency = (((uint32_t)SampleRate[2] << 16) | ((uint32_t)SampleRate[1] << 8) | (uint32_t)SampleRate[0]);
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	2a 81       	ldd	r18, Y+2	; 0x02
     aa2:	42 2f       	mov	r20, r18
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	76 2f       	mov	r23, r22
     aac:	65 2f       	mov	r22, r21
     aae:	54 2f       	mov	r21, r20
     ab0:	44 27       	eor	r20, r20
     ab2:	68 2b       	or	r22, r24
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	9a 01       	movw	r18, r20
     ab8:	ab 01       	movw	r20, r22
     aba:	28 2b       	or	r18, r24
     abc:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <CurrentAudioSampleFrequency>
     ac0:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     ac4:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     ac8:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <CurrentAudioSampleFrequency+0x3>

					/* Adjust sample reload timer to the new frequency */
					OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     acc:	60 e8       	ldi	r22, 0x80	; 128
     ace:	74 e8       	ldi	r23, 0x84	; 132
     ad0:	8e e1       	ldi	r24, 0x1E	; 30
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__udivmodsi4>
     ad8:	21 50       	subi	r18, 0x01	; 1
     ada:	27 bd       	out	0x27, r18	; 39
     adc:	25 c0       	rjmp	.+74     	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
				}
			}

			break;
		case AUDIO_REQ_GetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     ade:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_ControlRequest>
     ae2:	82 3a       	cpi	r24, 0xA2	; 162
     ae4:	09 f5       	brne	.+66     	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
				/* Extract out the relevant request information to get the target Endpoint address and control being retrieved */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);

				/* Only handle GET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
     ae6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x4>
     aea:	81 38       	cpi	r24, 0x81	; 129
     aec:	e9 f4       	brne	.+58     	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
     aee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x3>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	c9 f4       	brne	.+50     	; 0xb28 <EVENT_USB_Device_ControlRequest+0x13a>
				{
					uint8_t SampleRate[3];

					/* Convert the sampling rate value into the 24-bit format the host expects for the property */
					SampleRate[2] = (CurrentAudioSampleFrequency >> 16);
     af6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <CurrentAudioSampleFrequency>
     afa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <CurrentAudioSampleFrequency+0x1>
     afe:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <CurrentAudioSampleFrequency+0x2>
     b02:	2b 83       	std	Y+3, r18	; 0x03
					SampleRate[1] = (CurrentAudioSampleFrequency >> 8);
     b04:	9a 83       	std	Y+2, r25	; 0x02
					SampleRate[0] = (CurrentAudioSampleFrequency &  0xFF);
     b06:	89 83       	std	Y+1, r24	; 0x01
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b0c:	87 7f       	andi	r24, 0xF7	; 247
     b0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(SampleRate, sizeof(SampleRate));
     b12:	63 e0       	ldi	r22, 0x03	; 3
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Endpoint_Write_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b22:	8b 77       	andi	r24, 0x7B	; 123
     b24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
				}
			}

			break;
	}
}
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <__vector_19>:

// ISR to handle the reloading of the data endpoint with the next sample.
ISR(TIMER0_COMPA_vect, ISR_BLOCK) {
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	cf 93       	push	r28
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b58:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
     b5c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b5e:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b62:	89 2f       	mov	r24, r25
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	90 fd       	sbrc	r25, 0
     b68:	80 e8       	ldi	r24, 0x80	; 128
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b6a:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPADDR);

	/* Check if the current endpoint can be written to and that the audio interface is enabled */
	if (Endpoint_IsINReady() && StreamingAudioInterfaceSelected)
     b76:	80 ff       	sbrs	r24, 0
     b78:	14 c0       	rjmp	.+40     	; 0xba2 <__vector_19+0x6e>
     b7a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     b7e:	88 23       	and	r24, r24
     b80:	81 f0       	breq	.+32     	; 0xba2 <__vector_19+0x6e>
	{
		int16_t AudioSample;

		/* Generate random sample between -32768 and 32767 */
		AudioSample = (rand() % 65536) - 32768;
     b82:	0e 94 75 06 	call	0xcea	; 0xcea <rand>
     b86:	90 58       	subi	r25, 0x80	; 128
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b88:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
				UEDATX = (Data >> 8);
     b8c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
			 *          on its direction.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>

		/* Write the sample to the buffer */
		Endpoint_Write_16_LE(AudioSample);

		/* Check to see if the bank is now full */
		if (!(Endpoint_IsReadWriteAllowed()))
     b94:	85 fd       	sbrc	r24, 5
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <__vector_19+0x6e>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
     b9c:	8e 77       	andi	r24, 0x7E	; 126
     b9e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7fc0e8>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ba2:	cf 70       	andi	r28, 0x0F	; 15
     ba4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7fc0e9>
			Endpoint_ClearIN();
		}
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	cf 91       	pop	r28
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__mulsi3>:
     bcc:	ee 27       	eor	r30, r30
     bce:	ff 27       	eor	r31, r31

00000bd0 <__mulsi3_helper>:
     bd0:	aa 27       	eor	r26, r26
     bd2:	bb 27       	eor	r27, r27
     bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <__mulsi3_helper+0x16>
     bd6:	a2 0f       	add	r26, r18
     bd8:	b3 1f       	adc	r27, r19
     bda:	e4 1f       	adc	r30, r20
     bdc:	f5 1f       	adc	r31, r21
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	44 1f       	adc	r20, r20
     be4:	55 1f       	adc	r21, r21
     be6:	96 95       	lsr	r25
     be8:	87 95       	ror	r24
     bea:	77 95       	ror	r23
     bec:	67 95       	ror	r22
     bee:	98 f3       	brcs	.-26     	; 0xbd6 <__mulsi3_helper+0x6>
     bf0:	70 40       	sbci	r23, 0x00	; 0
     bf2:	a9 f7       	brne	.-22     	; 0xbde <__mulsi3_helper+0xe>
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	99 f7       	brne	.-26     	; 0xbde <__mulsi3_helper+0xe>
     bf8:	bd 01       	movw	r22, r26
     bfa:	cf 01       	movw	r24, r30
     bfc:	08 95       	ret

00000bfe <__udivmodsi4>:
     bfe:	a1 e2       	ldi	r26, 0x21	; 33
     c00:	1a 2e       	mov	r1, r26
     c02:	aa 1b       	sub	r26, r26
     c04:	bb 1b       	sub	r27, r27
     c06:	fd 01       	movw	r30, r26
     c08:	0d c0       	rjmp	.+26     	; 0xc24 <__udivmodsi4_ep>

00000c0a <__udivmodsi4_loop>:
     c0a:	aa 1f       	adc	r26, r26
     c0c:	bb 1f       	adc	r27, r27
     c0e:	ee 1f       	adc	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	a2 17       	cp	r26, r18
     c14:	b3 07       	cpc	r27, r19
     c16:	e4 07       	cpc	r30, r20
     c18:	f5 07       	cpc	r31, r21
     c1a:	20 f0       	brcs	.+8      	; 0xc24 <__udivmodsi4_ep>
     c1c:	a2 1b       	sub	r26, r18
     c1e:	b3 0b       	sbc	r27, r19
     c20:	e4 0b       	sbc	r30, r20
     c22:	f5 0b       	sbc	r31, r21

00000c24 <__udivmodsi4_ep>:
     c24:	66 1f       	adc	r22, r22
     c26:	77 1f       	adc	r23, r23
     c28:	88 1f       	adc	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	1a 94       	dec	r1
     c2e:	69 f7       	brne	.-38     	; 0xc0a <__udivmodsi4_loop>
     c30:	60 95       	com	r22
     c32:	70 95       	com	r23
     c34:	80 95       	com	r24
     c36:	90 95       	com	r25
     c38:	9b 01       	movw	r18, r22
     c3a:	ac 01       	movw	r20, r24
     c3c:	bd 01       	movw	r22, r26
     c3e:	cf 01       	movw	r24, r30
     c40:	08 95       	ret

00000c42 <__tablejump2__>:
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	05 90       	lpm	r0, Z+
     c48:	f4 91       	lpm	r31, Z
     c4a:	e0 2d       	mov	r30, r0
     c4c:	09 94       	ijmp

00000c4e <do_rand>:
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	ec 01       	movw	r28, r24
     c64:	68 81       	ld	r22, Y
     c66:	79 81       	ldd	r23, Y+1	; 0x01
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	61 15       	cp	r22, r1
     c6e:	71 05       	cpc	r23, r1
     c70:	81 05       	cpc	r24, r1
     c72:	91 05       	cpc	r25, r1
     c74:	21 f4       	brne	.+8      	; 0xc7e <do_rand+0x30>
     c76:	64 e2       	ldi	r22, 0x24	; 36
     c78:	79 ed       	ldi	r23, 0xD9	; 217
     c7a:	8b e5       	ldi	r24, 0x5B	; 91
     c7c:	97 e0       	ldi	r25, 0x07	; 7
     c7e:	2d e1       	ldi	r18, 0x1D	; 29
     c80:	33 ef       	ldi	r19, 0xF3	; 243
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	0e 94 24 09 	call	0x1248	; 0x1248 <__divmodsi4>
     c8a:	49 01       	movw	r8, r18
     c8c:	5a 01       	movw	r10, r20
     c8e:	27 ea       	ldi	r18, 0xA7	; 167
     c90:	31 e4       	ldi	r19, 0x41	; 65
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__mulsi3>
     c9a:	6b 01       	movw	r12, r22
     c9c:	7c 01       	movw	r14, r24
     c9e:	2c ee       	ldi	r18, 0xEC	; 236
     ca0:	34 ef       	ldi	r19, 0xF4	; 244
     ca2:	4f ef       	ldi	r20, 0xFF	; 255
     ca4:	5f ef       	ldi	r21, 0xFF	; 255
     ca6:	c5 01       	movw	r24, r10
     ca8:	b4 01       	movw	r22, r8
     caa:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__mulsi3>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	8c 0d       	add	r24, r12
     cb4:	9d 1d       	adc	r25, r13
     cb6:	ae 1d       	adc	r26, r14
     cb8:	bf 1d       	adc	r27, r15
     cba:	b7 ff       	sbrs	r27, 7
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <do_rand+0x76>
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	a1 09       	sbc	r26, r1
     cc2:	b0 48       	sbci	r27, 0x80	; 128
     cc4:	88 83       	st	Y, r24
     cc6:	99 83       	std	Y+1, r25	; 0x01
     cc8:	aa 83       	std	Y+2, r26	; 0x02
     cca:	bb 83       	std	Y+3, r27	; 0x03
     ccc:	9f 77       	andi	r25, 0x7F	; 127
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	08 95       	ret

00000ce4 <rand_r>:
     ce4:	0e 94 27 06 	call	0xc4e	; 0xc4e <do_rand>
     ce8:	08 95       	ret

00000cea <rand>:
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 27 06 	call	0xc4e	; 0xc4e <do_rand>
     cf2:	08 95       	ret

00000cf4 <srand>:
     cf4:	a0 e0       	ldi	r26, 0x00	; 0
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     cfc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d00:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     d04:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     d08:	08 95       	ret

00000d0a <vfprintf>:
     d0a:	ab e0       	ldi	r26, 0x0B	; 11
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	eb e8       	ldi	r30, 0x8B	; 139
     d10:	f6 e0       	ldi	r31, 0x06	; 6
     d12:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__prologue_saves__>
     d16:	6c 01       	movw	r12, r24
     d18:	7b 01       	movw	r14, r22
     d1a:	8a 01       	movw	r16, r20
     d1c:	fc 01       	movw	r30, r24
     d1e:	17 82       	std	Z+7, r1	; 0x07
     d20:	16 82       	std	Z+6, r1	; 0x06
     d22:	83 81       	ldd	r24, Z+3	; 0x03
     d24:	81 ff       	sbrs	r24, 1
     d26:	cf c1       	rjmp	.+926    	; 0x10c6 <vfprintf+0x3bc>
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	3c 01       	movw	r6, r24
     d2e:	f6 01       	movw	r30, r12
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	f7 01       	movw	r30, r14
     d34:	93 fd       	sbrc	r25, 3
     d36:	85 91       	lpm	r24, Z+
     d38:	93 ff       	sbrs	r25, 3
     d3a:	81 91       	ld	r24, Z+
     d3c:	7f 01       	movw	r14, r30
     d3e:	88 23       	and	r24, r24
     d40:	09 f4       	brne	.+2      	; 0xd44 <vfprintf+0x3a>
     d42:	bd c1       	rjmp	.+890    	; 0x10be <vfprintf+0x3b4>
     d44:	85 32       	cpi	r24, 0x25	; 37
     d46:	39 f4       	brne	.+14     	; 0xd56 <vfprintf+0x4c>
     d48:	93 fd       	sbrc	r25, 3
     d4a:	85 91       	lpm	r24, Z+
     d4c:	93 ff       	sbrs	r25, 3
     d4e:	81 91       	ld	r24, Z+
     d50:	7f 01       	movw	r14, r30
     d52:	85 32       	cpi	r24, 0x25	; 37
     d54:	29 f4       	brne	.+10     	; 0xd60 <vfprintf+0x56>
     d56:	b6 01       	movw	r22, r12
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
     d5e:	e7 cf       	rjmp	.-50     	; 0xd2e <vfprintf+0x24>
     d60:	91 2c       	mov	r9, r1
     d62:	21 2c       	mov	r2, r1
     d64:	31 2c       	mov	r3, r1
     d66:	ff e1       	ldi	r31, 0x1F	; 31
     d68:	f3 15       	cp	r31, r3
     d6a:	e0 f0       	brcs	.+56     	; 0xda4 <vfprintf+0x9a>
     d6c:	8b 32       	cpi	r24, 0x2B	; 43
     d6e:	79 f0       	breq	.+30     	; 0xd8e <vfprintf+0x84>
     d70:	38 f4       	brcc	.+14     	; 0xd80 <vfprintf+0x76>
     d72:	80 32       	cpi	r24, 0x20	; 32
     d74:	79 f0       	breq	.+30     	; 0xd94 <vfprintf+0x8a>
     d76:	83 32       	cpi	r24, 0x23	; 35
     d78:	a9 f4       	brne	.+42     	; 0xda4 <vfprintf+0x9a>
     d7a:	23 2d       	mov	r18, r3
     d7c:	20 61       	ori	r18, 0x10	; 16
     d7e:	10 c0       	rjmp	.+32     	; 0xda0 <vfprintf+0x96>
     d80:	8d 32       	cpi	r24, 0x2D	; 45
     d82:	59 f0       	breq	.+22     	; 0xd9a <vfprintf+0x90>
     d84:	80 33       	cpi	r24, 0x30	; 48
     d86:	71 f4       	brne	.+28     	; 0xda4 <vfprintf+0x9a>
     d88:	23 2d       	mov	r18, r3
     d8a:	21 60       	ori	r18, 0x01	; 1
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <vfprintf+0x96>
     d8e:	83 2d       	mov	r24, r3
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	38 2e       	mov	r3, r24
     d94:	e3 2d       	mov	r30, r3
     d96:	e4 60       	ori	r30, 0x04	; 4
     d98:	24 c0       	rjmp	.+72     	; 0xde2 <vfprintf+0xd8>
     d9a:	f3 2d       	mov	r31, r3
     d9c:	f8 60       	ori	r31, 0x08	; 8
     d9e:	27 c0       	rjmp	.+78     	; 0xdee <vfprintf+0xe4>
     da0:	32 2e       	mov	r3, r18
     da2:	29 c0       	rjmp	.+82     	; 0xdf6 <vfprintf+0xec>
     da4:	37 fc       	sbrc	r3, 7
     da6:	2f c0       	rjmp	.+94     	; 0xe06 <vfprintf+0xfc>
     da8:	20 ed       	ldi	r18, 0xD0	; 208
     daa:	28 0f       	add	r18, r24
     dac:	2a 30       	cpi	r18, 0x0A	; 10
     dae:	98 f4       	brcc	.+38     	; 0xdd6 <vfprintf+0xcc>
     db0:	36 fe       	sbrs	r3, 6
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <vfprintf+0xb8>
     db4:	89 2d       	mov	r24, r9
     db6:	6a e0       	ldi	r22, 0x0A	; 10
     db8:	0e 94 1b 09 	call	0x1236	; 0x1236 <__mulqi3>
     dbc:	92 2e       	mov	r9, r18
     dbe:	98 0e       	add	r9, r24
     dc0:	1a c0       	rjmp	.+52     	; 0xdf6 <vfprintf+0xec>
     dc2:	82 2d       	mov	r24, r2
     dc4:	6a e0       	ldi	r22, 0x0A	; 10
     dc6:	0e 94 1b 09 	call	0x1236	; 0x1236 <__mulqi3>
     dca:	22 2e       	mov	r2, r18
     dcc:	28 0e       	add	r2, r24
     dce:	83 2d       	mov	r24, r3
     dd0:	80 62       	ori	r24, 0x20	; 32
     dd2:	38 2e       	mov	r3, r24
     dd4:	10 c0       	rjmp	.+32     	; 0xdf6 <vfprintf+0xec>
     dd6:	8e 32       	cpi	r24, 0x2E	; 46
     dd8:	31 f4       	brne	.+12     	; 0xde6 <vfprintf+0xdc>
     dda:	36 fc       	sbrc	r3, 6
     ddc:	70 c1       	rjmp	.+736    	; 0x10be <vfprintf+0x3b4>
     dde:	e3 2d       	mov	r30, r3
     de0:	e0 64       	ori	r30, 0x40	; 64
     de2:	3e 2e       	mov	r3, r30
     de4:	08 c0       	rjmp	.+16     	; 0xdf6 <vfprintf+0xec>
     de6:	8c 36       	cpi	r24, 0x6C	; 108
     de8:	21 f4       	brne	.+8      	; 0xdf2 <vfprintf+0xe8>
     dea:	f3 2d       	mov	r31, r3
     dec:	f0 68       	ori	r31, 0x80	; 128
     dee:	3f 2e       	mov	r3, r31
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <vfprintf+0xec>
     df2:	88 36       	cpi	r24, 0x68	; 104
     df4:	41 f4       	brne	.+16     	; 0xe06 <vfprintf+0xfc>
     df6:	f7 01       	movw	r30, r14
     df8:	93 fd       	sbrc	r25, 3
     dfa:	85 91       	lpm	r24, Z+
     dfc:	93 ff       	sbrs	r25, 3
     dfe:	81 91       	ld	r24, Z+
     e00:	7f 01       	movw	r14, r30
     e02:	81 11       	cpse	r24, r1
     e04:	b0 cf       	rjmp	.-160    	; 0xd66 <vfprintf+0x5c>
     e06:	98 2f       	mov	r25, r24
     e08:	9f 7d       	andi	r25, 0xDF	; 223
     e0a:	95 54       	subi	r25, 0x45	; 69
     e0c:	93 30       	cpi	r25, 0x03	; 3
     e0e:	28 f4       	brcc	.+10     	; 0xe1a <vfprintf+0x110>
     e10:	0c 5f       	subi	r16, 0xFC	; 252
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	2f e3       	ldi	r18, 0x3F	; 63
     e16:	29 83       	std	Y+1, r18	; 0x01
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <vfprintf+0x12a>
     e1a:	83 36       	cpi	r24, 0x63	; 99
     e1c:	31 f0       	breq	.+12     	; 0xe2a <vfprintf+0x120>
     e1e:	83 37       	cpi	r24, 0x73	; 115
     e20:	71 f0       	breq	.+28     	; 0xe3e <vfprintf+0x134>
     e22:	83 35       	cpi	r24, 0x53	; 83
     e24:	09 f0       	breq	.+2      	; 0xe28 <vfprintf+0x11e>
     e26:	59 c0       	rjmp	.+178    	; 0xeda <vfprintf+0x1d0>
     e28:	21 c0       	rjmp	.+66     	; 0xe6c <vfprintf+0x162>
     e2a:	f8 01       	movw	r30, r16
     e2c:	80 81       	ld	r24, Z
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	0e 5f       	subi	r16, 0xFE	; 254
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	88 24       	eor	r8, r8
     e36:	83 94       	inc	r8
     e38:	91 2c       	mov	r9, r1
     e3a:	53 01       	movw	r10, r6
     e3c:	13 c0       	rjmp	.+38     	; 0xe64 <vfprintf+0x15a>
     e3e:	28 01       	movw	r4, r16
     e40:	f2 e0       	ldi	r31, 0x02	; 2
     e42:	4f 0e       	add	r4, r31
     e44:	51 1c       	adc	r5, r1
     e46:	f8 01       	movw	r30, r16
     e48:	a0 80       	ld	r10, Z
     e4a:	b1 80       	ldd	r11, Z+1	; 0x01
     e4c:	36 fe       	sbrs	r3, 6
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x14c>
     e50:	69 2d       	mov	r22, r9
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x150>
     e56:	6f ef       	ldi	r22, 0xFF	; 255
     e58:	7f ef       	ldi	r23, 0xFF	; 255
     e5a:	c5 01       	movw	r24, r10
     e5c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <strnlen>
     e60:	4c 01       	movw	r8, r24
     e62:	82 01       	movw	r16, r4
     e64:	f3 2d       	mov	r31, r3
     e66:	ff 77       	andi	r31, 0x7F	; 127
     e68:	3f 2e       	mov	r3, r31
     e6a:	16 c0       	rjmp	.+44     	; 0xe98 <vfprintf+0x18e>
     e6c:	28 01       	movw	r4, r16
     e6e:	22 e0       	ldi	r18, 0x02	; 2
     e70:	42 0e       	add	r4, r18
     e72:	51 1c       	adc	r5, r1
     e74:	f8 01       	movw	r30, r16
     e76:	a0 80       	ld	r10, Z
     e78:	b1 80       	ldd	r11, Z+1	; 0x01
     e7a:	36 fe       	sbrs	r3, 6
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <vfprintf+0x17a>
     e7e:	69 2d       	mov	r22, r9
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x17e>
     e84:	6f ef       	ldi	r22, 0xFF	; 255
     e86:	7f ef       	ldi	r23, 0xFF	; 255
     e88:	c5 01       	movw	r24, r10
     e8a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <strnlen_P>
     e8e:	4c 01       	movw	r8, r24
     e90:	f3 2d       	mov	r31, r3
     e92:	f0 68       	ori	r31, 0x80	; 128
     e94:	3f 2e       	mov	r3, r31
     e96:	82 01       	movw	r16, r4
     e98:	33 fc       	sbrc	r3, 3
     e9a:	1b c0       	rjmp	.+54     	; 0xed2 <vfprintf+0x1c8>
     e9c:	82 2d       	mov	r24, r2
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	88 16       	cp	r8, r24
     ea2:	99 06       	cpc	r9, r25
     ea4:	b0 f4       	brcc	.+44     	; 0xed2 <vfprintf+0x1c8>
     ea6:	b6 01       	movw	r22, r12
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
     eb0:	2a 94       	dec	r2
     eb2:	f4 cf       	rjmp	.-24     	; 0xe9c <vfprintf+0x192>
     eb4:	f5 01       	movw	r30, r10
     eb6:	37 fc       	sbrc	r3, 7
     eb8:	85 91       	lpm	r24, Z+
     eba:	37 fe       	sbrs	r3, 7
     ebc:	81 91       	ld	r24, Z+
     ebe:	5f 01       	movw	r10, r30
     ec0:	b6 01       	movw	r22, r12
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
     ec8:	21 10       	cpse	r2, r1
     eca:	2a 94       	dec	r2
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	82 1a       	sub	r8, r18
     ed0:	91 08       	sbc	r9, r1
     ed2:	81 14       	cp	r8, r1
     ed4:	91 04       	cpc	r9, r1
     ed6:	71 f7       	brne	.-36     	; 0xeb4 <vfprintf+0x1aa>
     ed8:	e8 c0       	rjmp	.+464    	; 0x10aa <vfprintf+0x3a0>
     eda:	84 36       	cpi	r24, 0x64	; 100
     edc:	11 f0       	breq	.+4      	; 0xee2 <vfprintf+0x1d8>
     ede:	89 36       	cpi	r24, 0x69	; 105
     ee0:	41 f5       	brne	.+80     	; 0xf32 <vfprintf+0x228>
     ee2:	f8 01       	movw	r30, r16
     ee4:	37 fe       	sbrs	r3, 7
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <vfprintf+0x1ec>
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	0c 5f       	subi	r16, 0xFC	; 252
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	08 c0       	rjmp	.+16     	; 0xf06 <vfprintf+0x1fc>
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	07 2e       	mov	r0, r23
     efc:	00 0c       	add	r0, r0
     efe:	88 0b       	sbc	r24, r24
     f00:	99 0b       	sbc	r25, r25
     f02:	0e 5f       	subi	r16, 0xFE	; 254
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	f3 2d       	mov	r31, r3
     f08:	ff 76       	andi	r31, 0x6F	; 111
     f0a:	3f 2e       	mov	r3, r31
     f0c:	97 ff       	sbrs	r25, 7
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <vfprintf+0x218>
     f10:	90 95       	com	r25
     f12:	80 95       	com	r24
     f14:	70 95       	com	r23
     f16:	61 95       	neg	r22
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	f0 68       	ori	r31, 0x80	; 128
     f20:	3f 2e       	mov	r3, r31
     f22:	2a e0       	ldi	r18, 0x0A	; 10
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	a3 01       	movw	r20, r6
     f28:	0e 94 bb 08 	call	0x1176	; 0x1176 <__ultoa_invert>
     f2c:	88 2e       	mov	r8, r24
     f2e:	86 18       	sub	r8, r6
     f30:	45 c0       	rjmp	.+138    	; 0xfbc <vfprintf+0x2b2>
     f32:	85 37       	cpi	r24, 0x75	; 117
     f34:	31 f4       	brne	.+12     	; 0xf42 <vfprintf+0x238>
     f36:	23 2d       	mov	r18, r3
     f38:	2f 7e       	andi	r18, 0xEF	; 239
     f3a:	b2 2e       	mov	r11, r18
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	25 c0       	rjmp	.+74     	; 0xf8c <vfprintf+0x282>
     f42:	93 2d       	mov	r25, r3
     f44:	99 7f       	andi	r25, 0xF9	; 249
     f46:	b9 2e       	mov	r11, r25
     f48:	8f 36       	cpi	r24, 0x6F	; 111
     f4a:	c1 f0       	breq	.+48     	; 0xf7c <vfprintf+0x272>
     f4c:	18 f4       	brcc	.+6      	; 0xf54 <vfprintf+0x24a>
     f4e:	88 35       	cpi	r24, 0x58	; 88
     f50:	79 f0       	breq	.+30     	; 0xf70 <vfprintf+0x266>
     f52:	b5 c0       	rjmp	.+362    	; 0x10be <vfprintf+0x3b4>
     f54:	80 37       	cpi	r24, 0x70	; 112
     f56:	19 f0       	breq	.+6      	; 0xf5e <vfprintf+0x254>
     f58:	88 37       	cpi	r24, 0x78	; 120
     f5a:	21 f0       	breq	.+8      	; 0xf64 <vfprintf+0x25a>
     f5c:	b0 c0       	rjmp	.+352    	; 0x10be <vfprintf+0x3b4>
     f5e:	e9 2f       	mov	r30, r25
     f60:	e0 61       	ori	r30, 0x10	; 16
     f62:	be 2e       	mov	r11, r30
     f64:	b4 fe       	sbrs	r11, 4
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <vfprintf+0x278>
     f68:	fb 2d       	mov	r31, r11
     f6a:	f4 60       	ori	r31, 0x04	; 4
     f6c:	bf 2e       	mov	r11, r31
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <vfprintf+0x278>
     f70:	34 fe       	sbrs	r3, 4
     f72:	0a c0       	rjmp	.+20     	; 0xf88 <vfprintf+0x27e>
     f74:	29 2f       	mov	r18, r25
     f76:	26 60       	ori	r18, 0x06	; 6
     f78:	b2 2e       	mov	r11, r18
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0x27e>
     f7c:	28 e0       	ldi	r18, 0x08	; 8
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <vfprintf+0x282>
     f82:	20 e1       	ldi	r18, 0x10	; 16
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x282>
     f88:	20 e1       	ldi	r18, 0x10	; 16
     f8a:	32 e0       	ldi	r19, 0x02	; 2
     f8c:	f8 01       	movw	r30, r16
     f8e:	b7 fe       	sbrs	r11, 7
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <vfprintf+0x296>
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	0c 5f       	subi	r16, 0xFC	; 252
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	06 c0       	rjmp	.+12     	; 0xfac <vfprintf+0x2a2>
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 5f       	subi	r16, 0xFE	; 254
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	a3 01       	movw	r20, r6
     fae:	0e 94 bb 08 	call	0x1176	; 0x1176 <__ultoa_invert>
     fb2:	88 2e       	mov	r8, r24
     fb4:	86 18       	sub	r8, r6
     fb6:	fb 2d       	mov	r31, r11
     fb8:	ff 77       	andi	r31, 0x7F	; 127
     fba:	3f 2e       	mov	r3, r31
     fbc:	36 fe       	sbrs	r3, 6
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <vfprintf+0x2d0>
     fc0:	23 2d       	mov	r18, r3
     fc2:	2e 7f       	andi	r18, 0xFE	; 254
     fc4:	a2 2e       	mov	r10, r18
     fc6:	89 14       	cp	r8, r9
     fc8:	58 f4       	brcc	.+22     	; 0xfe0 <vfprintf+0x2d6>
     fca:	34 fe       	sbrs	r3, 4
     fcc:	0b c0       	rjmp	.+22     	; 0xfe4 <vfprintf+0x2da>
     fce:	32 fc       	sbrc	r3, 2
     fd0:	09 c0       	rjmp	.+18     	; 0xfe4 <vfprintf+0x2da>
     fd2:	83 2d       	mov	r24, r3
     fd4:	8e 7e       	andi	r24, 0xEE	; 238
     fd6:	a8 2e       	mov	r10, r24
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <vfprintf+0x2da>
     fda:	b8 2c       	mov	r11, r8
     fdc:	a3 2c       	mov	r10, r3
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <vfprintf+0x2dc>
     fe0:	b8 2c       	mov	r11, r8
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <vfprintf+0x2dc>
     fe4:	b9 2c       	mov	r11, r9
     fe6:	a4 fe       	sbrs	r10, 4
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <vfprintf+0x2fe>
     fea:	fe 01       	movw	r30, r28
     fec:	e8 0d       	add	r30, r8
     fee:	f1 1d       	adc	r31, r1
     ff0:	80 81       	ld	r24, Z
     ff2:	80 33       	cpi	r24, 0x30	; 48
     ff4:	21 f4       	brne	.+8      	; 0xffe <vfprintf+0x2f4>
     ff6:	9a 2d       	mov	r25, r10
     ff8:	99 7e       	andi	r25, 0xE9	; 233
     ffa:	a9 2e       	mov	r10, r25
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <vfprintf+0x306>
     ffe:	a2 fe       	sbrs	r10, 2
    1000:	06 c0       	rjmp	.+12     	; 0x100e <vfprintf+0x304>
    1002:	b3 94       	inc	r11
    1004:	b3 94       	inc	r11
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <vfprintf+0x306>
    1008:	8a 2d       	mov	r24, r10
    100a:	86 78       	andi	r24, 0x86	; 134
    100c:	09 f0       	breq	.+2      	; 0x1010 <vfprintf+0x306>
    100e:	b3 94       	inc	r11
    1010:	a3 fc       	sbrc	r10, 3
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <vfprintf+0x32c>
    1014:	a0 fe       	sbrs	r10, 0
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <vfprintf+0x31a>
    1018:	b2 14       	cp	r11, r2
    101a:	88 f4       	brcc	.+34     	; 0x103e <vfprintf+0x334>
    101c:	28 0c       	add	r2, r8
    101e:	92 2c       	mov	r9, r2
    1020:	9b 18       	sub	r9, r11
    1022:	0e c0       	rjmp	.+28     	; 0x1040 <vfprintf+0x336>
    1024:	b2 14       	cp	r11, r2
    1026:	60 f4       	brcc	.+24     	; 0x1040 <vfprintf+0x336>
    1028:	b6 01       	movw	r22, r12
    102a:	80 e2       	ldi	r24, 0x20	; 32
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
    1032:	b3 94       	inc	r11
    1034:	f7 cf       	rjmp	.-18     	; 0x1024 <vfprintf+0x31a>
    1036:	b2 14       	cp	r11, r2
    1038:	18 f4       	brcc	.+6      	; 0x1040 <vfprintf+0x336>
    103a:	2b 18       	sub	r2, r11
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <vfprintf+0x338>
    103e:	98 2c       	mov	r9, r8
    1040:	21 2c       	mov	r2, r1
    1042:	a4 fe       	sbrs	r10, 4
    1044:	10 c0       	rjmp	.+32     	; 0x1066 <vfprintf+0x35c>
    1046:	b6 01       	movw	r22, r12
    1048:	80 e3       	ldi	r24, 0x30	; 48
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
    1050:	a2 fe       	sbrs	r10, 2
    1052:	17 c0       	rjmp	.+46     	; 0x1082 <vfprintf+0x378>
    1054:	a1 fc       	sbrc	r10, 1
    1056:	03 c0       	rjmp	.+6      	; 0x105e <vfprintf+0x354>
    1058:	88 e7       	ldi	r24, 0x78	; 120
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0x358>
    105e:	88 e5       	ldi	r24, 0x58	; 88
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	b6 01       	movw	r22, r12
    1064:	0c c0       	rjmp	.+24     	; 0x107e <vfprintf+0x374>
    1066:	8a 2d       	mov	r24, r10
    1068:	86 78       	andi	r24, 0x86	; 134
    106a:	59 f0       	breq	.+22     	; 0x1082 <vfprintf+0x378>
    106c:	a1 fe       	sbrs	r10, 1
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <vfprintf+0x36a>
    1070:	8b e2       	ldi	r24, 0x2B	; 43
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <vfprintf+0x36c>
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	a7 fc       	sbrc	r10, 7
    1078:	8d e2       	ldi	r24, 0x2D	; 45
    107a:	b6 01       	movw	r22, r12
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
    1082:	89 14       	cp	r8, r9
    1084:	38 f4       	brcc	.+14     	; 0x1094 <vfprintf+0x38a>
    1086:	b6 01       	movw	r22, r12
    1088:	80 e3       	ldi	r24, 0x30	; 48
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
    1090:	9a 94       	dec	r9
    1092:	f7 cf       	rjmp	.-18     	; 0x1082 <vfprintf+0x378>
    1094:	8a 94       	dec	r8
    1096:	f3 01       	movw	r30, r6
    1098:	e8 0d       	add	r30, r8
    109a:	f1 1d       	adc	r31, r1
    109c:	80 81       	ld	r24, Z
    109e:	b6 01       	movw	r22, r12
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
    10a6:	81 10       	cpse	r8, r1
    10a8:	f5 cf       	rjmp	.-22     	; 0x1094 <vfprintf+0x38a>
    10aa:	22 20       	and	r2, r2
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <vfprintf+0x3a6>
    10ae:	3f ce       	rjmp	.-898    	; 0xd2e <vfprintf+0x24>
    10b0:	b6 01       	movw	r22, r12
    10b2:	80 e2       	ldi	r24, 0x20	; 32
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <fputc>
    10ba:	2a 94       	dec	r2
    10bc:	f6 cf       	rjmp	.-20     	; 0x10aa <vfprintf+0x3a0>
    10be:	f6 01       	movw	r30, r12
    10c0:	86 81       	ldd	r24, Z+6	; 0x06
    10c2:	97 81       	ldd	r25, Z+7	; 0x07
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <vfprintf+0x3c0>
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	9f ef       	ldi	r25, 0xFF	; 255
    10ca:	2b 96       	adiw	r28, 0x0b	; 11
    10cc:	e2 e1       	ldi	r30, 0x12	; 18
    10ce:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__epilogue_restores__>

000010d2 <strnlen_P>:
    10d2:	fc 01       	movw	r30, r24
    10d4:	05 90       	lpm	r0, Z+
    10d6:	61 50       	subi	r22, 0x01	; 1
    10d8:	70 40       	sbci	r23, 0x00	; 0
    10da:	01 10       	cpse	r0, r1
    10dc:	d8 f7       	brcc	.-10     	; 0x10d4 <strnlen_P+0x2>
    10de:	80 95       	com	r24
    10e0:	90 95       	com	r25
    10e2:	8e 0f       	add	r24, r30
    10e4:	9f 1f       	adc	r25, r31
    10e6:	08 95       	ret

000010e8 <strnlen>:
    10e8:	fc 01       	movw	r30, r24
    10ea:	61 50       	subi	r22, 0x01	; 1
    10ec:	70 40       	sbci	r23, 0x00	; 0
    10ee:	01 90       	ld	r0, Z+
    10f0:	01 10       	cpse	r0, r1
    10f2:	d8 f7       	brcc	.-10     	; 0x10ea <strnlen+0x2>
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	8e 0f       	add	r24, r30
    10fa:	9f 1f       	adc	r25, r31
    10fc:	08 95       	ret

000010fe <fputc>:
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	fb 01       	movw	r30, r22
    1108:	23 81       	ldd	r18, Z+3	; 0x03
    110a:	21 fd       	sbrc	r18, 1
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <fputc+0x16>
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	9f ef       	ldi	r25, 0xFF	; 255
    1112:	2c c0       	rjmp	.+88     	; 0x116c <fputc+0x6e>
    1114:	22 ff       	sbrs	r18, 2
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <fputc+0x46>
    1118:	46 81       	ldd	r20, Z+6	; 0x06
    111a:	57 81       	ldd	r21, Z+7	; 0x07
    111c:	24 81       	ldd	r18, Z+4	; 0x04
    111e:	35 81       	ldd	r19, Z+5	; 0x05
    1120:	42 17       	cp	r20, r18
    1122:	53 07       	cpc	r21, r19
    1124:	44 f4       	brge	.+16     	; 0x1136 <fputc+0x38>
    1126:	a0 81       	ld	r26, Z
    1128:	b1 81       	ldd	r27, Z+1	; 0x01
    112a:	9d 01       	movw	r18, r26
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	31 83       	std	Z+1, r19	; 0x01
    1132:	20 83       	st	Z, r18
    1134:	8c 93       	st	X, r24
    1136:	26 81       	ldd	r18, Z+6	; 0x06
    1138:	37 81       	ldd	r19, Z+7	; 0x07
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	37 83       	std	Z+7, r19	; 0x07
    1140:	26 83       	std	Z+6, r18	; 0x06
    1142:	14 c0       	rjmp	.+40     	; 0x116c <fputc+0x6e>
    1144:	8b 01       	movw	r16, r22
    1146:	ec 01       	movw	r28, r24
    1148:	fb 01       	movw	r30, r22
    114a:	00 84       	ldd	r0, Z+8	; 0x08
    114c:	f1 85       	ldd	r31, Z+9	; 0x09
    114e:	e0 2d       	mov	r30, r0
    1150:	09 95       	icall
    1152:	89 2b       	or	r24, r25
    1154:	e1 f6       	brne	.-72     	; 0x110e <fputc+0x10>
    1156:	d8 01       	movw	r26, r16
    1158:	16 96       	adiw	r26, 0x06	; 6
    115a:	8d 91       	ld	r24, X+
    115c:	9c 91       	ld	r25, X
    115e:	17 97       	sbiw	r26, 0x07	; 7
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	17 96       	adiw	r26, 0x07	; 7
    1164:	9c 93       	st	X, r25
    1166:	8e 93       	st	-X, r24
    1168:	16 97       	sbiw	r26, 0x06	; 6
    116a:	ce 01       	movw	r24, r28
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <__ultoa_invert>:
    1176:	fa 01       	movw	r30, r20
    1178:	aa 27       	eor	r26, r26
    117a:	28 30       	cpi	r18, 0x08	; 8
    117c:	61 f1       	breq	.+88     	; 0x11d6 <__ultoa_invert+0x60>
    117e:	20 31       	cpi	r18, 0x10	; 16
    1180:	91 f1       	breq	.+100    	; 0x11e6 <__ultoa_invert+0x70>
    1182:	e8 94       	clt
    1184:	6f 93       	push	r22
    1186:	6e 7f       	andi	r22, 0xFE	; 254
    1188:	6e 5f       	subi	r22, 0xFE	; 254
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	af 4f       	sbci	r26, 0xFF	; 255
    1192:	b1 e0       	ldi	r27, 0x01	; 1
    1194:	40 d0       	rcall	.+128    	; 0x1216 <__ultoa_invert+0xa0>
    1196:	b4 e0       	ldi	r27, 0x04	; 4
    1198:	3e d0       	rcall	.+124    	; 0x1216 <__ultoa_invert+0xa0>
    119a:	67 0f       	add	r22, r23
    119c:	78 1f       	adc	r23, r24
    119e:	89 1f       	adc	r24, r25
    11a0:	9a 1f       	adc	r25, r26
    11a2:	a1 1d       	adc	r26, r1
    11a4:	68 0f       	add	r22, r24
    11a6:	79 1f       	adc	r23, r25
    11a8:	8a 1f       	adc	r24, r26
    11aa:	91 1d       	adc	r25, r1
    11ac:	a1 1d       	adc	r26, r1
    11ae:	6a 0f       	add	r22, r26
    11b0:	71 1d       	adc	r23, r1
    11b2:	81 1d       	adc	r24, r1
    11b4:	91 1d       	adc	r25, r1
    11b6:	a1 1d       	adc	r26, r1
    11b8:	22 d0       	rcall	.+68     	; 0x11fe <__ultoa_invert+0x88>
    11ba:	09 f4       	brne	.+2      	; 0x11be <__ultoa_invert+0x48>
    11bc:	68 94       	set
    11be:	3f 91       	pop	r19
    11c0:	06 2e       	mov	r0, r22
    11c2:	00 0c       	add	r0, r0
    11c4:	30 19       	sub	r19, r0
    11c6:	00 0c       	add	r0, r0
    11c8:	00 0c       	add	r0, r0
    11ca:	30 19       	sub	r19, r0
    11cc:	30 5d       	subi	r19, 0xD0	; 208
    11ce:	31 93       	st	Z+, r19
    11d0:	ce f6       	brtc	.-78     	; 0x1184 <__ultoa_invert+0xe>
    11d2:	cf 01       	movw	r24, r30
    11d4:	08 95       	ret
    11d6:	46 2f       	mov	r20, r22
    11d8:	47 70       	andi	r20, 0x07	; 7
    11da:	40 5d       	subi	r20, 0xD0	; 208
    11dc:	41 93       	st	Z+, r20
    11de:	b3 e0       	ldi	r27, 0x03	; 3
    11e0:	0f d0       	rcall	.+30     	; 0x1200 <__ultoa_invert+0x8a>
    11e2:	c9 f7       	brne	.-14     	; 0x11d6 <__ultoa_invert+0x60>
    11e4:	f6 cf       	rjmp	.-20     	; 0x11d2 <__ultoa_invert+0x5c>
    11e6:	46 2f       	mov	r20, r22
    11e8:	4f 70       	andi	r20, 0x0F	; 15
    11ea:	40 5d       	subi	r20, 0xD0	; 208
    11ec:	4a 33       	cpi	r20, 0x3A	; 58
    11ee:	18 f0       	brcs	.+6      	; 0x11f6 <__ultoa_invert+0x80>
    11f0:	49 5d       	subi	r20, 0xD9	; 217
    11f2:	31 fd       	sbrc	r19, 1
    11f4:	40 52       	subi	r20, 0x20	; 32
    11f6:	41 93       	st	Z+, r20
    11f8:	02 d0       	rcall	.+4      	; 0x11fe <__ultoa_invert+0x88>
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <__ultoa_invert+0x70>
    11fc:	ea cf       	rjmp	.-44     	; 0x11d2 <__ultoa_invert+0x5c>
    11fe:	b4 e0       	ldi	r27, 0x04	; 4
    1200:	a6 95       	lsr	r26
    1202:	97 95       	ror	r25
    1204:	87 95       	ror	r24
    1206:	77 95       	ror	r23
    1208:	67 95       	ror	r22
    120a:	ba 95       	dec	r27
    120c:	c9 f7       	brne	.-14     	; 0x1200 <__ultoa_invert+0x8a>
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	61 05       	cpc	r22, r1
    1212:	71 05       	cpc	r23, r1
    1214:	08 95       	ret
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	0a 2e       	mov	r0, r26
    121c:	06 94       	lsr	r0
    121e:	57 95       	ror	r21
    1220:	47 95       	ror	r20
    1222:	37 95       	ror	r19
    1224:	27 95       	ror	r18
    1226:	ba 95       	dec	r27
    1228:	c9 f7       	brne	.-14     	; 0x121c <__ultoa_invert+0xa6>
    122a:	62 0f       	add	r22, r18
    122c:	73 1f       	adc	r23, r19
    122e:	84 1f       	adc	r24, r20
    1230:	95 1f       	adc	r25, r21
    1232:	a0 1d       	adc	r26, r0
    1234:	08 95       	ret

00001236 <__mulqi3>:
    1236:	00 24       	eor	r0, r0

00001238 <__mulqi3_loop>:
    1238:	80 fd       	sbrc	r24, 0
    123a:	06 0e       	add	r0, r22
    123c:	66 0f       	add	r22, r22
    123e:	11 f0       	breq	.+4      	; 0x1244 <__mulqi3_exit>
    1240:	86 95       	lsr	r24
    1242:	d1 f7       	brne	.-12     	; 0x1238 <__mulqi3_loop>

00001244 <__mulqi3_exit>:
    1244:	80 2d       	mov	r24, r0
    1246:	08 95       	ret

00001248 <__divmodsi4>:
    1248:	05 2e       	mov	r0, r21
    124a:	97 fb       	bst	r25, 7
    124c:	1e f4       	brtc	.+6      	; 0x1254 <__divmodsi4+0xc>
    124e:	00 94       	com	r0
    1250:	0e 94 3b 09 	call	0x1276	; 0x1276 <__negsi2>
    1254:	57 fd       	sbrc	r21, 7
    1256:	07 d0       	rcall	.+14     	; 0x1266 <__divmodsi4_neg2>
    1258:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__udivmodsi4>
    125c:	07 fc       	sbrc	r0, 7
    125e:	03 d0       	rcall	.+6      	; 0x1266 <__divmodsi4_neg2>
    1260:	4e f4       	brtc	.+18     	; 0x1274 <__divmodsi4_exit>
    1262:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__negsi2>

00001266 <__divmodsi4_neg2>:
    1266:	50 95       	com	r21
    1268:	40 95       	com	r20
    126a:	30 95       	com	r19
    126c:	21 95       	neg	r18
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	4f 4f       	sbci	r20, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255

00001274 <__divmodsi4_exit>:
    1274:	08 95       	ret

00001276 <__negsi2>:
    1276:	90 95       	com	r25
    1278:	80 95       	com	r24
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	08 95       	ret

00001286 <__prologue_saves__>:
    1286:	2f 92       	push	r2
    1288:	3f 92       	push	r3
    128a:	4f 92       	push	r4
    128c:	5f 92       	push	r5
    128e:	6f 92       	push	r6
    1290:	7f 92       	push	r7
    1292:	8f 92       	push	r8
    1294:	9f 92       	push	r9
    1296:	af 92       	push	r10
    1298:	bf 92       	push	r11
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	ca 1b       	sub	r28, r26
    12b0:	db 0b       	sbc	r29, r27
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	09 94       	ijmp

000012be <__epilogue_restores__>:
    12be:	2a 88       	ldd	r2, Y+18	; 0x12
    12c0:	39 88       	ldd	r3, Y+17	; 0x11
    12c2:	48 88       	ldd	r4, Y+16	; 0x10
    12c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    12cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    12d0:	b9 84       	ldd	r11, Y+9	; 0x09
    12d2:	c8 84       	ldd	r12, Y+8	; 0x08
    12d4:	df 80       	ldd	r13, Y+7	; 0x07
    12d6:	ee 80       	ldd	r14, Y+6	; 0x06
    12d8:	fd 80       	ldd	r15, Y+5	; 0x05
    12da:	0c 81       	ldd	r16, Y+4	; 0x04
    12dc:	1b 81       	ldd	r17, Y+3	; 0x03
    12de:	aa 81       	ldd	r26, Y+2	; 0x02
    12e0:	b9 81       	ldd	r27, Y+1	; 0x01
    12e2:	ce 0f       	add	r28, r30
    12e4:	d1 1d       	adc	r29, r1
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	ed 01       	movw	r28, r26
    12f2:	08 95       	ret

000012f4 <_exit>:
    12f4:	f8 94       	cli

000012f6 <__stop_program>:
    12f6:	ff cf       	rjmp	.-2      	; 0x12f6 <__stop_program>
