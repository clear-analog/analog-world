
codebase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a91  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000810  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045c  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b9  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c4  00000000  00000000  00002111  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000022d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_11>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_12>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  6c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  70:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ec ea       	ldi	r30, 0xAC	; 172
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a5 30       	cpi	r26, 0x05	; 5
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  aa:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <__vector_11>:
    // The empty asm volatile ensures compiler doesn't optimize it away
    while (iterations > 0) {
        asm volatile("nop"); // 1 cycle no-operation
        iterations--;        // 3 cycles for decrement and branch
    }
}
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
  c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
  c6:	83 ff       	sbrs	r24, 3
  c8:	10 c0       	rjmp	.+32     	; 0xea <__vector_11+0x38>
  ca:	e1 ee       	ldi	r30, 0xE1	; 225
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	87 7f       	andi	r24, 0xF7	; 247
  d2:	80 83       	st	Z, r24
  d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timestamp_counter>
  d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timestamp_counter+0x1>
  dc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timestamp_counter+0x2>
  e0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timestamp_counter+0x3>
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_12>:
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
 110:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7fc0e1>
 114:	82 ff       	sbrs	r24, 2
 116:	18 c0       	rjmp	.+48     	; 0x148 <__vector_12+0x4e>
 118:	e1 ee       	ldi	r30, 0xE1	; 225
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	80 83       	st	Z, r24
 122:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timestamp_counter>
 126:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timestamp_counter+0x1>
 12a:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timestamp_counter+0x2>
 12e:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timestamp_counter+0x3>
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timestamp_counter>
 13c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timestamp_counter+0x1>
 140:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timestamp_counter+0x2>
 144:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timestamp_counter+0x3>
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <SPI_INIT2>:
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	87 60       	ori	r24, 0x07	; 7
 162:	84 b9       	out	0x04, r24	; 4
 164:	84 b1       	in	r24, 0x04	; 4
 166:	87 7f       	andi	r24, 0xF7	; 247
 168:	84 b9       	out	0x04, r24	; 4
 16a:	88 e5       	ldi	r24, 0x58	; 88
 16c:	8c bd       	out	0x2c, r24	; 44
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	8d bd       	out	0x2d, r24	; 45
 172:	08 95       	ret

00000174 <SPI_transmit2>:
 174:	8e bd       	out	0x2e, r24	; 46
 176:	0d b4       	in	r0, 0x2d	; 45
 178:	07 fe       	sbrs	r0, 7
 17a:	fd cf       	rjmp	.-6      	; 0x176 <SPI_transmit2+0x2>
 17c:	8e b5       	in	r24, 0x2e	; 46
 17e:	08 95       	ret

00000180 <SPI_select>:
 180:	85 b1       	in	r24, 0x05	; 5
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <SPI_deselect>:
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	08 95       	ret

00000190 <main>:


int main(void) {
	SPI_INIT2();                          // Initialize SPI
 190:	0e 94 af 00 	call	0x15e	; 0x15e <SPI_INIT2>

	while (1) {
		SPI_select();                    // Select the SPI slave
 194:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_select>
		uint8_t received = SPI_transmit2(0x55); // Transmit a byte and receive data
 198:	85 e5       	ldi	r24, 0x55	; 85
 19a:	0e 94 ba 00 	call	0x174	; 0x174 <SPI_transmit2>
		SPI_deselect();                  // Deselect the SPI slave */
 19e:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_deselect>
		
		// Process the received byte (optional)
		received = received + 1;
		PORTD = 0b00100000;
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	f6 cf       	rjmp	.-20     	; 0x194 <main+0x4>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
